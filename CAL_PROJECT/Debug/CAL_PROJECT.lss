
CAL_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002d86  00002dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001efc  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ed6  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00005cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000250  00000000  00000000  00005eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b10  00000000  00000000  0000613a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001782  00000000  00000000  00008c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b1  00000000  00000000  0000a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000b880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000317  00000000  00000000  0000baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  0000bdb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 31 14 	call	0x2862	; 0x2862 <main>
      7a:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 4d 04 	call	0x89a	; 0x89a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e6       	ldi	r26, 0x64	; 100
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e6       	ldi	r22, 0x64	; 100
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000007da <__nesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__nesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__nesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__nesf2+0x58>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000083a <__gtsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000089a <__gesf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__gesf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__gesf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__gesf2+0x58>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

000008fa <__ltsf2>:
     8fa:	a8 e1       	ldi	r26, 0x18	; 24
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x18>
     906:	69 83       	std	Y+1, r22	; 0x01
     908:	7a 83       	std	Y+2, r23	; 0x02
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	2d 83       	std	Y+5, r18	; 0x05
     910:	3e 83       	std	Y+6, r19	; 0x06
     912:	4f 83       	std	Y+7, r20	; 0x07
     914:	58 87       	std	Y+8, r21	; 0x08
     916:	89 e0       	ldi	r24, 0x09	; 9
     918:	e8 2e       	mov	r14, r24
     91a:	f1 2c       	mov	r15, r1
     91c:	ec 0e       	add	r14, r28
     91e:	fd 1e       	adc	r15, r29
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	b7 01       	movw	r22, r14
     926:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     92a:	8e 01       	movw	r16, r28
     92c:	0f 5e       	subi	r16, 0xEF	; 239
     92e:	1f 4f       	sbci	r17, 0xFF	; 255
     930:	ce 01       	movw	r24, r28
     932:	05 96       	adiw	r24, 0x05	; 5
     934:	b8 01       	movw	r22, r16
     936:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     93a:	89 85       	ldd	r24, Y+9	; 0x09
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	40 f0       	brcs	.+16     	; 0x950 <__ltsf2+0x56>
     940:	89 89       	ldd	r24, Y+17	; 0x11
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	28 f0       	brcs	.+10     	; 0x950 <__ltsf2+0x56>
     946:	c7 01       	movw	r24, r14
     948:	b8 01       	movw	r22, r16
     94a:	0e 94 74 07 	call	0xee8	; 0xee8 <__fpcmp_parts_f>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <__ltsf2+0x58>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	e6 e0       	ldi	r30, 0x06	; 6
     956:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x18>

0000095a <__floatsisf>:
     95a:	a8 e0       	ldi	r26, 0x08	; 8
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__prologue_saves__+0x12>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	89 83       	std	Y+1, r24	; 0x01
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	88 27       	eor	r24, r24
     974:	b7 fd       	sbrc	r27, 7
     976:	83 95       	inc	r24
     978:	99 27       	eor	r25, r25
     97a:	aa 27       	eor	r26, r26
     97c:	bb 27       	eor	r27, r27
     97e:	b8 2e       	mov	r11, r24
     980:	21 15       	cp	r18, r1
     982:	31 05       	cpc	r19, r1
     984:	41 05       	cpc	r20, r1
     986:	51 05       	cpc	r21, r1
     988:	19 f4       	brne	.+6      	; 0x990 <__floatsisf+0x36>
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	89 83       	std	Y+1, r24	; 0x01
     98e:	3a c0       	rjmp	.+116    	; 0xa04 <__floatsisf+0xaa>
     990:	88 23       	and	r24, r24
     992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x64>
     994:	20 30       	cpi	r18, 0x00	; 0
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	38 07       	cpc	r19, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	48 07       	cpc	r20, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	58 07       	cpc	r21, r24
     9a2:	29 f4       	brne	.+10     	; 0x9ae <__floatsisf+0x54>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	9f ec       	ldi	r25, 0xCF	; 207
     9ac:	30 c0       	rjmp	.+96     	; 0xa0e <__floatsisf+0xb4>
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	87 01       	movw	r16, r14
     9b4:	e2 1a       	sub	r14, r18
     9b6:	f3 0a       	sbc	r15, r19
     9b8:	04 0b       	sbc	r16, r20
     9ba:	15 0b       	sbc	r17, r21
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__floatsisf+0x68>
     9be:	79 01       	movw	r14, r18
     9c0:	8a 01       	movw	r16, r20
     9c2:	8e e1       	ldi	r24, 0x1E	; 30
     9c4:	c8 2e       	mov	r12, r24
     9c6:	d1 2c       	mov	r13, r1
     9c8:	dc 82       	std	Y+4, r13	; 0x04
     9ca:	cb 82       	std	Y+3, r12	; 0x03
     9cc:	ed 82       	std	Y+5, r14	; 0x05
     9ce:	fe 82       	std	Y+6, r15	; 0x06
     9d0:	0f 83       	std	Y+7, r16	; 0x07
     9d2:	18 87       	std	Y+8, r17	; 0x08
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	18 16       	cp	r1, r24
     9e0:	19 06       	cpc	r1, r25
     9e2:	84 f4       	brge	.+32     	; 0xa04 <__floatsisf+0xaa>
     9e4:	08 2e       	mov	r0, r24
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__floatsisf+0x96>
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	00 1f       	adc	r16, r16
     9ee:	11 1f       	adc	r17, r17
     9f0:	0a 94       	dec	r0
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__floatsisf+0x8e>
     9f4:	ed 82       	std	Y+5, r14	; 0x05
     9f6:	fe 82       	std	Y+6, r15	; 0x06
     9f8:	0f 83       	std	Y+7, r16	; 0x07
     9fa:	18 87       	std	Y+8, r17	; 0x08
     9fc:	c8 1a       	sub	r12, r24
     9fe:	d9 0a       	sbc	r13, r25
     a00:	dc 82       	std	Y+4, r13	; 0x04
     a02:	cb 82       	std	Y+3, r12	; 0x03
     a04:	ba 82       	std	Y+2, r11	; 0x02
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	e9 e0       	ldi	r30, 0x09	; 9
     a12:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__epilogue_restores__+0x12>

00000a16 <__fixsfsi>:
     a16:	ac e0       	ldi	r26, 0x0C	; 12
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	e1 e1       	ldi	r30, 0x11	; 17
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__+0x20>
     a22:	69 83       	std	Y+1, r22	; 0x01
     a24:	7a 83       	std	Y+2, r23	; 0x02
     a26:	8b 83       	std	Y+3, r24	; 0x03
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6b 5f       	subi	r22, 0xFB	; 251
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__unpack_f>
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	61 f1       	breq	.+88     	; 0xa96 <__fixsfsi+0x80>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	50 f1       	brcs	.+84     	; 0xa96 <__fixsfsi+0x80>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	21 f4       	brne	.+8      	; 0xa4e <__fixsfsi+0x38>
     a46:	8e 81       	ldd	r24, Y+6	; 0x06
     a48:	88 23       	and	r24, r24
     a4a:	51 f1       	breq	.+84     	; 0xaa0 <__fixsfsi+0x8a>
     a4c:	2e c0       	rjmp	.+92     	; 0xaaa <__fixsfsi+0x94>
     a4e:	2f 81       	ldd	r18, Y+7	; 0x07
     a50:	38 85       	ldd	r19, Y+8	; 0x08
     a52:	37 fd       	sbrc	r19, 7
     a54:	20 c0       	rjmp	.+64     	; 0xa96 <__fixsfsi+0x80>
     a56:	6e 81       	ldd	r22, Y+6	; 0x06
     a58:	2f 31       	cpi	r18, 0x1F	; 31
     a5a:	31 05       	cpc	r19, r1
     a5c:	1c f0       	brlt	.+6      	; 0xa64 <__fixsfsi+0x4e>
     a5e:	66 23       	and	r22, r22
     a60:	f9 f0       	breq	.+62     	; 0xaa0 <__fixsfsi+0x8a>
     a62:	23 c0       	rjmp	.+70     	; 0xaaa <__fixsfsi+0x94>
     a64:	8e e1       	ldi	r24, 0x1E	; 30
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	82 1b       	sub	r24, r18
     a6a:	93 0b       	sbc	r25, r19
     a6c:	29 85       	ldd	r18, Y+9	; 0x09
     a6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a70:	4b 85       	ldd	r20, Y+11	; 0x0b
     a72:	5c 85       	ldd	r21, Y+12	; 0x0c
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fixsfsi+0x68>
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	8a 95       	dec	r24
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__fixsfsi+0x60>
     a82:	66 23       	and	r22, r22
     a84:	b1 f0       	breq	.+44     	; 0xab2 <__fixsfsi+0x9c>
     a86:	50 95       	com	r21
     a88:	40 95       	com	r20
     a8a:	30 95       	com	r19
     a8c:	21 95       	neg	r18
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	4f 4f       	sbci	r20, 0xFF	; 255
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__fixsfsi+0x9c>
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f ef       	ldi	r20, 0xFF	; 255
     aa6:	5f e7       	ldi	r21, 0x7F	; 127
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__fixsfsi+0x9c>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e8       	ldi	r21, 0x80	; 128
     ab2:	b9 01       	movw	r22, r18
     ab4:	ca 01       	movw	r24, r20
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	e2 e0       	ldi	r30, 0x02	; 2
     aba:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__+0x20>

00000abe <__floatunsisf>:
     abe:	a8 e0       	ldi	r26, 0x08	; 8
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	e5 e6       	ldi	r30, 0x65	; 101
     ac4:	f5 e0       	ldi	r31, 0x05	; 5
     ac6:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x10>
     aca:	7b 01       	movw	r14, r22
     acc:	8c 01       	movw	r16, r24
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	81 05       	cpc	r24, r1
     ad4:	91 05       	cpc	r25, r1
     ad6:	19 f4       	brne	.+6      	; 0xade <__floatunsisf+0x20>
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	60 c0       	rjmp	.+192    	; 0xb9e <__floatunsisf+0xe0>
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	8e e1       	ldi	r24, 0x1E	; 30
     ae4:	c8 2e       	mov	r12, r24
     ae6:	d1 2c       	mov	r13, r1
     ae8:	dc 82       	std	Y+4, r13	; 0x04
     aea:	cb 82       	std	Y+3, r12	; 0x03
     aec:	ed 82       	std	Y+5, r14	; 0x05
     aee:	fe 82       	std	Y+6, r15	; 0x06
     af0:	0f 83       	std	Y+7, r16	; 0x07
     af2:	18 87       	std	Y+8, r17	; 0x08
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__clzsi2>
     afc:	fc 01       	movw	r30, r24
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f7 ff       	sbrs	r31, 7
     b02:	3b c0       	rjmp	.+118    	; 0xb7a <__floatunsisf+0xbc>
     b04:	22 27       	eor	r18, r18
     b06:	33 27       	eor	r19, r19
     b08:	2e 1b       	sub	r18, r30
     b0a:	3f 0b       	sbc	r19, r31
     b0c:	57 01       	movw	r10, r14
     b0e:	68 01       	movw	r12, r16
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__floatunsisf+0x5e>
     b14:	d6 94       	lsr	r13
     b16:	c7 94       	ror	r12
     b18:	b7 94       	ror	r11
     b1a:	a7 94       	ror	r10
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__floatunsisf+0x56>
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0x7c>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	aa 1f       	adc	r26, r26
     b38:	bb 1f       	adc	r27, r27
     b3a:	2a 95       	dec	r18
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0x74>
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	a1 09       	sbc	r26, r1
     b42:	b1 09       	sbc	r27, r1
     b44:	8e 21       	and	r24, r14
     b46:	9f 21       	and	r25, r15
     b48:	a0 23       	and	r26, r16
     b4a:	b1 23       	and	r27, r17
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	a1 05       	cpc	r26, r1
     b50:	b1 05       	cpc	r27, r1
     b52:	21 f0       	breq	.+8      	; 0xb5c <__floatunsisf+0x9e>
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	4a 29       	or	r20, r10
     b5e:	5b 29       	or	r21, r11
     b60:	6c 29       	or	r22, r12
     b62:	7d 29       	or	r23, r13
     b64:	4d 83       	std	Y+5, r20	; 0x05
     b66:	5e 83       	std	Y+6, r21	; 0x06
     b68:	6f 83       	std	Y+7, r22	; 0x07
     b6a:	78 87       	std	Y+8, r23	; 0x08
     b6c:	8e e1       	ldi	r24, 0x1E	; 30
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	8e 1b       	sub	r24, r30
     b72:	9f 0b       	sbc	r25, r31
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	12 c0       	rjmp	.+36     	; 0xb9e <__floatunsisf+0xe0>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	81 f0       	breq	.+32     	; 0xb9e <__floatunsisf+0xe0>
     b7e:	0e 2e       	mov	r0, r30
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <__floatunsisf+0xcc>
     b82:	ee 0c       	add	r14, r14
     b84:	ff 1c       	adc	r15, r15
     b86:	00 1f       	adc	r16, r16
     b88:	11 1f       	adc	r17, r17
     b8a:	0a 94       	dec	r0
     b8c:	d2 f7       	brpl	.-12     	; 0xb82 <__floatunsisf+0xc4>
     b8e:	ed 82       	std	Y+5, r14	; 0x05
     b90:	fe 82       	std	Y+6, r15	; 0x06
     b92:	0f 83       	std	Y+7, r16	; 0x07
     b94:	18 87       	std	Y+8, r17	; 0x08
     b96:	ce 1a       	sub	r12, r30
     b98:	df 0a       	sbc	r13, r31
     b9a:	dc 82       	std	Y+4, r13	; 0x04
     b9c:	cb 82       	std	Y+3, r12	; 0x03
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__pack_f>
     ba8:	28 96       	adiw	r28, 0x08	; 8
     baa:	ea e0       	ldi	r30, 0x0A	; 10
     bac:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x10>

00000bb0 <__clzsi2>:
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	7b 01       	movw	r14, r22
     bba:	8c 01       	movw	r16, r24
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	e8 16       	cp	r14, r24
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	f8 06       	cpc	r15, r24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	08 07       	cpc	r16, r24
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	18 07       	cpc	r17, r24
     bcc:	88 f4       	brcc	.+34     	; 0xbf0 <__clzsi2+0x40>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	e8 16       	cp	r14, r24
     bd2:	f1 04       	cpc	r15, r1
     bd4:	01 05       	cpc	r16, r1
     bd6:	11 05       	cpc	r17, r1
     bd8:	31 f0       	breq	.+12     	; 0xbe6 <__clzsi2+0x36>
     bda:	28 f0       	brcs	.+10     	; 0xbe6 <__clzsi2+0x36>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e0       	ldi	r26, 0x00	; 0
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	17 c0       	rjmp	.+46     	; 0xc14 <__clzsi2+0x64>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <__clzsi2+0x64>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	e8 16       	cp	r14, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	f8 06       	cpc	r15, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 07       	cpc	r16, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	18 07       	cpc	r17, r24
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__clzsi2+0x5c>
     c02:	88 e1       	ldi	r24, 0x18	; 24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	a0 e0       	ldi	r26, 0x00	; 0
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__clzsi2+0x64>
     c0c:	80 e1       	ldi	r24, 0x10	; 16
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	20 e2       	ldi	r18, 0x20	; 32
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	28 1b       	sub	r18, r24
     c1e:	39 0b       	sbc	r19, r25
     c20:	4a 0b       	sbc	r20, r26
     c22:	5b 0b       	sbc	r21, r27
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__clzsi2+0x7e>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	8a 95       	dec	r24
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__clzsi2+0x76>
     c32:	f7 01       	movw	r30, r14
     c34:	e4 59       	subi	r30, 0x94	; 148
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 81       	ld	r24, Z
     c3a:	28 1b       	sub	r18, r24
     c3c:	31 09       	sbc	r19, r1
     c3e:	41 09       	sbc	r20, r1
     c40:	51 09       	sbc	r21, r1
     c42:	c9 01       	movw	r24, r18
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	08 95       	ret

00000c4e <__pack_f>:
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 80       	ldd	r14, Z+4	; 0x04
     c5c:	f5 80       	ldd	r15, Z+5	; 0x05
     c5e:	06 81       	ldd	r16, Z+6	; 0x06
     c60:	17 81       	ldd	r17, Z+7	; 0x07
     c62:	d1 80       	ldd	r13, Z+1	; 0x01
     c64:	80 81       	ld	r24, Z
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	48 f4       	brcc	.+18     	; 0xc7c <__pack_f+0x2e>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a0 e1       	ldi	r26, 0x10	; 16
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e8 2a       	or	r14, r24
     c74:	f9 2a       	or	r15, r25
     c76:	0a 2b       	or	r16, r26
     c78:	1b 2b       	or	r17, r27
     c7a:	a5 c0       	rjmp	.+330    	; 0xdc6 <__pack_f+0x178>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__pack_f+0x34>
     c80:	9f c0       	rjmp	.+318    	; 0xdc0 <__pack_f+0x172>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	21 f4       	brne	.+8      	; 0xc8e <__pack_f+0x40>
     c86:	ee 24       	eor	r14, r14
     c88:	ff 24       	eor	r15, r15
     c8a:	87 01       	movw	r16, r14
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__pack_f+0x4a>
     c8e:	e1 14       	cp	r14, r1
     c90:	f1 04       	cpc	r15, r1
     c92:	01 05       	cpc	r16, r1
     c94:	11 05       	cpc	r17, r1
     c96:	19 f4       	brne	.+6      	; 0xc9e <__pack_f+0x50>
     c98:	e0 e0       	ldi	r30, 0x00	; 0
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	96 c0       	rjmp	.+300    	; 0xdca <__pack_f+0x17c>
     c9e:	62 81       	ldd	r22, Z+2	; 0x02
     ca0:	73 81       	ldd	r23, Z+3	; 0x03
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	62 38       	cpi	r22, 0x82	; 130
     ca6:	79 07       	cpc	r23, r25
     ca8:	0c f0       	brlt	.+2      	; 0xcac <__pack_f+0x5e>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <__pack_f+0x114>
     cac:	22 e8       	ldi	r18, 0x82	; 130
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	2a 31       	cpi	r18, 0x1A	; 26
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f0       	brlt	.+10     	; 0xcc4 <__pack_f+0x76>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	2a c0       	rjmp	.+84     	; 0xd18 <__pack_f+0xca>
     cc4:	b8 01       	movw	r22, r16
     cc6:	a7 01       	movw	r20, r14
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__pack_f+0x86>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__pack_f+0x7e>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x9c>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	2a 95       	dec	r18
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__pack_f+0x94>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	a1 09       	sbc	r26, r1
     cf2:	b1 09       	sbc	r27, r1
     cf4:	8e 21       	and	r24, r14
     cf6:	9f 21       	and	r25, r15
     cf8:	a0 23       	and	r26, r16
     cfa:	b1 23       	and	r27, r17
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	21 f0       	breq	.+8      	; 0xd0c <__pack_f+0xbe>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	9a 01       	movw	r18, r20
     d0e:	ab 01       	movw	r20, r22
     d10:	28 2b       	or	r18, r24
     d12:	39 2b       	or	r19, r25
     d14:	4a 2b       	or	r20, r26
     d16:	5b 2b       	or	r21, r27
     d18:	da 01       	movw	r26, r20
     d1a:	c9 01       	movw	r24, r18
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	90 70       	andi	r25, 0x00	; 0
     d20:	a0 70       	andi	r26, 0x00	; 0
     d22:	b0 70       	andi	r27, 0x00	; 0
     d24:	80 34       	cpi	r24, 0x40	; 64
     d26:	91 05       	cpc	r25, r1
     d28:	a1 05       	cpc	r26, r1
     d2a:	b1 05       	cpc	r27, r1
     d2c:	39 f4       	brne	.+14     	; 0xd3c <__pack_f+0xee>
     d2e:	27 ff       	sbrs	r18, 7
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <__pack_f+0xf6>
     d32:	20 5c       	subi	r18, 0xC0	; 192
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	4f 4f       	sbci	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0xf6>
     d3c:	21 5c       	subi	r18, 0xC1	; 193
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	4f 4f       	sbci	r20, 0xFF	; 255
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	20 30       	cpi	r18, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	3a 07       	cpc	r19, r26
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	4a 07       	cpc	r20, r26
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	5a 07       	cpc	r21, r26
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__pack_f+0x10e>
     d58:	e1 e0       	ldi	r30, 0x01	; 1
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	79 01       	movw	r14, r18
     d5e:	8a 01       	movw	r16, r20
     d60:	27 c0       	rjmp	.+78     	; 0xdb0 <__pack_f+0x162>
     d62:	60 38       	cpi	r22, 0x80	; 128
     d64:	71 05       	cpc	r23, r1
     d66:	64 f5       	brge	.+88     	; 0xdc0 <__pack_f+0x172>
     d68:	fb 01       	movw	r30, r22
     d6a:	e1 58       	subi	r30, 0x81	; 129
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	d8 01       	movw	r26, r16
     d70:	c7 01       	movw	r24, r14
     d72:	8f 77       	andi	r24, 0x7F	; 127
     d74:	90 70       	andi	r25, 0x00	; 0
     d76:	a0 70       	andi	r26, 0x00	; 0
     d78:	b0 70       	andi	r27, 0x00	; 0
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	91 05       	cpc	r25, r1
     d7e:	a1 05       	cpc	r26, r1
     d80:	b1 05       	cpc	r27, r1
     d82:	39 f4       	brne	.+14     	; 0xd92 <__pack_f+0x144>
     d84:	e7 fe       	sbrs	r14, 7
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <__pack_f+0x154>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <__pack_f+0x14c>
     d92:	8f e3       	ldi	r24, 0x3F	; 63
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 0e       	add	r14, r24
     d9c:	f9 1e       	adc	r15, r25
     d9e:	0a 1f       	adc	r16, r26
     da0:	1b 1f       	adc	r17, r27
     da2:	17 ff       	sbrs	r17, 7
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <__pack_f+0x162>
     da6:	16 95       	lsr	r17
     da8:	07 95       	ror	r16
     daa:	f7 94       	ror	r15
     dac:	e7 94       	ror	r14
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	87 e0       	ldi	r24, 0x07	; 7
     db2:	16 95       	lsr	r17
     db4:	07 95       	ror	r16
     db6:	f7 94       	ror	r15
     db8:	e7 94       	ror	r14
     dba:	8a 95       	dec	r24
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <__pack_f+0x164>
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__pack_f+0x17c>
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	ef ef       	ldi	r30, 0xFF	; 255
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	6e 2f       	mov	r22, r30
     dcc:	67 95       	ror	r22
     dce:	66 27       	eor	r22, r22
     dd0:	67 95       	ror	r22
     dd2:	90 2f       	mov	r25, r16
     dd4:	9f 77       	andi	r25, 0x7F	; 127
     dd6:	d7 94       	ror	r13
     dd8:	dd 24       	eor	r13, r13
     dda:	d7 94       	ror	r13
     ddc:	8e 2f       	mov	r24, r30
     dde:	86 95       	lsr	r24
     de0:	49 2f       	mov	r20, r25
     de2:	46 2b       	or	r20, r22
     de4:	58 2f       	mov	r21, r24
     de6:	5d 29       	or	r21, r13
     de8:	b7 01       	movw	r22, r14
     dea:	ca 01       	movw	r24, r20
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	08 95       	ret

00000df8 <__unpack_f>:
     df8:	fc 01       	movw	r30, r24
     dfa:	db 01       	movw	r26, r22
     dfc:	40 81       	ld	r20, Z
     dfe:	51 81       	ldd	r21, Z+1	; 0x01
     e00:	22 81       	ldd	r18, Z+2	; 0x02
     e02:	62 2f       	mov	r22, r18
     e04:	6f 77       	andi	r22, 0x7F	; 127
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	22 1f       	adc	r18, r18
     e0a:	22 27       	eor	r18, r18
     e0c:	22 1f       	adc	r18, r18
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	89 2f       	mov	r24, r25
     e12:	88 0f       	add	r24, r24
     e14:	82 2b       	or	r24, r18
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	99 1f       	adc	r25, r25
     e1c:	99 27       	eor	r25, r25
     e1e:	99 1f       	adc	r25, r25
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	a9 f5       	brne	.+106    	; 0xe96 <__unpack_f+0x9e>
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	61 05       	cpc	r22, r1
     e32:	71 05       	cpc	r23, r1
     e34:	11 f4       	brne	.+4      	; 0xe3a <__unpack_f+0x42>
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	37 c0       	rjmp	.+110    	; 0xea8 <__unpack_f+0xb0>
     e3a:	82 e8       	ldi	r24, 0x82	; 130
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	9c 93       	st	X, r25
     e42:	8e 93       	st	-X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	67 e0       	ldi	r22, 0x07	; 7
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	55 1f       	adc	r21, r21
     e54:	6a 95       	dec	r22
     e56:	d1 f7       	brne	.-12     	; 0xe4c <__unpack_f+0x54>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8c 93       	st	X, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__unpack_f+0x80>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	44 1f       	adc	r20, r20
     e64:	55 1f       	adc	r21, r21
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	20 30       	cpi	r18, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	38 07       	cpc	r19, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	48 07       	cpc	r20, r24
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	58 07       	cpc	r21, r24
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__unpack_f+0x66>
     e88:	14 96       	adiw	r26, 0x04	; 4
     e8a:	2d 93       	st	X+, r18
     e8c:	3d 93       	st	X+, r19
     e8e:	4d 93       	st	X+, r20
     e90:	5c 93       	st	X, r21
     e92:	17 97       	sbiw	r26, 0x07	; 7
     e94:	08 95       	ret
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	31 05       	cpc	r19, r1
     e9a:	79 f4       	brne	.+30     	; 0xeba <__unpack_f+0xc2>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	19 f4       	brne	.+6      	; 0xeac <__unpack_f+0xb4>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	8c 93       	st	X, r24
     eaa:	08 95       	ret
     eac:	64 ff       	sbrs	r22, 4
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <__unpack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8c 93       	st	X, r24
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__unpack_f+0xe2>
     eb6:	1c 92       	st	X, r1
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <__unpack_f+0xe2>
     eba:	2f 57       	subi	r18, 0x7F	; 127
     ebc:	30 40       	sbci	r19, 0x00	; 0
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	3c 93       	st	X, r19
     ec2:	2e 93       	st	-X, r18
     ec4:	12 97       	sbiw	r26, 0x02	; 2
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	8c 93       	st	X, r24
     eca:	87 e0       	ldi	r24, 0x07	; 7
     ecc:	44 0f       	add	r20, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	d1 f7       	brne	.-12     	; 0xecc <__unpack_f+0xd4>
     ed8:	70 64       	ori	r23, 0x40	; 64
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	4d 93       	st	X+, r20
     ede:	5d 93       	st	X+, r21
     ee0:	6d 93       	st	X+, r22
     ee2:	7c 93       	st	X, r23
     ee4:	17 97       	sbiw	r26, 0x07	; 7
     ee6:	08 95       	ret

00000ee8 <__fpcmp_parts_f>:
     ee8:	1f 93       	push	r17
     eea:	dc 01       	movw	r26, r24
     eec:	fb 01       	movw	r30, r22
     eee:	9c 91       	ld	r25, X
     ef0:	92 30       	cpi	r25, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0xe>
     ef4:	47 c0       	rjmp	.+142    	; 0xf84 <__fpcmp_parts_f+0x9c>
     ef6:	80 81       	ld	r24, Z
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	08 f4       	brcc	.+2      	; 0xefe <__fpcmp_parts_f+0x16>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__fpcmp_parts_f+0x9c>
     efe:	94 30       	cpi	r25, 0x04	; 4
     f00:	51 f4       	brne	.+20     	; 0xf16 <__fpcmp_parts_f+0x2e>
     f02:	11 96       	adiw	r26, 0x01	; 1
     f04:	1c 91       	ld	r17, X
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	99 f5       	brne	.+102    	; 0xf70 <__fpcmp_parts_f+0x88>
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	61 1b       	sub	r22, r17
     f12:	71 09       	sbc	r23, r1
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <__fpcmp_parts_f+0xac>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	21 f0       	breq	.+8      	; 0xf22 <__fpcmp_parts_f+0x3a>
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	31 f4       	brne	.+12     	; 0xf2a <__fpcmp_parts_f+0x42>
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	b9 f1       	breq	.+110    	; 0xf90 <__fpcmp_parts_f+0xa8>
     f22:	81 81       	ldd	r24, Z+1	; 0x01
     f24:	88 23       	and	r24, r24
     f26:	89 f1       	breq	.+98     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f28:	2d c0       	rjmp	.+90     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	1c 91       	ld	r17, X
     f2e:	11 97       	sbiw	r26, 0x01	; 1
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	f1 f0       	breq	.+60     	; 0xf70 <__fpcmp_parts_f+0x88>
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	18 17       	cp	r17, r24
     f38:	d9 f4       	brne	.+54     	; 0xf70 <__fpcmp_parts_f+0x88>
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	2d 91       	ld	r18, X+
     f3e:	3c 91       	ld	r19, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	94 f0       	brlt	.+36     	; 0xf70 <__fpcmp_parts_f+0x88>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	bc f0       	brlt	.+46     	; 0xf80 <__fpcmp_parts_f+0x98>
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9d 91       	ld	r25, X+
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	24 81       	ldd	r18, Z+4	; 0x04
     f60:	35 81       	ldd	r19, Z+5	; 0x05
     f62:	46 81       	ldd	r20, Z+6	; 0x06
     f64:	57 81       	ldd	r21, Z+7	; 0x07
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	4a 07       	cpc	r20, r26
     f6c:	5b 07       	cpc	r21, r27
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <__fpcmp_parts_f+0x8e>
     f70:	11 23       	and	r17, r17
     f72:	41 f0       	breq	.+16     	; 0xf84 <__fpcmp_parts_f+0x9c>
     f74:	0a c0       	rjmp	.+20     	; 0xf8a <__fpcmp_parts_f+0xa2>
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	40 f4       	brcc	.+16     	; 0xf90 <__fpcmp_parts_f+0xa8>
     f80:	11 23       	and	r17, r17
     f82:	19 f0       	breq	.+6      	; 0xf8a <__fpcmp_parts_f+0xa2>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <__fpcmp_parts_f+0xac>
     f8a:	6f ef       	ldi	r22, 0xFF	; 255
     f8c:	7f ef       	ldi	r23, 0xFF	; 255
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fpcmp_parts_f+0xac>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	cb 01       	movw	r24, r22
     f96:	1f 91       	pop	r17
     f98:	08 95       	ret

00000f9a <DIO_voidSetPinDirection>:
#include "DIO_register.h"

				/*************** PIN API's ***************/

void DIO_voidSetPinDirection (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2d 97       	sbiw	r28, 0x0d	; 13
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	6a 83       	std	Y+2, r22	; 0x02
     fb2:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinDirection <= DIO_PIN_OUTPUT))
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	84 30       	cpi	r24, 0x04	; 4
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <DIO_voidSetPinDirection+0x22>
     fba:	09 c1       	rjmp	.+530    	; 0x11ce <DIO_voidSetPinDirection+0x234>
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 30       	cpi	r24, 0x08	; 8
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <DIO_voidSetPinDirection+0x2a>
     fc2:	05 c1       	rjmp	.+522    	; 0x11ce <DIO_voidSetPinDirection+0x234>
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <DIO_voidSetPinDirection+0x32>
     fca:	01 c1       	rjmp	.+514    	; 0x11ce <DIO_voidSetPinDirection+0x234>
	{
		switch (copy_u8PortId)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3d 87       	std	Y+13, r19	; 0x0d
     fd4:	2c 87       	std	Y+12, r18	; 0x0c
     fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <DIO_voidSetPinDirection+0x48>
     fe0:	4f c0       	rjmp	.+158    	; 0x1080 <DIO_voidSetPinDirection+0xe6>
     fe2:	2c 85       	ldd	r18, Y+12	; 0x0c
     fe4:	3d 85       	ldd	r19, Y+13	; 0x0d
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	2c f4       	brge	.+10     	; 0xff6 <DIO_voidSetPinDirection+0x5c>
     fec:	8c 85       	ldd	r24, Y+12	; 0x0c
     fee:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	71 f0       	breq	.+28     	; 0x1010 <DIO_voidSetPinDirection+0x76>
     ff4:	ec c0       	rjmp	.+472    	; 0x11ce <DIO_voidSetPinDirection+0x234>
     ff6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff8:	3d 85       	ldd	r19, Y+13	; 0x0d
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_voidSetPinDirection+0x68>
    1000:	77 c0       	rjmp	.+238    	; 0x10f0 <DIO_voidSetPinDirection+0x156>
    1002:	8c 85       	ldd	r24, Y+12	; 0x0c
    1004:	9d 85       	ldd	r25, Y+13	; 0x0d
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_voidSetPinDirection+0x74>
    100c:	a9 c0       	rjmp	.+338    	; 0x1160 <DIO_voidSetPinDirection+0x1c6>
    100e:	df c0       	rjmp	.+446    	; 0x11ce <DIO_voidSetPinDirection+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinDirection) {
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3b 87       	std	Y+11, r19	; 0x0b
    1018:	2a 87       	std	Y+10, r18	; 0x0a
    101a:	8a 85       	ldd	r24, Y+10	; 0x0a
    101c:	9b 85       	ldd	r25, Y+11	; 0x0b
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	31 f0       	breq	.+12     	; 0x102e <DIO_voidSetPinDirection+0x94>
    1022:	2a 85       	ldd	r18, Y+10	; 0x0a
    1024:	3b 85       	ldd	r19, Y+11	; 0x0b
    1026:	21 30       	cpi	r18, 0x01	; 1
    1028:	31 05       	cpc	r19, r1
    102a:	b1 f0       	breq	.+44     	; 0x1058 <DIO_voidSetPinDirection+0xbe>
    102c:	d0 c0       	rjmp	.+416    	; 0x11ce <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRA_REG,copy_u8PinId);
    102e:	aa e3       	ldi	r26, 0x3A	; 58
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e3       	ldi	r30, 0x3A	; 58
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_voidSetPinDirection+0xb2>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_voidSetPinDirection+0xae>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	bb c0       	rjmp	.+374    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRA_REG,copy_u8PinId);
    1058:	aa e3       	ldi	r26, 0x3A	; 58
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_voidSetPinDirection+0xdc>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_voidSetPinDirection+0xd8>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	a7 c0       	rjmp	.+334    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinDirection) {
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	39 87       	std	Y+9, r19	; 0x09
    1088:	28 87       	std	Y+8, r18	; 0x08
    108a:	88 85       	ldd	r24, Y+8	; 0x08
    108c:	99 85       	ldd	r25, Y+9	; 0x09
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	31 f0       	breq	.+12     	; 0x109e <DIO_voidSetPinDirection+0x104>
    1092:	28 85       	ldd	r18, Y+8	; 0x08
    1094:	39 85       	ldd	r19, Y+9	; 0x09
    1096:	21 30       	cpi	r18, 0x01	; 1
    1098:	31 05       	cpc	r19, r1
    109a:	b1 f0       	breq	.+44     	; 0x10c8 <DIO_voidSetPinDirection+0x12e>
    109c:	98 c0       	rjmp	.+304    	; 0x11ce <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRB_REG,copy_u8PinId);
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinDirection+0x122>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinDirection+0x11e>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	83 c0       	rjmp	.+262    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRB_REG,copy_u8PinId);
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_voidSetPinDirection+0x14c>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_voidSetPinDirection+0x148>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	6f c0       	rjmp	.+222    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinDirection) {
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3f 83       	std	Y+7, r19	; 0x07
    10f8:	2e 83       	std	Y+6, r18	; 0x06
    10fa:	8e 81       	ldd	r24, Y+6	; 0x06
    10fc:	9f 81       	ldd	r25, Y+7	; 0x07
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	31 f0       	breq	.+12     	; 0x110e <DIO_voidSetPinDirection+0x174>
    1102:	2e 81       	ldd	r18, Y+6	; 0x06
    1104:	3f 81       	ldd	r19, Y+7	; 0x07
    1106:	21 30       	cpi	r18, 0x01	; 1
    1108:	31 05       	cpc	r19, r1
    110a:	b1 f0       	breq	.+44     	; 0x1138 <DIO_voidSetPinDirection+0x19e>
    110c:	60 c0       	rjmp	.+192    	; 0x11ce <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG,copy_u8PinId);
    110e:	a4 e3       	ldi	r26, 0x34	; 52
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_voidSetPinDirection+0x192>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_voidSetPinDirection+0x18e>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	4b c0       	rjmp	.+150    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG,copy_u8PinId);
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_voidSetPinDirection+0x1bc>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_voidSetPinDirection+0x1b8>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	37 c0       	rjmp	.+110    	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinDirection) {
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3d 83       	std	Y+5, r19	; 0x05
    1168:	2c 83       	std	Y+4, r18	; 0x04
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	31 f0       	breq	.+12     	; 0x117e <DIO_voidSetPinDirection+0x1e4>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	21 30       	cpi	r18, 0x01	; 1
    1178:	31 05       	cpc	r19, r1
    117a:	b1 f0       	breq	.+44     	; 0x11a8 <DIO_voidSetPinDirection+0x20e>
    117c:	28 c0       	rjmp	.+80     	; 0x11ce <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRD_REG,copy_u8PinId);
    117e:	a1 e3       	ldi	r26, 0x31	; 49
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e1 e3       	ldi	r30, 0x31	; 49
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_voidSetPinDirection+0x202>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_voidSetPinDirection+0x1fe>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRD_REG,copy_u8PinId);
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_voidSetPinDirection+0x22c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_voidSetPinDirection+0x228>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    11ce:	2d 96       	adiw	r28, 0x0d	; 13
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	2d 97       	sbiw	r28, 0x0d	; 13
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	6a 83       	std	Y+2, r22	; 0x02
    11f8:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinValue <= DIO_PIN_HIGH))
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <DIO_voidSetPinValue+0x22>
    1200:	09 c1       	rjmp	.+530    	; 0x1414 <DIO_voidSetPinValue+0x234>
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	08 f0       	brcs	.+2      	; 0x120a <DIO_voidSetPinValue+0x2a>
    1208:	05 c1       	rjmp	.+522    	; 0x1414 <DIO_voidSetPinValue+0x234>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	08 f0       	brcs	.+2      	; 0x1212 <DIO_voidSetPinValue+0x32>
    1210:	01 c1       	rjmp	.+514    	; 0x1414 <DIO_voidSetPinValue+0x234>
	{
		switch (copy_u8PortId)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 87       	std	Y+13, r19	; 0x0d
    121a:	2c 87       	std	Y+12, r18	; 0x0c
    121c:	8c 85       	ldd	r24, Y+12	; 0x0c
    121e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <DIO_voidSetPinValue+0x48>
    1226:	4f c0       	rjmp	.+158    	; 0x12c6 <DIO_voidSetPinValue+0xe6>
    1228:	2c 85       	ldd	r18, Y+12	; 0x0c
    122a:	3d 85       	ldd	r19, Y+13	; 0x0d
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <DIO_voidSetPinValue+0x5c>
    1232:	8c 85       	ldd	r24, Y+12	; 0x0c
    1234:	9d 85       	ldd	r25, Y+13	; 0x0d
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	71 f0       	breq	.+28     	; 0x1256 <DIO_voidSetPinValue+0x76>
    123a:	ec c0       	rjmp	.+472    	; 0x1414 <DIO_voidSetPinValue+0x234>
    123c:	2c 85       	ldd	r18, Y+12	; 0x0c
    123e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <DIO_voidSetPinValue+0x68>
    1246:	77 c0       	rjmp	.+238    	; 0x1336 <DIO_voidSetPinValue+0x156>
    1248:	8c 85       	ldd	r24, Y+12	; 0x0c
    124a:	9d 85       	ldd	r25, Y+13	; 0x0d
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <DIO_voidSetPinValue+0x74>
    1252:	a9 c0       	rjmp	.+338    	; 0x13a6 <DIO_voidSetPinValue+0x1c6>
    1254:	df c0       	rjmp	.+446    	; 0x1414 <DIO_voidSetPinValue+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinValue) {
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3b 87       	std	Y+11, r19	; 0x0b
    125e:	2a 87       	std	Y+10, r18	; 0x0a
    1260:	8a 85       	ldd	r24, Y+10	; 0x0a
    1262:	9b 85       	ldd	r25, Y+11	; 0x0b
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	31 f0       	breq	.+12     	; 0x1274 <DIO_voidSetPinValue+0x94>
    1268:	2a 85       	ldd	r18, Y+10	; 0x0a
    126a:	3b 85       	ldd	r19, Y+11	; 0x0b
    126c:	21 30       	cpi	r18, 0x01	; 1
    126e:	31 05       	cpc	r19, r1
    1270:	b1 f0       	breq	.+44     	; 0x129e <DIO_voidSetPinValue+0xbe>
    1272:	d0 c0       	rjmp	.+416    	; 0x1414 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTA_REG,copy_u8PinId);
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_voidSetPinValue+0xb2>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_voidSetPinValue+0xae>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	bb c0       	rjmp	.+374    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTA_REG,copy_u8PinId);
    129e:	ab e3       	ldi	r26, 0x3B	; 59
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_voidSetPinValue+0xdc>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_voidSetPinValue+0xd8>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	a7 c0       	rjmp	.+334    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinValue) {
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	39 87       	std	Y+9, r19	; 0x09
    12ce:	28 87       	std	Y+8, r18	; 0x08
    12d0:	88 85       	ldd	r24, Y+8	; 0x08
    12d2:	99 85       	ldd	r25, Y+9	; 0x09
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	31 f0       	breq	.+12     	; 0x12e4 <DIO_voidSetPinValue+0x104>
    12d8:	28 85       	ldd	r18, Y+8	; 0x08
    12da:	39 85       	ldd	r19, Y+9	; 0x09
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	b1 f0       	breq	.+44     	; 0x130e <DIO_voidSetPinValue+0x12e>
    12e2:	98 c0       	rjmp	.+304    	; 0x1414 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTB_REG,copy_u8PinId);
    12e4:	a8 e3       	ldi	r26, 0x38	; 56
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e8 e3       	ldi	r30, 0x38	; 56
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_voidSetPinValue+0x122>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_voidSetPinValue+0x11e>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	83 c0       	rjmp	.+262    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTB_REG,copy_u8PinId);
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_voidSetPinValue+0x14c>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_voidSetPinValue+0x148>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	6f c0       	rjmp	.+222    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinValue) {
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3f 83       	std	Y+7, r19	; 0x07
    133e:	2e 83       	std	Y+6, r18	; 0x06
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <DIO_voidSetPinValue+0x174>
    1348:	2e 81       	ldd	r18, Y+6	; 0x06
    134a:	3f 81       	ldd	r19, Y+7	; 0x07
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	b1 f0       	breq	.+44     	; 0x137e <DIO_voidSetPinValue+0x19e>
    1352:	60 c0       	rjmp	.+192    	; 0x1414 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG,copy_u8PinId);
    1354:	a5 e3       	ldi	r26, 0x35	; 53
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e5 e3       	ldi	r30, 0x35	; 53
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_voidSetPinValue+0x192>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_voidSetPinValue+0x18e>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	4b c0       	rjmp	.+150    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG,copy_u8PinId);
    137e:	a5 e3       	ldi	r26, 0x35	; 53
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_voidSetPinValue+0x1bc>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_voidSetPinValue+0x1b8>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	37 c0       	rjmp	.+110    	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinValue) {
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <DIO_voidSetPinValue+0x1e4>
    13b8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ba:	3d 81       	ldd	r19, Y+5	; 0x05
    13bc:	21 30       	cpi	r18, 0x01	; 1
    13be:	31 05       	cpc	r19, r1
    13c0:	b1 f0       	breq	.+44     	; 0x13ee <DIO_voidSetPinValue+0x20e>
    13c2:	28 c0       	rjmp	.+80     	; 0x1414 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTD_REG,copy_u8PinId);
    13c4:	a2 e3       	ldi	r26, 0x32	; 50
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <DIO_voidSetPinValue+0x202>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <DIO_voidSetPinValue+0x1fe>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTD_REG,copy_u8PinId);
    13ee:	a2 e3       	ldi	r26, 0x32	; 50
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e2 e3       	ldi	r30, 0x32	; 50
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_voidSetPinValue+0x22c>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_voidSetPinValue+0x228>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1414:	2d 96       	adiw	r28, 0x0d	; 13
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_u8GetPinValue+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_u8GetPinValue+0x8>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_u8GetPinValue+0xa>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	08 f0       	brcs	.+2      	; 0x1440 <DIO_u8GetPinValue+0x1a>
    143e:	70 c0       	rjmp	.+224    	; 0x1520 <DIO_u8GetPinValue+0xfa>
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 30       	cpi	r24, 0x08	; 8
    1444:	08 f0       	brcs	.+2      	; 0x1448 <DIO_u8GetPinValue+0x22>
    1446:	6c c0       	rjmp	.+216    	; 0x1520 <DIO_u8GetPinValue+0xfa>
	{
		switch (copy_u8PortId)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3d 83       	std	Y+5, r19	; 0x05
    1450:	2c 83       	std	Y+4, r18	; 0x04
    1452:	4c 81       	ldd	r20, Y+4	; 0x04
    1454:	5d 81       	ldd	r21, Y+5	; 0x05
    1456:	41 30       	cpi	r20, 0x01	; 1
    1458:	51 05       	cpc	r21, r1
    145a:	49 f1       	breq	.+82     	; 0x14ae <DIO_u8GetPinValue+0x88>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	34 f4       	brge	.+12     	; 0x1472 <DIO_u8GetPinValue+0x4c>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	21 15       	cp	r18, r1
    146c:	31 05       	cpc	r19, r1
    146e:	61 f0       	breq	.+24     	; 0x1488 <DIO_u8GetPinValue+0x62>
    1470:	57 c0       	rjmp	.+174    	; 0x1520 <DIO_u8GetPinValue+0xfa>
    1472:	4c 81       	ldd	r20, Y+4	; 0x04
    1474:	5d 81       	ldd	r21, Y+5	; 0x05
    1476:	42 30       	cpi	r20, 0x02	; 2
    1478:	51 05       	cpc	r21, r1
    147a:	61 f1       	breq	.+88     	; 0x14d4 <DIO_u8GetPinValue+0xae>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	d1 f1       	breq	.+116    	; 0x14fa <DIO_u8GetPinValue+0xd4>
    1486:	4c c0       	rjmp	.+152    	; 0x1520 <DIO_u8GetPinValue+0xfa>
		{
			case DIO_PORTA:
				return GET_BIT(PINA_REG,copy_u8PinId);
    1488:	e9 e3       	ldi	r30, 0x39	; 57
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_u8GetPinValue+0x7a>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_u8GetPinValue+0x76>
    14a4:	ca 01       	movw	r24, r20
    14a6:	58 2f       	mov	r21, r24
    14a8:	51 70       	andi	r21, 0x01	; 1
    14aa:	5b 83       	std	Y+3, r21	; 0x03
    14ac:	3a c0       	rjmp	.+116    	; 0x1522 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTB:
				return GET_BIT(PINB_REG,copy_u8PinId);
    14ae:	e6 e3       	ldi	r30, 0x36	; 54
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a9 01       	movw	r20, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_u8GetPinValue+0xa0>
    14c2:	55 95       	asr	r21
    14c4:	47 95       	ror	r20
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_u8GetPinValue+0x9c>
    14ca:	ca 01       	movw	r24, r20
    14cc:	58 2f       	mov	r21, r24
    14ce:	51 70       	andi	r21, 0x01	; 1
    14d0:	5b 83       	std	Y+3, r21	; 0x03
    14d2:	27 c0       	rjmp	.+78     	; 0x1522 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTC:
				return GET_BIT(PINC_REG,copy_u8PinId);
    14d4:	e3 e3       	ldi	r30, 0x33	; 51
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_u8GetPinValue+0xc6>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_u8GetPinValue+0xc2>
    14f0:	ca 01       	movw	r24, r20
    14f2:	58 2f       	mov	r21, r24
    14f4:	51 70       	andi	r21, 0x01	; 1
    14f6:	5b 83       	std	Y+3, r21	; 0x03
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTD:
				return GET_BIT(PIND_REG,copy_u8PinId);
    14fa:	e0 e3       	ldi	r30, 0x30	; 48
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a9 01       	movw	r20, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8GetPinValue+0xec>
    150e:	55 95       	asr	r21
    1510:	47 95       	ror	r20
    1512:	8a 95       	dec	r24
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8GetPinValue+0xe8>
    1516:	ca 01       	movw	r24, r20
    1518:	58 2f       	mov	r21, r24
    151a:	51 70       	andi	r21, 0x01	; 1
    151c:	5b 83       	std	Y+3, r21	; 0x03
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <DIO_u8GetPinValue+0xfc>
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_u8GetPinValue+0x100>
	}
	else
	{
		//return Error State
	}
}
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	8e 83       	std	Y+6, r24	; 0x06
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	26 96       	adiw	r28, 0x06	; 6
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <DIO_voidTogglePinValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_voidTogglePinValue+0x8>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	08 f0       	brcs	.+2      	; 0x1552 <DIO_voidTogglePinValue+0x18>
    1550:	72 c0       	rjmp	.+228    	; 0x1636 <DIO_voidTogglePinValue+0xfc>
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <DIO_voidTogglePinValue+0x20>
    1558:	6e c0       	rjmp	.+220    	; 0x1636 <DIO_voidTogglePinValue+0xfc>
	{
		switch (copy_u8PortId)
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3c 83       	std	Y+4, r19	; 0x04
    1562:	2b 83       	std	Y+3, r18	; 0x03
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	49 f1       	breq	.+82     	; 0x15c0 <DIO_voidTogglePinValue+0x86>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	2c f4       	brge	.+10     	; 0x1582 <DIO_voidTogglePinValue+0x48>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	61 f0       	breq	.+24     	; 0x1598 <DIO_voidTogglePinValue+0x5e>
    1580:	5a c0       	rjmp	.+180    	; 0x1636 <DIO_voidTogglePinValue+0xfc>
    1582:	2b 81       	ldd	r18, Y+3	; 0x03
    1584:	3c 81       	ldd	r19, Y+4	; 0x04
    1586:	22 30       	cpi	r18, 0x02	; 2
    1588:	31 05       	cpc	r19, r1
    158a:	71 f1       	breq	.+92     	; 0x15e8 <DIO_voidTogglePinValue+0xae>
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	e9 f1       	breq	.+122    	; 0x1610 <DIO_voidTogglePinValue+0xd6>
    1596:	4f c0       	rjmp	.+158    	; 0x1636 <DIO_voidTogglePinValue+0xfc>
		{
			case DIO_PORTA:
				TOG_BIT(PORTA_REG,copy_u8PinId);
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_voidTogglePinValue+0x7c>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_voidTogglePinValue+0x78>
    15ba:	84 27       	eor	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	3b c0       	rjmp	.+118    	; 0x1636 <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTB:
				TOG_BIT(PORTB_REG,copy_u8PinId);
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_voidTogglePinValue+0xa4>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_voidTogglePinValue+0xa0>
    15e2:	84 27       	eor	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	27 c0       	rjmp	.+78     	; 0x1636 <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTC:
				TOG_BIT(PORTC_REG,copy_u8PinId);
    15e8:	a5 e3       	ldi	r26, 0x35	; 53
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e3       	ldi	r30, 0x35	; 53
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	48 2f       	mov	r20, r24
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	02 2e       	mov	r0, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_voidTogglePinValue+0xcc>
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	0a 94       	dec	r0
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_voidTogglePinValue+0xc8>
    160a:	84 27       	eor	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTD:
				TOG_BIT(PORTD_REG,copy_u8PinId);
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidTogglePinValue+0xf4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidTogglePinValue+0xf0>
    1632:	84 27       	eor	r24, r20
    1634:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <DIO_voidActivatePinInPullUpResistance>:

void DIO_voidActivatePinInPullUpResistance (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <DIO_voidActivatePinInPullUpResistance+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <DIO_voidActivatePinInPullUpResistance+0x8>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <DIO_voidActivatePinInPullUpResistance+0x18>
    165a:	72 c0       	rjmp	.+228    	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	08 f0       	brcs	.+2      	; 0x1664 <DIO_voidActivatePinInPullUpResistance+0x20>
    1662:	6e c0       	rjmp	.+220    	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
	{
		switch (copy_u8PortId)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	3c 83       	std	Y+4, r19	; 0x04
    166c:	2b 83       	std	Y+3, r18	; 0x03
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	91 05       	cpc	r25, r1
    1676:	49 f1       	breq	.+82     	; 0x16ca <DIO_voidActivatePinInPullUpResistance+0x86>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	3c 81       	ldd	r19, Y+4	; 0x04
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <DIO_voidActivatePinInPullUpResistance+0x48>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	61 f0       	breq	.+24     	; 0x16a2 <DIO_voidActivatePinInPullUpResistance+0x5e>
    168a:	5a c0       	rjmp	.+180    	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
    168c:	2b 81       	ldd	r18, Y+3	; 0x03
    168e:	3c 81       	ldd	r19, Y+4	; 0x04
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	71 f1       	breq	.+92     	; 0x16f2 <DIO_voidActivatePinInPullUpResistance+0xae>
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	91 05       	cpc	r25, r1
    169e:	e9 f1       	breq	.+122    	; 0x171a <DIO_voidActivatePinInPullUpResistance+0xd6>
    16a0:	4f c0       	rjmp	.+158    	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
				SET_BIT(PORTA_REG,copy_u8PinId);
    16a2:	ab e3       	ldi	r26, 0x3B	; 59
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_voidActivatePinInPullUpResistance+0x7c>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_voidActivatePinInPullUpResistance+0x78>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	3b c0       	rjmp	.+118    	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_REG,copy_u8PinId);
    16ca:	a8 e3       	ldi	r26, 0x38	; 56
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e8 e3       	ldi	r30, 0x38	; 56
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_voidActivatePinInPullUpResistance+0xa4>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_voidActivatePinInPullUpResistance+0xa0>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	27 c0       	rjmp	.+78     	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_REG,copy_u8PinId);
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_voidActivatePinInPullUpResistance+0xcc>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_voidActivatePinInPullUpResistance+0xc8>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_REG,copy_u8PinId);
    171a:	a2 e3       	ldi	r26, 0x32	; 50
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e2 e3       	ldi	r30, 0x32	; 50
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_voidActivatePinInPullUpResistance+0xf4>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_voidActivatePinInPullUpResistance+0xf0>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <DIO_voidSetPortDirection>:

				/*************** PORTS API's ***************/

void DIO_voidSetPortDirection (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	2c 97       	sbiw	r28, 0x0c	; 12
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortDirection <= DIO_PORT_OUTPUT))
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	08 f0       	brcs	.+2      	; 0x176e <DIO_voidSetPortDirection+0x20>
    176c:	83 c0       	rjmp	.+262    	; 0x1874 <DIO_voidSetPortDirection+0x126>
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	82 30       	cpi	r24, 0x02	; 2
    1772:	08 f0       	brcs	.+2      	; 0x1776 <DIO_voidSetPortDirection+0x28>
    1774:	7f c0       	rjmp	.+254    	; 0x1874 <DIO_voidSetPortDirection+0x126>
	{
		switch (copy_u8PortId)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3c 87       	std	Y+12, r19	; 0x0c
    177e:	2b 87       	std	Y+11, r18	; 0x0b
    1780:	8b 85       	ldd	r24, Y+11	; 0x0b
    1782:	9c 85       	ldd	r25, Y+12	; 0x0c
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	71 f1       	breq	.+92     	; 0x17e6 <DIO_voidSetPortDirection+0x98>
    178a:	2b 85       	ldd	r18, Y+11	; 0x0b
    178c:	3c 85       	ldd	r19, Y+12	; 0x0c
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <DIO_voidSetPortDirection+0x50>
    1794:	8b 85       	ldd	r24, Y+11	; 0x0b
    1796:	9c 85       	ldd	r25, Y+12	; 0x0c
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f0       	breq	.+26     	; 0x17b6 <DIO_voidSetPortDirection+0x68>
    179c:	6b c0       	rjmp	.+214    	; 0x1874 <DIO_voidSetPortDirection+0x126>
    179e:	2b 85       	ldd	r18, Y+11	; 0x0b
    17a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	b9 f1       	breq	.+110    	; 0x1816 <DIO_voidSetPortDirection+0xc8>
    17a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <DIO_voidSetPortDirection+0x66>
    17b2:	49 c0       	rjmp	.+146    	; 0x1846 <DIO_voidSetPortDirection+0xf8>
    17b4:	5f c0       	rjmp	.+190    	; 0x1874 <DIO_voidSetPortDirection+0x126>
		{
			case DIO_PORTA:
				switch (copy_u8PortDirection) {
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3a 87       	std	Y+10, r19	; 0x0a
    17be:	29 87       	std	Y+9, r18	; 0x09
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	31 f0       	breq	.+12     	; 0x17d4 <DIO_voidSetPortDirection+0x86>
    17c8:	29 85       	ldd	r18, Y+9	; 0x09
    17ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	31 05       	cpc	r19, r1
    17d0:	29 f0       	breq	.+10     	; 0x17dc <DIO_voidSetPortDirection+0x8e>
    17d2:	50 c0       	rjmp	.+160    	; 0x1874 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRA_REG = 0x00;
    17d4:	ea e3       	ldi	r30, 0x3A	; 58
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	10 82       	st	Z, r1
    17da:	4c c0       	rjmp	.+152    	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRA_REG = 0xFF;
    17dc:	ea e3       	ldi	r30, 0x3A	; 58
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	80 83       	st	Z, r24
    17e4:	47 c0       	rjmp	.+142    	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PortDirection) {
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	38 87       	std	Y+8, r19	; 0x08
    17ee:	2f 83       	std	Y+7, r18	; 0x07
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	98 85       	ldd	r25, Y+8	; 0x08
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	31 f0       	breq	.+12     	; 0x1804 <DIO_voidSetPortDirection+0xb6>
    17f8:	2f 81       	ldd	r18, Y+7	; 0x07
    17fa:	38 85       	ldd	r19, Y+8	; 0x08
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	31 05       	cpc	r19, r1
    1800:	29 f0       	breq	.+10     	; 0x180c <DIO_voidSetPortDirection+0xbe>
    1802:	38 c0       	rjmp	.+112    	; 0x1874 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRB_REG = 0x00;
    1804:	e7 e3       	ldi	r30, 0x37	; 55
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	10 82       	st	Z, r1
    180a:	34 c0       	rjmp	.+104    	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRB_REG = 0xFF;
    180c:	e7 e3       	ldi	r30, 0x37	; 55
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	80 83       	st	Z, r24
    1814:	2f c0       	rjmp	.+94     	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PortDirection) {
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3e 83       	std	Y+6, r19	; 0x06
    181e:	2d 83       	std	Y+5, r18	; 0x05
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	31 f0       	breq	.+12     	; 0x1834 <DIO_voidSetPortDirection+0xe6>
    1828:	2d 81       	ldd	r18, Y+5	; 0x05
    182a:	3e 81       	ldd	r19, Y+6	; 0x06
    182c:	21 30       	cpi	r18, 0x01	; 1
    182e:	31 05       	cpc	r19, r1
    1830:	29 f0       	breq	.+10     	; 0x183c <DIO_voidSetPortDirection+0xee>
    1832:	20 c0       	rjmp	.+64     	; 0x1874 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRC_REG = 0x00;
    1834:	e4 e3       	ldi	r30, 0x34	; 52
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	10 82       	st	Z, r1
    183a:	1c c0       	rjmp	.+56     	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRC_REG = 0xFF;
    183c:	e4 e3       	ldi	r30, 0x34	; 52
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	80 83       	st	Z, r24
    1844:	17 c0       	rjmp	.+46     	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PortDirection) {
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3c 83       	std	Y+4, r19	; 0x04
    184e:	2b 83       	std	Y+3, r18	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	31 f0       	breq	.+12     	; 0x1864 <DIO_voidSetPortDirection+0x116>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	21 30       	cpi	r18, 0x01	; 1
    185e:	31 05       	cpc	r19, r1
    1860:	29 f0       	breq	.+10     	; 0x186c <DIO_voidSetPortDirection+0x11e>
    1862:	08 c0       	rjmp	.+16     	; 0x1874 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRD_REG = 0x00;
    1864:	e1 e3       	ldi	r30, 0x31	; 49
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	10 82       	st	Z, r1
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRD_REG = 0xFF;
    186c:	e1 e3       	ldi	r30, 0x31	; 49
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1874:	2c 96       	adiw	r28, 0x0c	; 12
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <DIO_voidSetPortValue+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <DIO_voidSetPortValue+0x8>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortValue <= 255))
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	90 f5       	brcc	.+100    	; 0x1900 <DIO_voidSetPortValue+0x7a>
	{
		switch (copy_u8PortId)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3c 83       	std	Y+4, r19	; 0x04
    18a4:	2b 83       	std	Y+3, r18	; 0x03
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	d1 f0       	breq	.+52     	; 0x18e4 <DIO_voidSetPortValue+0x5e>
    18b0:	2b 81       	ldd	r18, Y+3	; 0x03
    18b2:	3c 81       	ldd	r19, Y+4	; 0x04
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <DIO_voidSetPortValue+0x3e>
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	61 f0       	breq	.+24     	; 0x18da <DIO_voidSetPortValue+0x54>
    18c2:	1e c0       	rjmp	.+60     	; 0x1900 <DIO_voidSetPortValue+0x7a>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	81 f0       	breq	.+32     	; 0x18ee <DIO_voidSetPortValue+0x68>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	91 05       	cpc	r25, r1
    18d6:	81 f0       	breq	.+32     	; 0x18f8 <DIO_voidSetPortValue+0x72>
    18d8:	13 c0       	rjmp	.+38     	; 0x1900 <DIO_voidSetPortValue+0x7a>
		{
			case DIO_PORTA:
				PORTA_REG = copy_u8PortValue;
    18da:	eb e3       	ldi	r30, 0x3B	; 59
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				PORTB_REG = copy_u8PortValue;
    18e4:	e8 e3       	ldi	r30, 0x38	; 56
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 83       	st	Z, r24
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				PORTC_REG = copy_u8PortValue;
    18ee:	e5 e3       	ldi	r30, 0x35	; 53
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				PORTD_REG = copy_u8PortValue;
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <DIO_voidGetPortValue>:

void DIO_voidGetPortValue (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <DIO_voidGetPortValue+0x6>
    1914:	00 d0       	rcall	.+0      	; 0x1916 <DIO_voidGetPortValue+0x8>
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	7b 83       	std	Y+3, r23	; 0x03
    1920:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_pu8PortValue != NULL))
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	08 f0       	brcs	.+2      	; 0x192a <DIO_voidGetPortValue+0x1c>
    1928:	3e c0       	rjmp	.+124    	; 0x19a6 <DIO_voidGetPortValue+0x98>
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	d1 f1       	breq	.+116    	; 0x19a6 <DIO_voidGetPortValue+0x98>
	{
		switch (copy_u8PortId)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3d 83       	std	Y+5, r19	; 0x05
    193a:	2c 83       	std	Y+4, r18	; 0x04
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	e1 f0       	breq	.+56     	; 0x197e <DIO_voidGetPortValue+0x70>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <DIO_voidGetPortValue+0x4c>
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <DIO_voidGetPortValue+0x62>
    1958:	26 c0       	rjmp	.+76     	; 0x19a6 <DIO_voidGetPortValue+0x98>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	a1 f0       	breq	.+40     	; 0x198c <DIO_voidGetPortValue+0x7e>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	b1 f0       	breq	.+44     	; 0x199a <DIO_voidGetPortValue+0x8c>
    196e:	1b c0       	rjmp	.+54     	; 0x19a6 <DIO_voidGetPortValue+0x98>
		{
			case DIO_PORTA:
				*copy_pu8PortValue = PINA_REG;
    1970:	e9 e3       	ldi	r30, 0x39	; 57
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	ea 81       	ldd	r30, Y+2	; 0x02
    1978:	fb 81       	ldd	r31, Y+3	; 0x03
    197a:	80 83       	st	Z, r24
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTB:
				*copy_pu8PortValue = PINB_REG;
    197e:	e6 e3       	ldi	r30, 0x36	; 54
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	ea 81       	ldd	r30, Y+2	; 0x02
    1986:	fb 81       	ldd	r31, Y+3	; 0x03
    1988:	80 83       	st	Z, r24
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTC:
				*copy_pu8PortValue = PINC_REG;
    198c:	e3 e3       	ldi	r30, 0x33	; 51
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	ea 81       	ldd	r30, Y+2	; 0x02
    1994:	fb 81       	ldd	r31, Y+3	; 0x03
    1996:	80 83       	st	Z, r24
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTD:
				*copy_pu8PortValue = PIND_REG;
    199a:	e0 e3       	ldi	r30, 0x30	; 48
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue (u8 copy_u8PortId)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <DIO_voidTogglePortValue+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	08 f0       	brcs	.+2      	; 0x19cc <DIO_voidTogglePortValue+0x16>
    19ca:	3e c0       	rjmp	.+124    	; 0x1a48 <DIO_voidTogglePortValue+0x92>
	{
		switch (copy_u8PortId)
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	3b 83       	std	Y+3, r19	; 0x03
    19d4:	2a 83       	std	Y+2, r18	; 0x02
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	91 05       	cpc	r25, r1
    19de:	e9 f0       	breq	.+58     	; 0x1a1a <DIO_voidTogglePortValue+0x64>
    19e0:	2a 81       	ldd	r18, Y+2	; 0x02
    19e2:	3b 81       	ldd	r19, Y+3	; 0x03
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	31 05       	cpc	r19, r1
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <DIO_voidTogglePortValue+0x3e>
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	61 f0       	breq	.+24     	; 0x1a0a <DIO_voidTogglePortValue+0x54>
    19f2:	2a c0       	rjmp	.+84     	; 0x1a48 <DIO_voidTogglePortValue+0x92>
    19f4:	2a 81       	ldd	r18, Y+2	; 0x02
    19f6:	3b 81       	ldd	r19, Y+3	; 0x03
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	b1 f0       	breq	.+44     	; 0x1a2a <DIO_voidTogglePortValue+0x74>
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	c9 f0       	breq	.+50     	; 0x1a3a <DIO_voidTogglePortValue+0x84>
    1a08:	1f c0       	rjmp	.+62     	; 0x1a48 <DIO_voidTogglePortValue+0x92>
		{
			case DIO_PORTA:
				PORTA_REG ^= 0xFF;
    1a0a:	ab e3       	ldi	r26, 0x3B	; 59
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	eb e3       	ldi	r30, 0x3B	; 59
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 95       	com	r24
    1a16:	8c 93       	st	X, r24
    1a18:	17 c0       	rjmp	.+46     	; 0x1a48 <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTB:
				PORTB_REG ^= 0xFF;
    1a1a:	a8 e3       	ldi	r26, 0x38	; 56
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e8 e3       	ldi	r30, 0x38	; 56
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 95       	com	r24
    1a26:	8c 93       	st	X, r24
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTC:
				PORTC_REG ^= 0xFF;
    1a2a:	a5 e3       	ldi	r26, 0x35	; 53
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e5 e3       	ldi	r30, 0x35	; 53
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 95       	com	r24
    1a36:	8c 93       	st	X, r24
    1a38:	07 c0       	rjmp	.+14     	; 0x1a48 <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTD:
				PORTD_REG ^= 0xFF;
    1a3a:	a2 e3       	ldi	r26, 0x32	; 50
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	80 95       	com	r24
    1a46:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <DIO_voidActivatePortInPullUpResistance>:

void DIO_voidActivatePortInPullUpResistance (u8 copy_u8PortId)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <DIO_voidActivatePortInPullUpResistance+0x6>
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	90 f5       	brcc	.+100    	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
	{
		switch (copy_u8PortId)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3b 83       	std	Y+3, r19	; 0x03
    1a70:	2a 83       	std	Y+2, r18	; 0x02
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 05       	cpc	r25, r1
    1a7a:	d1 f0       	breq	.+52     	; 0x1ab0 <DIO_voidActivatePortInPullUpResistance+0x5c>
    1a7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a80:	22 30       	cpi	r18, 0x02	; 2
    1a82:	31 05       	cpc	r19, r1
    1a84:	2c f4       	brge	.+10     	; 0x1a90 <DIO_voidActivatePortInPullUpResistance+0x3c>
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <DIO_voidActivatePortInPullUpResistance+0x52>
    1a8e:	1e c0       	rjmp	.+60     	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
    1a90:	2a 81       	ldd	r18, Y+2	; 0x02
    1a92:	3b 81       	ldd	r19, Y+3	; 0x03
    1a94:	22 30       	cpi	r18, 0x02	; 2
    1a96:	31 05       	cpc	r19, r1
    1a98:	81 f0       	breq	.+32     	; 0x1aba <DIO_voidActivatePortInPullUpResistance+0x66>
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	81 f0       	breq	.+32     	; 0x1ac4 <DIO_voidActivatePortInPullUpResistance+0x70>
    1aa4:	13 c0       	rjmp	.+38     	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
		{
			case DIO_PORTA:
				PORTA_REG = 0xFF;
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	80 83       	st	Z, r24
    1aae:	0e c0       	rjmp	.+28     	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTB:
				PORTB_REG = 0xFF;
    1ab0:	e8 e3       	ldi	r30, 0x38	; 56
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	80 83       	st	Z, r24
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTC:
				PORTC_REG = 0xFF;
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	80 83       	st	Z, r24
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTD:
				PORTD_REG = 0xFF;
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8f ef       	ldi	r24, 0xFF	; 255
    1aca:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit (void)
{
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	cc 54       	subi	r28, 0x4C	; 76
    1ae6:	d0 40       	sbci	r29, 0x00	; 0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
	/* Initialized LCD pins as Output Pins */
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	65 e0       	ldi	r22, 0x05	; 5
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	66 e0       	ldi	r22, 0x06	; 6
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	67 e0       	ldi	r22, 0x07	; 7
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	63 e0       	ldi	r22, 0x03	; 3
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5b       	subi	r30, 0xB7	; 183
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	ac e0       	ldi	r26, 0x0C	; 12
    1b44:	b2 e4       	ldi	r27, 0x42	; 66
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	8e 01       	movw	r16, r28
    1b50:	0b 5b       	subi	r16, 0xBB	; 187
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 5b       	subi	r30, 0xB7	; 183
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	55 e4       	ldi	r21, 0x45	; 69
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	a2 83       	std	Z+2, r26	; 0x02
    1b7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	eb 5b       	subi	r30, 0xBB	; 187
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	44 f4       	brge	.+16     	; 0x1baa <LCD_voidInit+0xd2>
		__ticks = 1;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ed 5b       	subi	r30, 0xBD	; 189
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	64 c0       	rjmp	.+200    	; 0x1c72 <LCD_voidInit+0x19a>
	else if (__tmp > 65535)
    1baa:	fe 01       	movw	r30, r28
    1bac:	eb 5b       	subi	r30, 0xBB	; 187
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <LCD_voidInit+0xf2>
    1bc8:	43 c0       	rjmp	.+134    	; 0x1c50 <LCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e7 5b       	subi	r30, 0xB7	; 183
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8e 01       	movw	r16, r28
    1bea:	0d 5b       	subi	r16, 0xBD	; 189
    1bec:	1f 4f       	sbci	r17, 0xFF	; 255
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <LCD_voidInit+0x168>
    1c02:	fe 01       	movw	r30, r28
    1c04:	ef 5b       	subi	r30, 0xBF	; 191
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 e9       	ldi	r24, 0x90	; 144
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c10:	fe 01       	movw	r30, r28
    1c12:	ef 5b       	subi	r30, 0xBF	; 191
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_voidInit+0x142>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ef 5b       	subi	r30, 0xBF	; 191
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	de 01       	movw	r26, r28
    1c2a:	ad 5b       	subi	r26, 0xBD	; 189
    1c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ed 5b       	subi	r30, 0xBD	; 189
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	9c 93       	st	X, r25
    1c3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	fe 01       	movw	r30, r28
    1c42:	ed 5b       	subi	r30, 0xBD	; 189
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	d1 f6       	brne	.-76     	; 0x1c02 <LCD_voidInit+0x12a>
    1c4e:	24 c0       	rjmp	.+72     	; 0x1c98 <LCD_voidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	8e 01       	movw	r16, r28
    1c52:	0d 5b       	subi	r16, 0xBD	; 189
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	eb 5b       	subi	r30, 0xBB	; 187
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 5b       	subi	r30, 0xBD	; 189
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ff 96       	adiw	r30, 0x3f	; 63
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	fe 01       	movw	r30, r28
    1c86:	ff 96       	adiw	r30, 0x3f	; 63
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_voidInit+0x1b4>
    1c90:	fe 01       	movw	r30, r28
    1c92:	ff 96       	adiw	r30, 0x3f	; 63
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
	_delay_ms(35);

	/* N (# of lines) - F (font) */
	/* Function Set (2 Lines, 5*7 font) */
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

	#if LCD_MODE == _4_BIT_MODE

	PRV_voidWriteHalfPort(0b0010);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	0e 94 87 12 	call	0x250e	; 0x250e <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    1cb2:	0e 94 b7 12 	call	0x256e	; 0x256e <PRV_voidEnableTriggerWrite>
	LCD_voidSendCommand(0b00101000); //0b0010NFXX
    1cb6:	88 e2       	ldi	r24, 0x28	; 40
    1cb8:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a4 e3       	ldi	r26, 0x34	; 52
    1cc2:	b2 e4       	ldi	r27, 0x42	; 66
    1cc4:	8b af       	std	Y+59, r24	; 0x3b
    1cc6:	9c af       	std	Y+60, r25	; 0x3c
    1cc8:	ad af       	std	Y+61, r26	; 0x3d
    1cca:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ccc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cce:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd4:	2b ea       	ldi	r18, 0xAB	; 171
    1cd6:	3a ea       	ldi	r19, 0xAA	; 170
    1cd8:	4a ea       	ldi	r20, 0xAA	; 170
    1cda:	50 e4       	ldi	r21, 0x40	; 64
    1cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	8f ab       	std	Y+55, r24	; 0x37
    1ce6:	98 af       	std	Y+56, r25	; 0x38
    1ce8:	a9 af       	std	Y+57, r26	; 0x39
    1cea:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1cec:	6f a9       	ldd	r22, Y+55	; 0x37
    1cee:	78 ad       	ldd	r23, Y+56	; 0x38
    1cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	1c f4       	brge	.+6      	; 0x1d0a <LCD_voidInit+0x232>
		__ticks = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	8e ab       	std	Y+54, r24	; 0x36
    1d08:	91 c0       	rjmp	.+290    	; 0x1e2c <LCD_voidInit+0x354>
	else if (__tmp > 255)
    1d0a:	6f a9       	ldd	r22, Y+55	; 0x37
    1d0c:	78 ad       	ldd	r23, Y+56	; 0x38
    1d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d10:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4f e7       	ldi	r20, 0x7F	; 127
    1d18:	53 e4       	ldi	r21, 0x43	; 67
    1d1a:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1d1e:	18 16       	cp	r1, r24
    1d20:	0c f0       	brlt	.+2      	; 0x1d24 <LCD_voidInit+0x24c>
    1d22:	7b c0       	rjmp	.+246    	; 0x1e1a <LCD_voidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    1d24:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d26:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a e7       	ldi	r20, 0x7A	; 122
    1d32:	54 e4       	ldi	r21, 0x44	; 68
    1d34:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8a ab       	std	Y+50, r24	; 0x32
    1d3e:	9b ab       	std	Y+51, r25	; 0x33
    1d40:	ac ab       	std	Y+52, r26	; 0x34
    1d42:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	6a a9       	ldd	r22, Y+50	; 0x32
    1d46:	7b a9       	ldd	r23, Y+51	; 0x33
    1d48:	8c a9       	ldd	r24, Y+52	; 0x34
    1d4a:	9d a9       	ldd	r25, Y+53	; 0x35
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a e7       	ldi	r20, 0x7A	; 122
    1d52:	55 e4       	ldi	r21, 0x45	; 69
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8e a7       	std	Y+46, r24	; 0x2e
    1d5e:	9f a7       	std	Y+47, r25	; 0x2f
    1d60:	a8 ab       	std	Y+48, r26	; 0x30
    1d62:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d64:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d66:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d68:	88 a9       	ldd	r24, Y+48	; 0x30
    1d6a:	99 a9       	ldd	r25, Y+49	; 0x31
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e8       	ldi	r20, 0x80	; 128
    1d72:	5f e3       	ldi	r21, 0x3F	; 63
    1d74:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <LCD_voidInit+0x2ae>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9d a7       	std	Y+45, r25	; 0x2d
    1d82:	8c a7       	std	Y+44, r24	; 0x2c
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    1d86:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d88:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d8a:	88 a9       	ldd	r24, Y+48	; 0x30
    1d8c:	99 a9       	ldd	r25, Y+49	; 0x31
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	6a a9       	ldd	r22, Y+50	; 0x32
    1da0:	7b a9       	ldd	r23, Y+51	; 0x33
    1da2:	8c a9       	ldd	r24, Y+52	; 0x34
    1da4:	9d a9       	ldd	r25, Y+53	; 0x35
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e2       	ldi	r20, 0x20	; 32
    1dac:	51 e4       	ldi	r21, 0x41	; 65
    1dae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9d a7       	std	Y+45, r25	; 0x2d
    1dc4:	8c a7       	std	Y+44, r24	; 0x2c
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <LCD_voidInit+0x30e>
    1dc8:	80 e9       	ldi	r24, 0x90	; 144
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	9b a7       	std	Y+43, r25	; 0x2b
    1dce:	8a a7       	std	Y+42, r24	; 0x2a
    1dd0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1dd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_voidInit+0x2fc>
    1dd8:	9b a7       	std	Y+43, r25	; 0x2b
    1dda:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dde:	9d a5       	ldd	r25, Y+45	; 0x2d
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9d a7       	std	Y+45, r25	; 0x2d
    1de4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1de8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <LCD_voidInit+0x2f0>
    1dee:	24 c0       	rjmp	.+72     	; 0x1e38 <LCD_voidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1df2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1df4:	88 a9       	ldd	r24, Y+48	; 0x30
    1df6:	99 a9       	ldd	r25, Y+49	; 0x31
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9d a7       	std	Y+45, r25	; 0x2d
    1e02:	8c a7       	std	Y+44, r24	; 0x2c
    1e04:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e06:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e08:	99 a7       	std	Y+41, r25	; 0x29
    1e0a:	88 a7       	std	Y+40, r24	; 0x28
    1e0c:	88 a5       	ldd	r24, Y+40	; 0x28
    1e0e:	99 a5       	ldd	r25, Y+41	; 0x29
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_voidInit+0x338>
    1e14:	99 a7       	std	Y+41, r25	; 0x29
    1e16:	88 a7       	std	Y+40, r24	; 0x28
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_voidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e1a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e1c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e20:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8e ab       	std	Y+54, r24	; 0x36
    1e2c:	8e a9       	ldd	r24, Y+54	; 0x36
    1e2e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e30:	8f a1       	ldd	r24, Y+39	; 0x27
    1e32:	8a 95       	dec	r24
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_voidInit+0x35a>
    1e36:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(45);

	/* D (display ON/OFF) - C (cursor ON/OFF) - B (blink cursor ON/OFF) */
	/* Display On/Off Control (Display on, Cursor on, Blink on) */
	LCD_voidSendCommand(0b00001100); //ob00001DCB
    1e38:	8c e0       	ldi	r24, 0x0C	; 12
    1e3a:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a4 e3       	ldi	r26, 0x34	; 52
    1e44:	b2 e4       	ldi	r27, 0x42	; 66
    1e46:	8b a3       	std	Y+35, r24	; 0x23
    1e48:	9c a3       	std	Y+36, r25	; 0x24
    1e4a:	ad a3       	std	Y+37, r26	; 0x25
    1e4c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e50:	7c a1       	ldd	r23, Y+36	; 0x24
    1e52:	8d a1       	ldd	r24, Y+37	; 0x25
    1e54:	9e a1       	ldd	r25, Y+38	; 0x26
    1e56:	2b ea       	ldi	r18, 0xAB	; 171
    1e58:	3a ea       	ldi	r19, 0xAA	; 170
    1e5a:	4a ea       	ldi	r20, 0xAA	; 170
    1e5c:	50 e4       	ldi	r21, 0x40	; 64
    1e5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	8f 8f       	std	Y+31, r24	; 0x1f
    1e68:	98 a3       	std	Y+32, r25	; 0x20
    1e6a:	a9 a3       	std	Y+33, r26	; 0x21
    1e6c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e6e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e70:	78 a1       	ldd	r23, Y+32	; 0x20
    1e72:	89 a1       	ldd	r24, Y+33	; 0x21
    1e74:	9a a1       	ldd	r25, Y+34	; 0x22
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	1c f4       	brge	.+6      	; 0x1e8c <LCD_voidInit+0x3b4>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	8e 8f       	std	Y+30, r24	; 0x1e
    1e8a:	91 c0       	rjmp	.+290    	; 0x1fae <LCD_voidInit+0x4d6>
	else if (__tmp > 255)
    1e8c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e8e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e90:	89 a1       	ldd	r24, Y+33	; 0x21
    1e92:	9a a1       	ldd	r25, Y+34	; 0x22
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	53 e4       	ldi	r21, 0x43	; 67
    1e9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	0c f0       	brlt	.+2      	; 0x1ea6 <LCD_voidInit+0x3ce>
    1ea4:	7b c0       	rjmp	.+246    	; 0x1f9c <LCD_voidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    1ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1eac:	9e a1       	ldd	r25, Y+38	; 0x26
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a e7       	ldi	r20, 0x7A	; 122
    1eb4:	54 e4       	ldi	r21, 0x44	; 68
    1eb6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8a 8f       	std	Y+26, r24	; 0x1a
    1ec0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ec2:	ac 8f       	std	Y+28, r26	; 0x1c
    1ec4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ec8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1eca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ecc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4a e7       	ldi	r20, 0x7A	; 122
    1ed4:	55 e4       	ldi	r21, 0x45	; 69
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	8e 8b       	std	Y+22, r24	; 0x16
    1ee0:	9f 8b       	std	Y+23, r25	; 0x17
    1ee2:	a8 8f       	std	Y+24, r26	; 0x18
    1ee4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ee6:	6e 89       	ldd	r22, Y+22	; 0x16
    1ee8:	7f 89       	ldd	r23, Y+23	; 0x17
    1eea:	88 8d       	ldd	r24, Y+24	; 0x18
    1eec:	99 8d       	ldd	r25, Y+25	; 0x19
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e8       	ldi	r20, 0x80	; 128
    1ef4:	5f e3       	ldi	r21, 0x3F	; 63
    1ef6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    1efa:	88 23       	and	r24, r24
    1efc:	2c f4       	brge	.+10     	; 0x1f08 <LCD_voidInit+0x430>
		__ticks = 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9d 8b       	std	Y+21, r25	; 0x15
    1f04:	8c 8b       	std	Y+20, r24	; 0x14
    1f06:	3f c0       	rjmp	.+126    	; 0x1f86 <LCD_voidInit+0x4ae>
	else if (__tmp > 65535)
    1f08:	6e 89       	ldd	r22, Y+22	; 0x16
    1f0a:	7f 89       	ldd	r23, Y+23	; 0x17
    1f0c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f0e:	99 8d       	ldd	r25, Y+25	; 0x19
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	3f ef       	ldi	r19, 0xFF	; 255
    1f14:	4f e7       	ldi	r20, 0x7F	; 127
    1f16:	57 e4       	ldi	r21, 0x47	; 71
    1f18:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	4c f5       	brge	.+82     	; 0x1f72 <LCD_voidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f20:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f22:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	51 e4       	ldi	r21, 0x41	; 65
    1f30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9d 8b       	std	Y+21, r25	; 0x15
    1f46:	8c 8b       	std	Y+20, r24	; 0x14
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <LCD_voidInit+0x490>
    1f4a:	80 e9       	ldi	r24, 0x90	; 144
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	9b 8b       	std	Y+19, r25	; 0x13
    1f50:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f52:	8a 89       	ldd	r24, Y+18	; 0x12
    1f54:	9b 89       	ldd	r25, Y+19	; 0x13
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_voidInit+0x47e>
    1f5a:	9b 8b       	std	Y+19, r25	; 0x13
    1f5c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f60:	9d 89       	ldd	r25, Y+21	; 0x15
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	9d 8b       	std	Y+21, r25	; 0x15
    1f66:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	8c 89       	ldd	r24, Y+20	; 0x14
    1f6a:	9d 89       	ldd	r25, Y+21	; 0x15
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	69 f7       	brne	.-38     	; 0x1f4a <LCD_voidInit+0x472>
    1f70:	24 c0       	rjmp	.+72     	; 0x1fba <LCD_voidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	6e 89       	ldd	r22, Y+22	; 0x16
    1f74:	7f 89       	ldd	r23, Y+23	; 0x17
    1f76:	88 8d       	ldd	r24, Y+24	; 0x18
    1f78:	99 8d       	ldd	r25, Y+25	; 0x19
    1f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9d 8b       	std	Y+21, r25	; 0x15
    1f84:	8c 8b       	std	Y+20, r24	; 0x14
    1f86:	8c 89       	ldd	r24, Y+20	; 0x14
    1f88:	9d 89       	ldd	r25, Y+21	; 0x15
    1f8a:	99 8b       	std	Y+17, r25	; 0x11
    1f8c:	88 8b       	std	Y+16, r24	; 0x10
    1f8e:	88 89       	ldd	r24, Y+16	; 0x10
    1f90:	99 89       	ldd	r25, Y+17	; 0x11
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_voidInit+0x4ba>
    1f96:	99 8b       	std	Y+17, r25	; 0x11
    1f98:	88 8b       	std	Y+16, r24	; 0x10
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_voidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f9c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f9e:	78 a1       	ldd	r23, Y+32	; 0x20
    1fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8e 8f       	std	Y+30, r24	; 0x1e
    1fae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb4:	8a 95       	dec	r24
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_voidInit+0x4dc>
    1fb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	/* Display Clear */
	LCD_voidSendCommand(0b00000001);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e4       	ldi	r27, 0x40	; 64
    1fc8:	8b 87       	std	Y+11, r24	; 0x0b
    1fca:	9c 87       	std	Y+12, r25	; 0x0c
    1fcc:	ad 87       	std	Y+13, r26	; 0x0d
    1fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	55 e4       	ldi	r21, 0x45	; 69
    1fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8f 83       	std	Y+7, r24	; 0x07
    1fea:	98 87       	std	Y+8, r25	; 0x08
    1fec:	a9 87       	std	Y+9, r26	; 0x09
    1fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff2:	78 85       	ldd	r23, Y+8	; 0x08
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_voidInit+0x53a>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_voidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6b 85       	ldd	r22, Y+11	; 0x0b
    202c:	7c 85       	ldd	r23, Y+12	; 0x0c
    202e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2030:	9e 85       	ldd	r25, Y+14	; 0x0e
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_voidInit+0x59a>
    2054:	80 e9       	ldi	r24, 0x90	; 144
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_voidInit+0x588>
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_voidInit+0x57c>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_voidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_voidInit+0x5c4>
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* I (increment mode (inc = 1 / dec = 0)) - S (shift) */
	/* Entry Mode Set (Increment on, Shift off) */
	LCD_voidSendCommand(0b00000110); //0b000001IS
    20a4:	86 e0       	ldi	r24, 0x06	; 6
    20a6:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>

}
    20aa:	c4 5b       	subi	r28, 0xB4	; 180
    20ac:	df 4f       	sbci	r29, 0xFF	; 255
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar (u8 copy_u8Data)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	0f 92       	push	r0
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 1 (data) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data>>4);
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	82 95       	swap	r24
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	0e 94 87 12 	call	0x250e	; 0x250e <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    20ec:	0e 94 b7 12 	call	0x256e	; 0x256e <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	0e 94 87 12 	call	0x250e	; 0x250e <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    20f6:	0e 94 b7 12 	call	0x256e	; 0x256e <PRV_voidEnableTriggerWrite>
}
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 copy_u8cmnd)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	0f 92       	push	r0
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd>>4);
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	82 95       	swap	r24
    2126:	8f 70       	andi	r24, 0x0F	; 15
    2128:	0e 94 87 12 	call	0x250e	; 0x250e <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    212c:	0e 94 b7 12 	call	0x256e	; 0x256e <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd);
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	0e 94 87 12 	call	0x250e	; 0x250e <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    2136:	0e 94 b7 12 	call	0x256e	; 0x256e <PRV_voidEnableTriggerWrite>
}
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <LCD_voidDisplayString>:

void LCD_voidDisplayString (u8* copy_pu8String)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <LCD_voidDisplayString+0x6>
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9b 83       	std	Y+3, r25	; 0x03
    2150:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_pu8String != NULL) {
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	d9 f0       	breq	.+54     	; 0x2190 <LCD_voidDisplayString+0x4e>
		u8 local_u8i = 0;
    215a:	19 82       	std	Y+1, r1	; 0x01
    215c:	0e c0       	rjmp	.+28     	; 0x217a <LCD_voidDisplayString+0x38>
		while(copy_pu8String[local_u8i]!='\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8i]);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	fc 01       	movw	r30, r24
    216a:	e2 0f       	add	r30, r18
    216c:	f3 1f       	adc	r31, r19
    216e:	80 81       	ld	r24, Z
    2170:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
			local_u8i++;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidDisplayString (u8* copy_pu8String)
{
	if (copy_pu8String != NULL) {
		u8 local_u8i = 0;
		while(copy_pu8String[local_u8i]!='\0')
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	fc 01       	movw	r30, r24
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	80 81       	ld	r24, Z
    218c:	88 23       	and	r24, r24
    218e:	39 f7       	brne	.-50     	; 0x215e <LCD_voidDisplayString+0x1c>
			local_u8i++;
		}
	} else {
		//return Error State
	}
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber (u32 copy_u32Number)
{
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	65 97       	sbiw	r28, 0x15	; 21
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	6a 8b       	std	Y+18, r22	; 0x12
    21b6:	7b 8b       	std	Y+19, r23	; 0x13
    21b8:	8c 8b       	std	Y+20, r24	; 0x14
    21ba:	9d 8b       	std	Y+21, r25	; 0x15
	if (copy_u32Number == 0) {
    21bc:	8a 89       	ldd	r24, Y+18	; 0x12
    21be:	9b 89       	ldd	r25, Y+19	; 0x13
    21c0:	ac 89       	ldd	r26, Y+20	; 0x14
    21c2:	bd 89       	ldd	r27, Y+21	; 0x15
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	a1 05       	cpc	r26, r1
    21c8:	b1 05       	cpc	r27, r1
    21ca:	21 f4       	brne	.+8      	; 0x21d4 <LCD_voidDisplayNumber+0x38>
		LCD_voidDisplayChar(48);
    21cc:	80 e3       	ldi	r24, 0x30	; 48
    21ce:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    21d2:	51 c0       	rjmp	.+162    	; 0x2276 <LCD_voidDisplayNumber+0xda>
	} else {
		s8 local_u8i = 0;
    21d4:	19 82       	std	Y+1, r1	; 0x01
    21d6:	30 c0       	rjmp	.+96     	; 0x2238 <LCD_voidDisplayNumber+0x9c>
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	08 2f       	mov	r16, r24
    21dc:	11 27       	eor	r17, r17
    21de:	07 fd       	sbrc	r16, 7
    21e0:	10 95       	com	r17
    21e2:	8a 89       	ldd	r24, Y+18	; 0x12
    21e4:	9b 89       	ldd	r25, Y+19	; 0x13
    21e6:	ac 89       	ldd	r26, Y+20	; 0x14
    21e8:	bd 89       	ldd	r27, Y+21	; 0x15
    21ea:	2a e0       	ldi	r18, 0x0A	; 10
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	28 2f       	mov	r18, r24
    2200:	20 5d       	subi	r18, 0xD0	; 208
    2202:	ce 01       	movw	r24, r28
    2204:	02 96       	adiw	r24, 0x02	; 2
    2206:	fc 01       	movw	r30, r24
    2208:	e0 0f       	add	r30, r16
    220a:	f1 1f       	adc	r31, r17
    220c:	20 83       	st	Z, r18
			local_u8i++;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
			copy_u32Number /= 10;
    2214:	8a 89       	ldd	r24, Y+18	; 0x12
    2216:	9b 89       	ldd	r25, Y+19	; 0x13
    2218:	ac 89       	ldd	r26, Y+20	; 0x14
    221a:	bd 89       	ldd	r27, Y+21	; 0x15
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    222c:	da 01       	movw	r26, r20
    222e:	c9 01       	movw	r24, r18
    2230:	8a 8b       	std	Y+18, r24	; 0x12
    2232:	9b 8b       	std	Y+19, r25	; 0x13
    2234:	ac 8b       	std	Y+20, r26	; 0x14
    2236:	bd 8b       	std	Y+21, r27	; 0x15
	if (copy_u32Number == 0) {
		LCD_voidDisplayChar(48);
	} else {
		s8 local_u8i = 0;
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
    2238:	8a 89       	ldd	r24, Y+18	; 0x12
    223a:	9b 89       	ldd	r25, Y+19	; 0x13
    223c:	ac 89       	ldd	r26, Y+20	; 0x14
    223e:	bd 89       	ldd	r27, Y+21	; 0x15
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	a1 05       	cpc	r26, r1
    2244:	b1 05       	cpc	r27, r1
    2246:	41 f6       	brne	.-112    	; 0x21d8 <LCD_voidDisplayNumber+0x3c>
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	81 50       	subi	r24, 0x01	; 1
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	10 c0       	rjmp	.+32     	; 0x2270 <LCD_voidDisplayNumber+0xd4>
		while(local_u8i >= 0)
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	28 2f       	mov	r18, r24
    2254:	33 27       	eor	r19, r19
    2256:	27 fd       	sbrc	r18, 7
    2258:	30 95       	com	r19
    225a:	ce 01       	movw	r24, r28
    225c:	02 96       	adiw	r24, 0x02	; 2
    225e:	fc 01       	movw	r30, r24
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	80 81       	ld	r24, Z
    2266:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
			local_u8i--;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	81 50       	subi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
		while(local_u8i >= 0)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 23       	and	r24, r24
    2274:	6c f7       	brge	.-38     	; 0x2250 <LCD_voidDisplayNumber+0xb4>
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
			local_u8i--;
		}
	}
}
    2276:	65 96       	adiw	r28, 0x15	; 21
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	08 95       	ret

0000228c <LCD_voidDisplaySignedNumber>:

void LCD_voidDisplaySignedNumber(s32 copy_s32Number) {
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	00 d0       	rcall	.+0      	; 0x2292 <LCD_voidDisplaySignedNumber+0x6>
    2292:	00 d0       	rcall	.+0      	; 0x2294 <LCD_voidDisplaySignedNumber+0x8>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	69 83       	std	Y+1, r22	; 0x01
    229a:	7a 83       	std	Y+2, r23	; 0x02
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	9c 83       	std	Y+4, r25	; 0x04
    if (copy_s32Number < 0) {
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	ab 81       	ldd	r26, Y+3	; 0x03
    22a6:	bc 81       	ldd	r27, Y+4	; 0x04
    22a8:	bb 23       	and	r27, r27
    22aa:	94 f4       	brge	.+36     	; 0x22d0 <LCD_voidDisplaySignedNumber+0x44>
        LCD_voidDisplayChar('-');
    22ac:	8d e2       	ldi	r24, 0x2D	; 45
    22ae:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
        copy_s32Number = -copy_s32Number;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	ab 81       	ldd	r26, Y+3	; 0x03
    22b8:	bc 81       	ldd	r27, Y+4	; 0x04
    22ba:	b0 95       	com	r27
    22bc:	a0 95       	com	r26
    22be:	90 95       	com	r25
    22c0:	81 95       	neg	r24
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	af 4f       	sbci	r26, 0xFF	; 255
    22c6:	bf 4f       	sbci	r27, 0xFF	; 255
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	ab 83       	std	Y+3, r26	; 0x03
    22ce:	bc 83       	std	Y+4, r27	; 0x04
    }
    LCD_voidDisplayNumber((u32)copy_s32Number);
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	ab 81       	ldd	r26, Y+3	; 0x03
    22d6:	bc 81       	ldd	r27, Y+4	; 0x04
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
}
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <LCD_voidDisplayFloat>:

void LCD_voidDisplayFloat(f32 copy_f32Number) {
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	2c 97       	sbiw	r28, 0x0c	; 12
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	69 87       	std	Y+9, r22	; 0x09
    2304:	7a 87       	std	Y+10, r23	; 0x0a
    2306:	8b 87       	std	Y+11, r24	; 0x0b
    2308:	9c 87       	std	Y+12, r25	; 0x0c
	if (copy_f32Number < 0) {
    230a:	69 85       	ldd	r22, Y+9	; 0x09
    230c:	7a 85       	ldd	r23, Y+10	; 0x0a
    230e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2310:	9c 85       	ldd	r25, Y+12	; 0x0c
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    231e:	88 23       	and	r24, r24
    2320:	64 f4       	brge	.+24     	; 0x233a <LCD_voidDisplayFloat+0x4c>
		LCD_voidDisplayChar('-');
    2322:	8d e2       	ldi	r24, 0x2D	; 45
    2324:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
		copy_f32Number = -copy_f32Number;
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	ab 85       	ldd	r26, Y+11	; 0x0b
    232e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2330:	b0 58       	subi	r27, 0x80	; 128
    2332:	89 87       	std	Y+9, r24	; 0x09
    2334:	9a 87       	std	Y+10, r25	; 0x0a
    2336:	ab 87       	std	Y+11, r26	; 0x0b
    2338:	bc 87       	std	Y+12, r27	; 0x0c
	}
    u32 local_u32IntegerPart = (u32)copy_f32Number;
    233a:	69 85       	ldd	r22, Y+9	; 0x09
    233c:	7a 85       	ldd	r23, Y+10	; 0x0a
    233e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2340:	9c 85       	ldd	r25, Y+12	; 0x0c
    2342:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	af 83       	std	Y+7, r26	; 0x07
    2350:	b8 87       	std	Y+8, r27	; 0x08
    LCD_voidDisplayNumber(local_u32IntegerPart);
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	af 81       	ldd	r26, Y+7	; 0x07
    2358:	b8 85       	ldd	r27, Y+8	; 0x08
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>

    LCD_voidDisplayChar('.');
    2362:	8e e2       	ldi	r24, 0x2E	; 46
    2364:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>

    f32 local_f32FractionalPart = copy_f32Number - local_u32IntegerPart;
    2368:	6d 81       	ldd	r22, Y+5	; 0x05
    236a:	7e 81       	ldd	r23, Y+6	; 0x06
    236c:	8f 81       	ldd	r24, Y+7	; 0x07
    236e:	98 85       	ldd	r25, Y+8	; 0x08
    2370:	0e 94 5f 05 	call	0xabe	; 0xabe <__floatunsisf>
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	69 85       	ldd	r22, Y+9	; 0x09
    237a:	7a 85       	ldd	r23, Y+10	; 0x0a
    237c:	8b 85       	ldd	r24, Y+11	; 0x0b
    237e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2380:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	ab 83       	std	Y+3, r26	; 0x03
    238e:	bc 83       	std	Y+4, r27	; 0x04
    local_f32FractionalPart = local_f32FractionalPart * 100;
    2390:	69 81       	ldd	r22, Y+1	; 0x01
    2392:	7a 81       	ldd	r23, Y+2	; 0x02
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	48 ec       	ldi	r20, 0xC8	; 200
    239e:	52 e4       	ldi	r21, 0x42	; 66
    23a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	89 83       	std	Y+1, r24	; 0x01
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	ab 83       	std	Y+3, r26	; 0x03
    23ae:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidDisplayNumber((u32)local_f32FractionalPart);
    23b0:	69 81       	ldd	r22, Y+1	; 0x01
    23b2:	7a 81       	ldd	r23, Y+2	; 0x02
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
}
    23c8:	2c 96       	adiw	r28, 0x0c	; 12
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LCD_voidDrawData>:


void LCD_voidDrawData(u8 copy_u8Pattern , u8* copy_pu8Data , u8 copy_u8X , u8 copy_u8Y){
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	27 97       	sbiw	r28, 0x07	; 7
    23e4:	0f b6       	in	r0, 0x3f	; 63
    23e6:	f8 94       	cli
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	cd bf       	out	0x3d, r28	; 61
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	7d 83       	std	Y+5, r23	; 0x05
    23f2:	6c 83       	std	Y+4, r22	; 0x04
    23f4:	4e 83       	std	Y+6, r20	; 0x06
    23f6:	2f 83       	std	Y+7, r18	; 0x07
	  u8 loc_i=0 ;
    23f8:	1a 82       	std	Y+2, r1	; 0x02
	  u8 address_CGRAM=copy_u8Pattern*8 ;  // set address
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	89 83       	std	Y+1, r24	; 0x01
	  /* set CGRAM */
	  CLR_BIT(address_CGRAM,7) ;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	8f 77       	andi	r24, 0x7F	; 127
    2412:	89 83       	std	Y+1, r24	; 0x01
	  SET_BIT(address_CGRAM,6) ;
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	80 64       	ori	r24, 0x40	; 64
    2418:	89 83       	std	Y+1, r24	; 0x01
	  LCD_voidSendCommand(address_CGRAM) ;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    2420:	1a 82       	std	Y+2, r1	; 0x02
    2422:	0e c0       	rjmp	.+28     	; 0x2440 <LCD_voidDrawData+0x66>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	fc 01       	movw	r30, r24
    2430:	e2 0f       	add	r30, r18
    2432:	f3 1f       	adc	r31, r19
    2434:	80 81       	ld	r24, Z
    2436:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
	  CLR_BIT(address_CGRAM,7) ;
	  SET_BIT(address_CGRAM,6) ;
	  LCD_voidSendCommand(address_CGRAM) ;

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	8a 83       	std	Y+2, r24	; 0x02
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	88 30       	cpi	r24, 0x08	; 8
    2444:	78 f3       	brcs	.-34     	; 0x2424 <LCD_voidDrawData+0x4a>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
	  }
	  LCD_voidGoToSpecificPosition(copy_u8X,copy_u8Y);
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_voidGoToSpecificPosition>
	  LCD_voidDisplayChar(copy_u8Pattern) ;
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
}
    2454:	27 96       	adiw	r28, 0x07	; 7
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <LCD_voidClear>:

void LCD_voidClear (void)
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0b00000001);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <LCD_voidShift>:

void LCD_voidShift (u8 copy_u8ShiftingDirection)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <LCD_voidShift+0x6>
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8ShiftingDirection <= LCD_SHIFT_RIGHT) {
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	b0 f4       	brcc	.+44     	; 0x24ba <LCD_voidShift+0x40>
		switch (copy_u8ShiftingDirection) {
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3b 83       	std	Y+3, r19	; 0x03
    2496:	2a 83       	std	Y+2, r18	; 0x02
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	9b 81       	ldd	r25, Y+3	; 0x03
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	31 f0       	breq	.+12     	; 0x24ac <LCD_voidShift+0x32>
    24a0:	2a 81       	ldd	r18, Y+2	; 0x02
    24a2:	3b 81       	ldd	r19, Y+3	; 0x03
    24a4:	21 30       	cpi	r18, 0x01	; 1
    24a6:	31 05       	cpc	r19, r1
    24a8:	29 f0       	breq	.+10     	; 0x24b4 <LCD_voidShift+0x3a>
    24aa:	07 c0       	rjmp	.+14     	; 0x24ba <LCD_voidShift+0x40>
			case LCD_SHIFT_LEFT:
				LCD_voidSendCommand(0b00011000);
    24ac:	88 e1       	ldi	r24, 0x18	; 24
    24ae:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <LCD_voidShift+0x40>
				break;
			case LCD_SHIFT_RIGHT:
				LCD_voidSendCommand(0b00011100);
    24b4:	8c e1       	ldi	r24, 0x1C	; 28
    24b6:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
				break;
		}
	} else {
		//return Error State
	}
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <LCD_voidGoToSpecificPosition>:

void LCD_voidGoToSpecificPosition (u8 copy_u8LineNumber, u8 copy_u8Position)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <LCD_voidGoToSpecificPosition+0x6>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	6b 83       	std	Y+3, r22	; 0x03
	/* set address */
	u8 ddram_address= copy_u8Position+copy_u8LineNumber*0x40 ;
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	00 24       	eor	r0, r0
    24de:	96 95       	lsr	r25
    24e0:	87 95       	ror	r24
    24e2:	07 94       	ror	r0
    24e4:	96 95       	lsr	r25
    24e6:	87 95       	ror	r24
    24e8:	07 94       	ror	r0
    24ea:	98 2f       	mov	r25, r24
    24ec:	80 2d       	mov	r24, r0
    24ee:	98 2f       	mov	r25, r24
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	89 0f       	add	r24, r25
    24f4:	89 83       	std	Y+1, r24	; 0x01

	/*set DDRAM */
	SET_BIT(ddram_address,7) ;  // set bit7 in ddram
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	80 68       	ori	r24, 0x80	; 128
    24fa:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(ddram_address) ;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	0e 94 81 10 	call	0x2102	; 0x2102 <LCD_voidSendCommand>
}
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort (u8 copy_u8cmnd)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	0f 92       	push	r0
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8cmnd,0));
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	98 2f       	mov	r25, r24
    251e:	91 70       	andi	r25, 0x01	; 1
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	64 e0       	ldi	r22, 0x04	; 4
    2524:	49 2f       	mov	r20, r25
    2526:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8cmnd,1));
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	86 95       	lsr	r24
    252e:	98 2f       	mov	r25, r24
    2530:	91 70       	andi	r25, 0x01	; 1
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	65 e0       	ldi	r22, 0x05	; 5
    2536:	49 2f       	mov	r20, r25
    2538:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8cmnd,2));
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	86 95       	lsr	r24
    2540:	86 95       	lsr	r24
    2542:	98 2f       	mov	r25, r24
    2544:	91 70       	andi	r25, 0x01	; 1
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	66 e0       	ldi	r22, 0x06	; 6
    254a:	49 2f       	mov	r20, r25
    254c:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8cmnd,3));
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	86 95       	lsr	r24
    2558:	98 2f       	mov	r25, r24
    255a:	91 70       	andi	r25, 0x01	; 1
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	67 e0       	ldi	r22, 0x07	; 7
    2560:	49 2f       	mov	r20, r25
    2562:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
}
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <PRV_voidEnableTriggerWrite>:


static void PRV_voidEnableTriggerWrite (void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	2e 97       	sbiw	r28, 0x0e	; 14
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
	/* Enable Pulse *//* H => L */
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	63 e0       	ldi	r22, 0x03	; 3
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8b 87       	std	Y+11, r24	; 0x0b
    2596:	9c 87       	std	Y+12, r25	; 0x0c
    2598:	ad 87       	std	Y+13, r26	; 0x0d
    259a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6b 85       	ldd	r22, Y+11	; 0x0b
    259e:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	55 e4       	ldi	r21, 0x45	; 69
    25ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	8f 83       	std	Y+7, r24	; 0x07
    25b6:	98 87       	std	Y+8, r25	; 0x08
    25b8:	a9 87       	std	Y+9, r26	; 0x09
    25ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25bc:	6f 81       	ldd	r22, Y+7	; 0x07
    25be:	78 85       	ldd	r23, Y+8	; 0x08
    25c0:	89 85       	ldd	r24, Y+9	; 0x09
    25c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    25de:	6f 81       	ldd	r22, Y+7	; 0x07
    25e0:	78 85       	ldd	r23, Y+8	; 0x08
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
    261e:	0f c0       	rjmp	.+30     	; 0x263e <PRV_voidEnableTriggerWrite+0xd0>
    2620:	80 e9       	ldi	r24, 0x90	; 144
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <PRV_voidEnableTriggerWrite+0xbe>
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <PRV_voidEnableTriggerWrite+0xb2>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	9e 83       	std	Y+6, r25	; 0x06
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <PRV_voidEnableTriggerWrite+0xfa>
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	63 e0       	ldi	r22, 0x03	; 3
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
}
    267a:	2e 96       	adiw	r28, 0x0e	; 14
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <KEYPAD_voidInit>:
										{4,5,6,'*'},
										{1,2,3,'-'},
										{'c',0,'=','+'}	};

void KEYPAD_voidInit (void)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	29 97       	sbiw	r28, 0x09	; 9
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	8a 83       	std	Y+2, r24	; 0x02
    26a4:	85 e0       	ldi	r24, 0x05	; 5
    26a6:	8b 83       	std	Y+3, r24	; 0x03
    26a8:	86 e0       	ldi	r24, 0x06	; 6
    26aa:	8c 83       	std	Y+4, r24	; 0x04
    26ac:	87 e0       	ldi	r24, 0x07	; 7
    26ae:	8d 83       	std	Y+5, r24	; 0x05
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	8e 83       	std	Y+6, r24	; 0x06
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	8f 83       	std	Y+7, r24	; 0x07
    26b8:	84 e0       	ldi	r24, 0x04	; 4
    26ba:	88 87       	std	Y+8, r24	; 0x08
    26bc:	85 e0       	ldi	r24, 0x05	; 5
    26be:	89 87       	std	Y+9, r24	; 0x09

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    26c0:	19 82       	std	Y+1, r1	; 0x01
    26c2:	3b c0       	rjmp	.+118    	; 0x273a <KEYPAD_voidInit+0xae>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	ce 01       	movw	r24, r28
    26cc:	02 96       	adiw	r24, 0x02	; 2
    26ce:	fc 01       	movw	r30, r24
    26d0:	e2 0f       	add	r30, r18
    26d2:	f3 1f       	adc	r31, r19
    26d4:	90 81       	ld	r25, Z
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	69 2f       	mov	r22, r25
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	ce 01       	movw	r24, r28
    26e8:	02 96       	adiw	r24, 0x02	; 2
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	90 81       	ld	r25, Z
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	69 2f       	mov	r22, r25
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	ce 01       	movw	r24, r28
    2704:	06 96       	adiw	r24, 0x06	; 6
    2706:	fc 01       	movw	r30, r24
    2708:	e2 0f       	add	r30, r18
    270a:	f3 1f       	adc	r31, r19
    270c:	90 81       	ld	r25, Z
    270e:	83 e0       	ldi	r24, 0x03	; 3
    2710:	69 2f       	mov	r22, r25
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	ce 01       	movw	r24, r28
    2720:	06 96       	adiw	r24, 0x06	; 6
    2722:	fc 01       	movw	r30, r24
    2724:	e2 0f       	add	r30, r18
    2726:	f3 1f       	adc	r31, r19
    2728:	90 81       	ld	r25, Z
    272a:	83 e0       	ldi	r24, 0x03	; 3
    272c:	69 2f       	mov	r22, r25
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
{
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	84 30       	cpi	r24, 0x04	; 4
    273e:	10 f2       	brcs	.-124    	; 0x26c4 <KEYPAD_voidInit+0x38>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
	}
}
    2740:	29 96       	adiw	r28, 0x09	; 9
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <KEYPAD_u8AdjustKeyPadNum>:

u8 KEYPAD_u8AdjustKeyPadNum	(void)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	2c 97       	sbiw	r28, 0x0c	; 12
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    2766:	84 e0       	ldi	r24, 0x04	; 4
    2768:	8c 83       	std	Y+4, r24	; 0x04
    276a:	85 e0       	ldi	r24, 0x05	; 5
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	8e 83       	std	Y+6, r24	; 0x06
    2772:	87 e0       	ldi	r24, 0x07	; 7
    2774:	8f 83       	std	Y+7, r24	; 0x07
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	88 87       	std	Y+8, r24	; 0x08
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	89 87       	std	Y+9, r24	; 0x09
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	8a 87       	std	Y+10, r24	; 0x0a
    2782:	85 e0       	ldi	r24, 0x05	; 5
    2784:	8b 87       	std	Y+11, r24	; 0x0b

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	89 83       	std	Y+1, r24	; 0x01

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    278a:	1a 82       	std	Y+2, r1	; 0x02
    278c:	5a c0       	rjmp	.+180    	; 0x2842 <KEYPAD_u8AdjustKeyPadNum+0xf0>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	ce 01       	movw	r24, r28
    2796:	08 96       	adiw	r24, 0x08	; 8
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	90 81       	ld	r25, Z
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	69 2f       	mov	r22, r25
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    27aa:	1b 82       	std	Y+3, r1	; 0x03
    27ac:	36 c0       	rjmp	.+108    	; 0x281a <KEYPAD_u8AdjustKeyPadNum+0xc8>
			if(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0)
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	ce 01       	movw	r24, r28
    27b6:	04 96       	adiw	r24, 0x04	; 4
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	90 81       	ld	r25, Z
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	69 2f       	mov	r22, r25
    27c4:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8GetPinValue>
    27c8:	88 23       	and	r24, r24
    27ca:	21 f5       	brne	.+72     	; 0x2814 <KEYPAD_u8AdjustKeyPadNum+0xc2>
			{
				val = KEYPAD_ARR[local_u8Row][local_u8Col];
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	48 2f       	mov	r20, r24
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ca 01       	movw	r24, r20
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	82 0f       	add	r24, r18
    27e4:	93 1f       	adc	r25, r19
    27e6:	fc 01       	movw	r30, r24
    27e8:	e4 59       	subi	r30, 0x94	; 148
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	80 81       	ld	r24, Z
    27ee:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	ce 01       	movw	r24, r28
    27f8:	04 96       	adiw	r24, 0x04	; 4
    27fa:	fc 01       	movw	r30, r24
    27fc:	e2 0f       	add	r30, r18
    27fe:	f3 1f       	adc	r31, r19
    2800:	90 81       	ld	r25, Z
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	69 2f       	mov	r22, r25
    2806:	0e 94 13 0a 	call	0x1426	; 0x1426 <DIO_u8GetPinValue>
    280a:	88 23       	and	r24, r24
    280c:	89 f3       	breq	.-30     	; 0x27f0 <KEYPAD_u8AdjustKeyPadNum+0x9e>
				return val;
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	8c 87       	std	Y+12, r24	; 0x0c
    2812:	1d c0       	rjmp	.+58     	; 0x284e <KEYPAD_u8AdjustKeyPadNum+0xfc>
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	8b 83       	std	Y+3, r24	; 0x03
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	38 f2       	brcs	.-114    	; 0x27ae <KEYPAD_u8AdjustKeyPadNum+0x5c>
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
				return val;
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	ce 01       	movw	r24, r28
    2828:	08 96       	adiw	r24, 0x08	; 8
    282a:	fc 01       	movw	r30, r24
    282c:	e2 0f       	add	r30, r18
    282e:	f3 1f       	adc	r31, r19
    2830:	90 81       	ld	r25, Z
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	69 2f       	mov	r22, r25
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <DIO_voidSetPinValue>
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	8a 81       	ldd	r24, Y+2	; 0x02
    2844:	84 30       	cpi	r24, 0x04	; 4
    2846:	08 f4       	brcc	.+2      	; 0x284a <KEYPAD_u8AdjustKeyPadNum+0xf8>
    2848:	a2 cf       	rjmp	.-188    	; 0x278e <KEYPAD_u8AdjustKeyPadNum+0x3c>
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
	}
	return val;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	8c 87       	std	Y+12, r24	; 0x0c
    284e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2850:	2c 96       	adiw	r28, 0x0c	; 12
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <main>:
#include <util/delay.h>

void CAL();

int main()
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    LCD_voidInit();
    286a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_voidInit>
    KEYPAD_voidInit();
    286e:	0e 94 46 13 	call	0x268c	; 0x268c <KEYPAD_voidInit>

    while(1)
    {
    	CAL();
    2872:	0e 94 3c 14 	call	0x2878	; 0x2878 <CAL>
    2876:	fd cf       	rjmp	.-6      	; 0x2872 <main+0x10>

00002878 <CAL>:
    }
}

void CAL()
{
    2878:	ef 92       	push	r14
    287a:	ff 92       	push	r15
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	60 97       	sbiw	r28, 0x10	; 16
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    f32 num1 = 0;
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	a0 e0       	ldi	r26, 0x00	; 0
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	8b 87       	std	Y+11, r24	; 0x0b
    289e:	9c 87       	std	Y+12, r25	; 0x0c
    28a0:	ad 87       	std	Y+13, r26	; 0x0d
    28a2:	be 87       	std	Y+14, r27	; 0x0e
    f32 num2 = 0;
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e0       	ldi	r26, 0x00	; 0
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	8f 83       	std	Y+7, r24	; 0x07
    28ae:	98 87       	std	Y+8, r25	; 0x08
    28b0:	a9 87       	std	Y+9, r26	; 0x09
    28b2:	ba 87       	std	Y+10, r27	; 0x0a
    28b4:	4a c0       	rjmp	.+148    	; 0x294a <CAL+0xd2>
    f32 out_num;
    u8 num;
    u8 op;
    //first number
    while(num1 == 0){
        num = 0xFF;
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	8a 83       	std	Y+2, r24	; 0x02
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <CAL+0x4a>
        while(num == 0xFF){
            num = KEYPAD_u8AdjustKeyPadNum();
    28bc:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    u8 num;
    u8 op;
    //first number
    while(num1 == 0){
        num = 0xFF;
        while(num == 0xFF){
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	8f 3f       	cpi	r24, 0xFF	; 255
    28c6:	d1 f3       	breq	.-12     	; 0x28bc <CAL+0x44>
            num = KEYPAD_u8AdjustKeyPadNum();
        }
        if (num == 0) {
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	88 23       	and	r24, r24
    28cc:	51 f4       	brne	.+20     	; 0x28e2 <CAL+0x6a>
            LCD_voidDisplayNumber(num);
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e0       	ldi	r26, 0x00	; 0
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
    28e0:	41 c0       	rjmp	.+130    	; 0x2964 <CAL+0xec>
            break;
        }
        if((num >= 1) && (num <= 9)){
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	88 23       	and	r24, r24
    28e6:	89 f1       	breq	.+98     	; 0x294a <CAL+0xd2>
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	8a 30       	cpi	r24, 0x0A	; 10
    28ec:	70 f5       	brcc	.+92     	; 0x294a <CAL+0xd2>
            num1 = num1*10 + num;
    28ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	7c 01       	movw	r14, r24
    2908:	8d 01       	movw	r16, r26
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	aa 27       	eor	r26, r26
    2912:	97 fd       	sbrc	r25, 7
    2914:	a0 95       	com	r26
    2916:	ba 2f       	mov	r27, r26
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2920:	9b 01       	movw	r18, r22
    2922:	ac 01       	movw	r20, r24
    2924:	c8 01       	movw	r24, r16
    2926:	b7 01       	movw	r22, r14
    2928:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8b 87       	std	Y+11, r24	; 0x0b
    2932:	9c 87       	std	Y+12, r25	; 0x0c
    2934:	ad 87       	std	Y+13, r26	; 0x0d
    2936:	be 87       	std	Y+14, r27	; 0x0e
            LCD_voidDisplayNumber(num);
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e0       	ldi	r26, 0x00	; 0
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
    f32 num2 = 0;
    f32 out_num;
    u8 num;
    u8 op;
    //first number
    while(num1 == 0){
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    295e:	88 23       	and	r24, r24
    2960:	09 f4       	brne	.+2      	; 0x2964 <CAL+0xec>
    2962:	a9 cf       	rjmp	.-174    	; 0x28b6 <CAL+0x3e>
            num1 = num1*10 + num;
            LCD_voidDisplayNumber(num);
        }
    }

    num = 0xFF;
    2964:	8f ef       	ldi	r24, 0xFF	; 255
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	03 c0       	rjmp	.+6      	; 0x2970 <CAL+0xf8>
    while(num == 0xFF){
        num = KEYPAD_u8AdjustKeyPadNum();
    296a:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    296e:	8a 83       	std	Y+2, r24	; 0x02
            LCD_voidDisplayNumber(num);
        }
    }

    num = 0xFF;
    while(num == 0xFF){
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	8f 3f       	cpi	r24, 0xFF	; 255
    2974:	d1 f3       	breq	.-12     	; 0x296a <CAL+0xf2>
        num = KEYPAD_u8AdjustKeyPadNum();
    }

    if (num1 != 0) {
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    298a:	88 23       	and	r24, r24
    298c:	e9 f1       	breq	.+122    	; 0x2a08 <CAL+0x190>
        do {
            if((num >= 0) && (num <= 9)){
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	8a 30       	cpi	r24, 0x0A	; 10
    2992:	70 f5       	brcc	.+92     	; 0x29f0 <CAL+0x178>
                num1 = num1*10 + num;
    2994:	6b 85       	ldd	r22, Y+11	; 0x0b
    2996:	7c 85       	ldd	r23, Y+12	; 0x0c
    2998:	8d 85       	ldd	r24, Y+13	; 0x0d
    299a:	9e 85       	ldd	r25, Y+14	; 0x0e
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	7c 01       	movw	r14, r24
    29ae:	8d 01       	movw	r16, r26
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	88 2f       	mov	r24, r24
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	aa 27       	eor	r26, r26
    29b8:	97 fd       	sbrc	r25, 7
    29ba:	a0 95       	com	r26
    29bc:	ba 2f       	mov	r27, r26
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	c8 01       	movw	r24, r16
    29cc:	b7 01       	movw	r22, r14
    29ce:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8b 87       	std	Y+11, r24	; 0x0b
    29d8:	9c 87       	std	Y+12, r25	; 0x0c
    29da:	ad 87       	std	Y+13, r26	; 0x0d
    29dc:	be 87       	std	Y+14, r27	; 0x0e
                LCD_voidDisplayNumber(num);
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e0       	ldi	r26, 0x00	; 0
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
            }
            num = 0xFF;
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	8a 83       	std	Y+2, r24	; 0x02
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <CAL+0x184>
            while(num == 0xFF){
                num = KEYPAD_u8AdjustKeyPadNum();
    29f6:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    29fa:	8a 83       	std	Y+2, r24	; 0x02
            if((num >= 0) && (num <= 9)){
                num1 = num1*10 + num;
                LCD_voidDisplayNumber(num);
            }
            num = 0xFF;
            while(num == 0xFF){
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2a00:	d1 f3       	breq	.-12     	; 0x29f6 <CAL+0x17e>
                num = KEYPAD_u8AdjustKeyPadNum();
            }
        }while ((num >= 0) && (num <= 9));
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	8a 30       	cpi	r24, 0x0A	; 10
    2a06:	18 f2       	brcs	.-122    	; 0x298e <CAL+0x116>
    }

    LCD_voidDisplayChar(' ');
    2a08:	80 e2       	ldi	r24, 0x20	; 32
    2a0a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    op = num;
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    LCD_voidDisplayChar((char)op);
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    LCD_voidDisplayChar(' ');
    2a18:	80 e2       	ldi	r24, 0x20	; 32
    2a1a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    2a1e:	4a c0       	rjmp	.+148    	; 0x2ab4 <CAL+0x23c>

    //second number
    while(num2 == 0){
        num = 0xFF;
    2a20:	8f ef       	ldi	r24, 0xFF	; 255
    2a22:	8a 83       	std	Y+2, r24	; 0x02
    2a24:	03 c0       	rjmp	.+6      	; 0x2a2c <CAL+0x1b4>
        while(num == 0xFF){
            num = KEYPAD_u8AdjustKeyPadNum();
    2a26:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    LCD_voidDisplayChar(' ');

    //second number
    while(num2 == 0){
        num = 0xFF;
        while(num == 0xFF){
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a30:	d1 f3       	breq	.-12     	; 0x2a26 <CAL+0x1ae>
            num = KEYPAD_u8AdjustKeyPadNum();
        }
        if (num == 0) {
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	88 23       	and	r24, r24
    2a36:	51 f4       	brne	.+20     	; 0x2a4c <CAL+0x1d4>
            LCD_voidDisplayNumber(num);
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
    2a4a:	41 c0       	rjmp	.+130    	; 0x2ace <CAL+0x256>
            break;
        }
        if((num >= 1) && (num <= 9)){
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	88 23       	and	r24, r24
    2a50:	89 f1       	breq	.+98     	; 0x2ab4 <CAL+0x23c>
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	8a 30       	cpi	r24, 0x0A	; 10
    2a56:	70 f5       	brcc	.+92     	; 0x2ab4 <CAL+0x23c>
            num2 = num2*10 + num;
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	7c 01       	movw	r14, r24
    2a72:	8d 01       	movw	r16, r26
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	aa 27       	eor	r26, r26
    2a7c:	97 fd       	sbrc	r25, 7
    2a7e:	a0 95       	com	r26
    2a80:	ba 2f       	mov	r27, r26
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2a8a:	9b 01       	movw	r18, r22
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	c8 01       	movw	r24, r16
    2a90:	b7 01       	movw	r22, r14
    2a92:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8f 83       	std	Y+7, r24	; 0x07
    2a9c:	98 87       	std	Y+8, r25	; 0x08
    2a9e:	a9 87       	std	Y+9, r26	; 0x09
    2aa0:	ba 87       	std	Y+10, r27	; 0x0a
            LCD_voidDisplayNumber(num);
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	a0 e0       	ldi	r26, 0x00	; 0
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
    op = num;
    LCD_voidDisplayChar((char)op);
    LCD_voidDisplayChar(' ');

    //second number
    while(num2 == 0){
    2ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab6:	78 85       	ldd	r23, Y+8	; 0x08
    2ab8:	89 85       	ldd	r24, Y+9	; 0x09
    2aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	09 f4       	brne	.+2      	; 0x2ace <CAL+0x256>
    2acc:	a9 cf       	rjmp	.-174    	; 0x2a20 <CAL+0x1a8>
            num2 = num2*10 + num;
            LCD_voidDisplayNumber(num);
        }
    }

    num = 0xFF;
    2ace:	8f ef       	ldi	r24, 0xFF	; 255
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
    2ad2:	03 c0       	rjmp	.+6      	; 0x2ada <CAL+0x262>
    while(num == 0xFF){
        num = KEYPAD_u8AdjustKeyPadNum();
    2ad4:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    2ad8:	8a 83       	std	Y+2, r24	; 0x02
            LCD_voidDisplayNumber(num);
        }
    }

    num = 0xFF;
    while(num == 0xFF){
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ade:	d1 f3       	breq	.-12     	; 0x2ad4 <CAL+0x25c>
        num = KEYPAD_u8AdjustKeyPadNum();
    }

    if (num2 != 0) {
    2ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae2:	78 85       	ldd	r23, Y+8	; 0x08
    2ae4:	89 85       	ldd	r24, Y+9	; 0x09
    2ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2af4:	88 23       	and	r24, r24
    2af6:	e9 f1       	breq	.+122    	; 0x2b72 <CAL+0x2fa>
        do {
            if((num >= 0) && (num <= 9)){
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	8a 30       	cpi	r24, 0x0A	; 10
    2afc:	70 f5       	brcc	.+92     	; 0x2b5a <CAL+0x2e2>
                num2 = num2*10 + num;
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	7c 01       	movw	r14, r24
    2b18:	8d 01       	movw	r16, r26
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	aa 27       	eor	r26, r26
    2b22:	97 fd       	sbrc	r25, 7
    2b24:	a0 95       	com	r26
    2b26:	ba 2f       	mov	r27, r26
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatsisf>
    2b30:	9b 01       	movw	r18, r22
    2b32:	ac 01       	movw	r20, r24
    2b34:	c8 01       	movw	r24, r16
    2b36:	b7 01       	movw	r22, r14
    2b38:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8f 83       	std	Y+7, r24	; 0x07
    2b42:	98 87       	std	Y+8, r25	; 0x08
    2b44:	a9 87       	std	Y+9, r26	; 0x09
    2b46:	ba 87       	std	Y+10, r27	; 0x0a
                LCD_voidDisplayNumber(num);
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 ce 10 	call	0x219c	; 0x219c <LCD_voidDisplayNumber>
            }
            num = 0xFF;
    2b5a:	8f ef       	ldi	r24, 0xFF	; 255
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <CAL+0x2ee>
            while(num == 0xFF){
                num = KEYPAD_u8AdjustKeyPadNum();
    2b60:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    2b64:	8a 83       	std	Y+2, r24	; 0x02
            if((num >= 0) && (num <= 9)){
                num2 = num2*10 + num;
                LCD_voidDisplayNumber(num);
            }
            num = 0xFF;
            while(num == 0xFF){
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6a:	d1 f3       	breq	.-12     	; 0x2b60 <CAL+0x2e8>
                num = KEYPAD_u8AdjustKeyPadNum();
            }
        }while ((num >= 0) && (num <= 9));
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	8a 30       	cpi	r24, 0x0A	; 10
    2b70:	18 f2       	brcs	.-122    	; 0x2af8 <CAL+0x280>
    }

    LCD_voidDisplayChar(' ');
    2b72:	80 e2       	ldi	r24, 0x20	; 32
    2b74:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    LCD_voidDisplayChar('=');
    2b78:	8d e3       	ldi	r24, 0x3D	; 61
    2b7a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>
    LCD_voidDisplayChar(' ');
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LCD_voidDisplayChar>

    // Perform the operation
    switch (op) {
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	38 8b       	std	Y+16, r19	; 0x10
    2b8c:	2f 87       	std	Y+15, r18	; 0x0f
    2b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b90:	98 89       	ldd	r25, Y+16	; 0x10
    2b92:	8b 32       	cpi	r24, 0x2B	; 43
    2b94:	91 05       	cpc	r25, r1
    2b96:	b1 f0       	breq	.+44     	; 0x2bc4 <CAL+0x34c>
    2b98:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b9a:	38 89       	ldd	r19, Y+16	; 0x10
    2b9c:	2c 32       	cpi	r18, 0x2C	; 44
    2b9e:	31 05       	cpc	r19, r1
    2ba0:	34 f4       	brge	.+12     	; 0x2bae <CAL+0x336>
    2ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ba4:	98 89       	ldd	r25, Y+16	; 0x10
    2ba6:	8a 32       	cpi	r24, 0x2A	; 42
    2ba8:	91 05       	cpc	r25, r1
    2baa:	71 f1       	breq	.+92     	; 0x2c08 <CAL+0x390>
    2bac:	67 c0       	rjmp	.+206    	; 0x2c7c <CAL+0x404>
    2bae:	2f 85       	ldd	r18, Y+15	; 0x0f
    2bb0:	38 89       	ldd	r19, Y+16	; 0x10
    2bb2:	2d 32       	cpi	r18, 0x2D	; 45
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	b9 f0       	breq	.+46     	; 0x2be6 <CAL+0x36e>
    2bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bba:	98 89       	ldd	r25, Y+16	; 0x10
    2bbc:	8f 32       	cpi	r24, 0x2F	; 47
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	a1 f1       	breq	.+104    	; 0x2c2a <CAL+0x3b2>
    2bc2:	5c c0       	rjmp	.+184    	; 0x2c7c <CAL+0x404>
        case '+':
            out_num = num1 + num2;
    2bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bcc:	2f 81       	ldd	r18, Y+7	; 0x07
    2bce:	38 85       	ldd	r19, Y+8	; 0x08
    2bd0:	49 85       	ldd	r20, Y+9	; 0x09
    2bd2:	5a 85       	ldd	r21, Y+10	; 0x0a
    2bd4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    2bd8:	dc 01       	movw	r26, r24
    2bda:	cb 01       	movw	r24, r22
    2bdc:	8b 83       	std	Y+3, r24	; 0x03
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	ad 83       	std	Y+5, r26	; 0x05
    2be2:	be 83       	std	Y+6, r27	; 0x06
    2be4:	4b c0       	rjmp	.+150    	; 0x2c7c <CAL+0x404>
            break;
        case '-':
            out_num = num1 - num2;
    2be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	2f 81       	ldd	r18, Y+7	; 0x07
    2bf0:	38 85       	ldd	r19, Y+8	; 0x08
    2bf2:	49 85       	ldd	r20, Y+9	; 0x09
    2bf4:	5a 85       	ldd	r21, Y+10	; 0x0a
    2bf6:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	9c 83       	std	Y+4, r25	; 0x04
    2c02:	ad 83       	std	Y+5, r26	; 0x05
    2c04:	be 83       	std	Y+6, r27	; 0x06
    2c06:	3a c0       	rjmp	.+116    	; 0x2c7c <CAL+0x404>
            break;
        case '*':
            out_num = num1 * num2;
    2c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c10:	2f 81       	ldd	r18, Y+7	; 0x07
    2c12:	38 85       	ldd	r19, Y+8	; 0x08
    2c14:	49 85       	ldd	r20, Y+9	; 0x09
    2c16:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	ad 83       	std	Y+5, r26	; 0x05
    2c26:	be 83       	std	Y+6, r27	; 0x06
    2c28:	29 c0       	rjmp	.+82     	; 0x2c7c <CAL+0x404>
            break;
        case '/':
            if (num2 != 0) {
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	0e 94 ed 03 	call	0x7da	; 0x7da <__nesf2>
    2c3e:	88 23       	and	r24, r24
    2c40:	c9 f0       	breq	.+50     	; 0x2c74 <CAL+0x3fc>
                out_num = num1 / num2;
    2c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	2f 81       	ldd	r18, Y+7	; 0x07
    2c4c:	38 85       	ldd	r19, Y+8	; 0x08
    2c4e:	49 85       	ldd	r20, Y+9	; 0x09
    2c50:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c52:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	ad 83       	std	Y+5, r26	; 0x05
    2c60:	be 83       	std	Y+6, r27	; 0x06
                LCD_voidDisplayFloat(out_num);
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	ad 81       	ldd	r26, Y+5	; 0x05
    2c68:	be 81       	ldd	r27, Y+6	; 0x06
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 77 11 	call	0x22ee	; 0x22ee <LCD_voidDisplayFloat>
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <CAL+0x404>
            } else {
                LCD_voidDisplayString("ERR");
    2c74:	80 e6       	ldi	r24, 0x60	; 96
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_voidDisplayString>
        default:
            break;
    }

    // Display the result
    if(op != '/') {
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	8f 32       	cpi	r24, 0x2F	; 47
    2c80:	61 f0       	breq	.+24     	; 0x2c9a <CAL+0x422>
        LCD_voidDisplaySignedNumber((s32)out_num);
    2c82:	6b 81       	ldd	r22, Y+3	; 0x03
    2c84:	7c 81       	ldd	r23, Y+4	; 0x04
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fixsfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_voidDisplaySignedNumber>
    }

    // Wait for the user to press 'c' to clear
    do {
        num = 0xFF;
    2c9a:	8f ef       	ldi	r24, 0xFF	; 255
    2c9c:	8a 83       	std	Y+2, r24	; 0x02
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <CAL+0x42e>
        while(num == 0xFF){
            num = KEYPAD_u8AdjustKeyPadNum();
    2ca0:	0e 94 a9 13 	call	0x2752	; 0x2752 <KEYPAD_u8AdjustKeyPadNum>
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
    }

    // Wait for the user to press 'c' to clear
    do {
        num = 0xFF;
        while(num == 0xFF){
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	8f 3f       	cpi	r24, 0xFF	; 255
    2caa:	d1 f3       	breq	.-12     	; 0x2ca0 <CAL+0x428>
            num = KEYPAD_u8AdjustKeyPadNum();
        }
    } while (num != 'c');
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	83 36       	cpi	r24, 0x63	; 99
    2cb0:	a1 f7       	brne	.-24     	; 0x2c9a <CAL+0x422>

    LCD_voidClear();
    2cb2:	0e 94 33 12 	call	0x2466	; 0x2466 <LCD_voidClear>
}
    2cb6:	60 96       	adiw	r28, 0x10	; 16
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	08 95       	ret

00002cd0 <__udivmodsi4>:
    2cd0:	a1 e2       	ldi	r26, 0x21	; 33
    2cd2:	1a 2e       	mov	r1, r26
    2cd4:	aa 1b       	sub	r26, r26
    2cd6:	bb 1b       	sub	r27, r27
    2cd8:	fd 01       	movw	r30, r26
    2cda:	0d c0       	rjmp	.+26     	; 0x2cf6 <__udivmodsi4_ep>

00002cdc <__udivmodsi4_loop>:
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	a2 17       	cp	r26, r18
    2ce6:	b3 07       	cpc	r27, r19
    2ce8:	e4 07       	cpc	r30, r20
    2cea:	f5 07       	cpc	r31, r21
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <__udivmodsi4_ep>
    2cee:	a2 1b       	sub	r26, r18
    2cf0:	b3 0b       	sbc	r27, r19
    2cf2:	e4 0b       	sbc	r30, r20
    2cf4:	f5 0b       	sbc	r31, r21

00002cf6 <__udivmodsi4_ep>:
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a 94       	dec	r1
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <__udivmodsi4_loop>
    2d02:	60 95       	com	r22
    2d04:	70 95       	com	r23
    2d06:	80 95       	com	r24
    2d08:	90 95       	com	r25
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	bd 01       	movw	r22, r26
    2d10:	cf 01       	movw	r24, r30
    2d12:	08 95       	ret

00002d14 <__prologue_saves__>:
    2d14:	2f 92       	push	r2
    2d16:	3f 92       	push	r3
    2d18:	4f 92       	push	r4
    2d1a:	5f 92       	push	r5
    2d1c:	6f 92       	push	r6
    2d1e:	7f 92       	push	r7
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	ca 1b       	sub	r28, r26
    2d3e:	db 0b       	sbc	r29, r27
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	09 94       	ijmp

00002d4c <__epilogue_restores__>:
    2d4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d4e:	39 88       	ldd	r3, Y+17	; 0x11
    2d50:	48 88       	ldd	r4, Y+16	; 0x10
    2d52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d60:	c8 84       	ldd	r12, Y+8	; 0x08
    2d62:	df 80       	ldd	r13, Y+7	; 0x07
    2d64:	ee 80       	ldd	r14, Y+6	; 0x06
    2d66:	fd 80       	ldd	r15, Y+5	; 0x05
    2d68:	0c 81       	ldd	r16, Y+4	; 0x04
    2d6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d70:	ce 0f       	add	r28, r30
    2d72:	d1 1d       	adc	r29, r1
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	ed 01       	movw	r28, r26
    2d80:	08 95       	ret

00002d82 <_exit>:
    2d82:	f8 94       	cli

00002d84 <__stop_program>:
    2d84:	ff cf       	rjmp	.-2      	; 0x2d84 <__stop_program>
