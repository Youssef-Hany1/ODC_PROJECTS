
FLC_WO_TIM_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002d76  00002e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800078  00800078  00002e22  2**0
                  ALLOC
  3 .stab         0000291c  00000000  00000000  00002e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011bd  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ae34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_1>
       8:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_2>
       c:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_10>
      2c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <main>
      8a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIM0_voidOVCTCInit>:

void (*TIM0_OV_PTR)(void) = NULL;
void (*TIM0_CTC_PTR)(void) = NULL;

void TIM0_voidOVCTCInit(u8 copy_u8mode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG &= 0b11111000;
     caa:	a3 e5       	ldi	r26, 0x53	; 83
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e3 e5       	ldi	r30, 0x53	; 83
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 7f       	andi	r24, 0xF8	; 248
     cb6:	8c 93       	st	X, r24
	TCCR0_REG |= TIM0_PRESCALER;
     cb8:	a3 e5       	ldi	r26, 0x53	; 83
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e3 e5       	ldi	r30, 0x53	; 83
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	83 60       	ori	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24

	if (copy_u8mode == OV_MODE) {
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	88 23       	and	r24, r24
     cca:	b1 f4       	brne	.+44     	; 0xcf8 <TIM0_voidOVCTCInit+0x5a>
		CLR_BIT(TCCR0_REG,3);
     ccc:	a3 e5       	ldi	r26, 0x53	; 83
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,6);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7b       	andi	r24, 0xBF	; 191
     ce6:	8c 93       	st	X, r24

		SET_BIT(TIMSK_REG,0);
     ce8:	a9 e5       	ldi	r26, 0x59	; 89
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e9 e5       	ldi	r30, 0x59	; 89
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	8c 93       	st	X, r24
     cf6:	1c c0       	rjmp	.+56     	; 0xd30 <TIM0_voidOVCTCInit+0x92>
	} else if(copy_u8mode == CTC_MODE){
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	c9 f4       	brne	.+50     	; 0xd30 <TIM0_voidOVCTCInit+0x92>
		SET_BIT(TCCR0_REG,3);
     cfe:	a3 e5       	ldi	r26, 0x53	; 83
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e3 e5       	ldi	r30, 0x53	; 83
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 60       	ori	r24, 0x08	; 8
     d0a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,6);
     d0c:	a3 e5       	ldi	r26, 0x53	; 83
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e3 e5       	ldi	r30, 0x53	; 83
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8f 7b       	andi	r24, 0xBF	; 191
     d18:	8c 93       	st	X, r24

		SET_BIT(TIMSK_REG,1);
     d1a:	a9 e5       	ldi	r26, 0x59	; 89
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e9 e5       	ldi	r30, 0x59	; 89
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	8c 93       	st	X, r24

		OCR0_REG = OCR_VAL;
     d28:	ec e5       	ldi	r30, 0x5C	; 92
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	8a ef       	ldi	r24, 0xFA	; 250
     d2e:	80 83       	st	Z, r24
	}
}
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <TIM0_voidSetCallBack>:

void TIM0_voidSetCallBack(void(*ptr)(void),u8 copy_u8mode){
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <TIM0_voidSetCallBack+0x6>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <TIM0_voidSetCallBack+0x8>
     d40:	0f 92       	push	r0
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8mode) {
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3d 83       	std	Y+5, r19	; 0x05
     d54:	2c 83       	std	Y+4, r18	; 0x04
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	31 f0       	breq	.+12     	; 0xd6a <TIM0_voidSetCallBack+0x32>
     d5e:	2c 81       	ldd	r18, Y+4	; 0x04
     d60:	3d 81       	ldd	r19, Y+5	; 0x05
     d62:	21 30       	cpi	r18, 0x01	; 1
     d64:	31 05       	cpc	r19, r1
     d66:	41 f0       	breq	.+16     	; 0xd78 <TIM0_voidSetCallBack+0x40>
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <TIM0_voidSetCallBack+0x4c>
		case OV_MODE:
			TIM0_OV_PTR = ptr;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	90 93 79 00 	sts	0x0079, r25
     d72:	80 93 78 00 	sts	0x0078, r24
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <TIM0_voidSetCallBack+0x4c>
			break;
		case CTC_MODE:
			TIM0_CTC_PTR = ptr;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	90 93 7b 00 	sts	0x007B, r25
     d80:	80 93 7a 00 	sts	0x007A, r24
			break;
	}
}
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <OV_LED>:

void OV_LED()
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	static u8 count = 0;
	count ++;
     d9c:	80 91 7c 00 	lds	r24, 0x007C
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	80 93 7c 00 	sts	0x007C, r24
	if (count==98) {
     da6:	80 91 7c 00 	lds	r24, 0x007C
     daa:	82 36       	cpi	r24, 0x62	; 98
     dac:	31 f4       	brne	.+12     	; 0xdba <OV_LED+0x26>
		DIO_voidTogglePinValue(DIO_PORTA,DIO_PIN0);
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_voidTogglePinValue>
		count = 0;
     db6:	10 92 7c 00 	sts	0x007C, r1
	}
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <CTC_LED>:

void CTC_LED()
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	static u16 count = 0;
	count ++;
     dc8:	80 91 7d 00 	lds	r24, 0x007D
     dcc:	90 91 7e 00 	lds	r25, 0x007E
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	90 93 7e 00 	sts	0x007E, r25
     dd6:	80 93 7d 00 	sts	0x007D, r24
	if (count==500) {
     dda:	80 91 7d 00 	lds	r24, 0x007D
     dde:	90 91 7e 00 	lds	r25, 0x007E
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	84 3f       	cpi	r24, 0xF4	; 244
     de6:	92 07       	cpc	r25, r18
     de8:	41 f4       	brne	.+16     	; 0xdfa <CTC_LED+0x3a>
		DIO_voidTogglePinValue(DIO_PORTA,DIO_PIN0);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 3f 0c 	call	0x187e	; 0x187e <DIO_voidTogglePinValue>
		count = 0;
     df2:	10 92 7e 00 	sts	0x007E, r1
     df6:	10 92 7d 00 	sts	0x007D, r1
	}
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void){
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
	TIM0_CTC_PTR();
     e2a:	e0 91 7a 00 	lds	r30, 0x007A
     e2e:	f0 91 7b 00 	lds	r31, 0x007B
     e32:	09 95       	icall
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_11>:

void __vector_11(void)__attribute__((signal));
void __vector_11(void){
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	TIM0_OV_PTR();
     e84:	e0 91 78 00 	lds	r30, 0x0078
     e88:	f0 91 79 00 	lds	r31, 0x0079
     e8c:	09 95       	icall
}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <GI_voidEnable>:
#include "GI_reg.h" 




void GI_voidEnable(void) {
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG_REG,7) ; 
     ebc:	af e5       	ldi	r26, 0x5F	; 95
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e5       	ldi	r30, 0x5F	; 95
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
	
//	__asm("SEI") ; 
	
} 
     eca:	cf 91       	pop	r28
     ecc:	df 91       	pop	r29
     ece:	08 95       	ret

00000ed0 <GI_voidDisable>:

void GI_voidDisable(void){
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG_REG,7) ; 
     ed8:	af e5       	ldi	r26, 0x5F	; 95
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ef e5       	ldi	r30, 0x5F	; 95
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 77       	andi	r24, 0x7F	; 127
     ee4:	8c 93       	st	X, r24
	//__asm("CLI") ; 
}
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <EXTI_voidInit>:

void (*INT0_PTR)(void) = NULL;
void (*INT1_PTR)(void) = NULL;
void (*INT2_PTR)(void) = NULL;

void EXTI_voidInit(u8 copy_u8interrupt, u8 copy_u8sense ){
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <EXTI_voidInit+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <EXTI_voidInit+0x8>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8interrupt){
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3c 83       	std	Y+4, r19	; 0x04
     f04:	2b 83       	std	Y+3, r18	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <EXTI_voidInit+0x26>
     f10:	54 c0       	rjmp	.+168    	; 0xfba <EXTI_voidInit+0xce>
     f12:	2b 81       	ldd	r18, Y+3	; 0x03
     f14:	3c 81       	ldd	r19, Y+4	; 0x04
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	31 05       	cpc	r19, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <EXTI_voidInit+0x32>
     f1c:	96 c0       	rjmp	.+300    	; 0x104a <EXTI_voidInit+0x15e>
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	09 f0       	breq	.+2      	; 0xf28 <EXTI_voidInit+0x3c>
     f26:	a6 c0       	rjmp	.+332    	; 0x1074 <EXTI_voidInit+0x188>
		case _INT_0 :
			if(copy_u8sense == LOW_LEVEL){
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	88 23       	and	r24, r24
     f2c:	79 f4       	brne	.+30     	; 0xf4c <EXTI_voidInit+0x60>
				CLR_BIT(MCUCR_REG,0) ;
     f2e:	a5 e5       	ldi	r26, 0x55	; 85
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e5       	ldi	r30, 0x55	; 85
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8e 7f       	andi	r24, 0xFE	; 254
     f3a:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,1) ;
     f3c:	a5 e5       	ldi	r26, 0x55	; 85
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e5       	ldi	r30, 0x55	; 85
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8d 7f       	andi	r24, 0xFD	; 253
     f48:	8c 93       	st	X, r24
     f4a:	94 c0       	rjmp	.+296    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense==ANY_LOGICAL_CHANCH)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	79 f4       	brne	.+30     	; 0xf70 <EXTI_voidInit+0x84>
			{
				SET_BIT(MCUCR_REG,0) ;
     f52:	a5 e5       	ldi	r26, 0x55	; 85
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e5       	ldi	r30, 0x55	; 85
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,1) ;
     f60:	a5 e5       	ldi	r26, 0x55	; 85
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e5       	ldi	r30, 0x55	; 85
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8d 7f       	andi	r24, 0xFD	; 253
     f6c:	8c 93       	st	X, r24
     f6e:	82 c0       	rjmp	.+260    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense ==FALLING_EDGE)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	79 f4       	brne	.+30     	; 0xf94 <EXTI_voidInit+0xa8>
			{
				CLR_BIT(MCUCR_REG,0) ;
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8e 7f       	andi	r24, 0xFE	; 254
     f82:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,1) ;
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	82 60       	ori	r24, 0x02	; 2
     f90:	8c 93       	st	X, r24
     f92:	70 c0       	rjmp	.+224    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense==RISING_EDGE)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	09 f0       	breq	.+2      	; 0xf9c <EXTI_voidInit+0xb0>
     f9a:	6c c0       	rjmp	.+216    	; 0x1074 <EXTI_voidInit+0x188>
			{
				SET_BIT(MCUCR_REG,0) ;
     f9c:	a5 e5       	ldi	r26, 0x55	; 85
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e5       	ldi	r30, 0x55	; 85
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,1) ;
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	82 60       	ori	r24, 0x02	; 2
     fb6:	8c 93       	st	X, r24
     fb8:	5d c0       	rjmp	.+186    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else{
			} break;
		case _INT_1 :
			if(copy_u8sense == LOW_LEVEL)
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	88 23       	and	r24, r24
     fbe:	79 f4       	brne	.+30     	; 0xfde <EXTI_voidInit+0xf2>
			{
				CLR_BIT(MCUCR_REG,2) ;
     fc0:	a5 e5       	ldi	r26, 0x55	; 85
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e5       	ldi	r30, 0x55	; 85
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8b 7f       	andi	r24, 0xFB	; 251
     fcc:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,3) ;
     fce:	a5 e5       	ldi	r26, 0x55	; 85
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e5       	ldi	r30, 0x55	; 85
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	87 7f       	andi	r24, 0xF7	; 247
     fda:	8c 93       	st	X, r24
     fdc:	4b c0       	rjmp	.+150    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense==ANY_LOGICAL_CHANCH)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	79 f4       	brne	.+30     	; 0x1002 <EXTI_voidInit+0x116>
			{
				SET_BIT(MCUCR_REG,2) ;
     fe4:	a5 e5       	ldi	r26, 0x55	; 85
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e5       	ldi	r30, 0x55	; 85
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,3) ;
     ff2:	a5 e5       	ldi	r26, 0x55	; 85
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e5       	ldi	r30, 0x55	; 85
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	8c 93       	st	X, r24
    1000:	39 c0       	rjmp	.+114    	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense ==FALLING_EDGE)
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	79 f4       	brne	.+30     	; 0x1026 <EXTI_voidInit+0x13a>
			{
				CLR_BIT(MCUCR_REG,2) ;
    1008:	a5 e5       	ldi	r26, 0x55	; 85
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e5 e5       	ldi	r30, 0x55	; 85
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8b 7f       	andi	r24, 0xFB	; 251
    1014:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,3) ;
    1016:	a5 e5       	ldi	r26, 0x55	; 85
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e5 e5       	ldi	r30, 0x55	; 85
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 60       	ori	r24, 0x08	; 8
    1022:	8c 93       	st	X, r24
    1024:	27 c0       	rjmp	.+78     	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense==RISING_EDGE)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	21 f5       	brne	.+72     	; 0x1074 <EXTI_voidInit+0x188>
			{
				SET_BIT(MCUCR_REG,2) ;
    102c:	a5 e5       	ldi	r26, 0x55	; 85
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e5 e5       	ldi	r30, 0x55	; 85
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,3) ;
    103a:	a5 e5       	ldi	r26, 0x55	; 85
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
    1048:	15 c0       	rjmp	.+42     	; 0x1074 <EXTI_voidInit+0x188>
			}
			else{
			}
			break ;
		case _INT_2 :
			if (copy_u8sense ==FALLING_EDGE)
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	41 f4       	brne	.+16     	; 0x1060 <EXTI_voidInit+0x174>
			{
				CLR_BIT(MCUCSR_REG,6) ;
    1050:	a4 e5       	ldi	r26, 0x54	; 84
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e4 e5       	ldi	r30, 0x54	; 84
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8f 7b       	andi	r24, 0xBF	; 191
    105c:	8c 93       	st	X, r24
    105e:	0a c0       	rjmp	.+20     	; 0x1074 <EXTI_voidInit+0x188>
			}
			else if (copy_u8sense==RISING_EDGE)
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	39 f4       	brne	.+14     	; 0x1074 <EXTI_voidInit+0x188>
			{
				SET_BIT(MCUCSR_REG,6) ;
    1066:	a4 e5       	ldi	r26, 0x54	; 84
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e4 e5       	ldi	r30, 0x54	; 84
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 64       	ori	r24, 0x40	; 64
    1072:	8c 93       	st	X, r24
			}
			break ;
	}
}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <EXT_voidEnable>:

void EXT_voidEnable(u8 copy_u8IntNum) {
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <EXT_voidEnable+0x6>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8IntNum) {
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3b 83       	std	Y+3, r19	; 0x03
    1098:	2a 83       	std	Y+2, r18	; 0x02
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	89 f0       	breq	.+34     	; 0x10c6 <EXT_voidEnable+0x44>
    10a4:	2a 81       	ldd	r18, Y+2	; 0x02
    10a6:	3b 81       	ldd	r19, Y+3	; 0x03
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	a1 f0       	breq	.+40     	; 0x10d6 <EXT_voidEnable+0x54>
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	b9 f4       	brne	.+46     	; 0x10e4 <EXT_voidEnable+0x62>
		case _INT_0:
			SET_BIT(GICR_REG,6);
    10b6:	ab e5       	ldi	r26, 0x5B	; 91
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	eb e5       	ldi	r30, 0x5B	; 91
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
    10c4:	0f c0       	rjmp	.+30     	; 0x10e4 <EXT_voidEnable+0x62>
			break;
		case _INT_1:
			SET_BIT(GICR_REG,7);
    10c6:	ab e5       	ldi	r26, 0x5B	; 91
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e5       	ldi	r30, 0x5B	; 91
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	8c 93       	st	X, r24
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <EXT_voidEnable+0x62>
			break;
		case _INT_2:
			SET_BIT(GICR_REG,5);
    10d6:	ab e5       	ldi	r26, 0x5B	; 91
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	eb e5       	ldi	r30, 0x5B	; 91
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 62       	ori	r24, 0x20	; 32
    10e2:	8c 93       	st	X, r24
			break;
	}
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <EXT_voidDisable>:

void EXT_voidDisable(u8 copy_u8IntNum){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <EXT_voidDisable+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8IntNum) {
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3b 83       	std	Y+3, r19	; 0x03
    1106:	2a 83       	std	Y+2, r18	; 0x02
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	89 f0       	breq	.+34     	; 0x1134 <EXT_voidDisable+0x44>
    1112:	2a 81       	ldd	r18, Y+2	; 0x02
    1114:	3b 81       	ldd	r19, Y+3	; 0x03
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	a1 f0       	breq	.+40     	; 0x1144 <EXT_voidDisable+0x54>
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	b9 f4       	brne	.+46     	; 0x1152 <EXT_voidDisable+0x62>
		case _INT_0:
			CLR_BIT(GICR_REG,6);
    1124:	ab e5       	ldi	r26, 0x5B	; 91
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e5       	ldi	r30, 0x5B	; 91
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7b       	andi	r24, 0xBF	; 191
    1130:	8c 93       	st	X, r24
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <EXT_voidDisable+0x62>
			break;
		case _INT_1:
			CLR_BIT(GICR_REG,7);
    1134:	ab e5       	ldi	r26, 0x5B	; 91
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	eb e5       	ldi	r30, 0x5B	; 91
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	8c 93       	st	X, r24
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <EXT_voidDisable+0x62>
			break;
		case _INT_2:
			CLR_BIT(GICR_REG,5);
    1144:	ab e5       	ldi	r26, 0x5B	; 91
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	eb e5       	ldi	r30, 0x5B	; 91
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 7d       	andi	r24, 0xDF	; 223
    1150:	8c 93       	st	X, r24
			break;
	}
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack(void(*ptr)(void),u8 copy_u8IntNum){
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <EXTI_voidSetCallBack+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <EXTI_voidSetCallBack+0x8>
    1166:	0f 92       	push	r0
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntNum) {
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3d 83       	std	Y+5, r19	; 0x05
    117a:	2c 83       	std	Y+4, r18	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <EXTI_voidSetCallBack+0x48>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	91 f0       	breq	.+36     	; 0x11b4 <EXTI_voidSetCallBack+0x56>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <EXTI_voidSetCallBack+0x62>
		case _INT_0:
			INT0_PTR = ptr;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	90 93 80 00 	sts	0x0080, r25
    11a0:	80 93 7f 00 	sts	0x007F, r24
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <EXTI_voidSetCallBack+0x62>
			break;
		case _INT_1:
			INT1_PTR = ptr;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	90 93 82 00 	sts	0x0082, r25
    11ae:	80 93 81 00 	sts	0x0081, r24
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <EXTI_voidSetCallBack+0x62>
			break;
		case _INT_2:
			INT2_PTR = ptr;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	90 93 84 00 	sts	0x0084, r25
    11bc:	80 93 83 00 	sts	0x0083, r24
			break;
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <__vector_1>:

void __vector_1(void)__attribute__((signal));
void __vector_1(void){
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	INT0_PTR() ;
    11fa:	e0 91 7f 00 	lds	r30, 0x007F
    11fe:	f0 91 80 00 	lds	r31, 0x0080
    1202:	09 95       	icall
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_2>:

void __vector_2(void)__attribute__((signal));
void __vector_2(void){
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	INT1_PTR() ;
    1254:	e0 91 81 00 	lds	r30, 0x0081
    1258:	f0 91 82 00 	lds	r31, 0x0082
    125c:	09 95       	icall
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	ff 91       	pop	r31
    1264:	ef 91       	pop	r30
    1266:	bf 91       	pop	r27
    1268:	af 91       	pop	r26
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	7f 91       	pop	r23
    1270:	6f 91       	pop	r22
    1272:	5f 91       	pop	r21
    1274:	4f 91       	pop	r20
    1276:	3f 91       	pop	r19
    1278:	2f 91       	pop	r18
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	0f 90       	pop	r0
    1280:	1f 90       	pop	r1
    1282:	18 95       	reti

00001284 <__vector_3>:

void __vector_3(void)__attribute__((signal));
void __vector_3(void){
    1284:	1f 92       	push	r1
    1286:	0f 92       	push	r0
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	0f 92       	push	r0
    128c:	11 24       	eor	r1, r1
    128e:	2f 93       	push	r18
    1290:	3f 93       	push	r19
    1292:	4f 93       	push	r20
    1294:	5f 93       	push	r21
    1296:	6f 93       	push	r22
    1298:	7f 93       	push	r23
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	af 93       	push	r26
    12a0:	bf 93       	push	r27
    12a2:	ef 93       	push	r30
    12a4:	ff 93       	push	r31
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	INT2_PTR() ;
    12ae:	e0 91 83 00 	lds	r30, 0x0083
    12b2:	f0 91 84 00 	lds	r31, 0x0084
    12b6:	09 95       	icall
}
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	ff 91       	pop	r31
    12be:	ef 91       	pop	r30
    12c0:	bf 91       	pop	r27
    12c2:	af 91       	pop	r26
    12c4:	9f 91       	pop	r25
    12c6:	8f 91       	pop	r24
    12c8:	7f 91       	pop	r23
    12ca:	6f 91       	pop	r22
    12cc:	5f 91       	pop	r21
    12ce:	4f 91       	pop	r20
    12d0:	3f 91       	pop	r19
    12d2:	2f 91       	pop	r18
    12d4:	0f 90       	pop	r0
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	0f 90       	pop	r0
    12da:	1f 90       	pop	r1
    12dc:	18 95       	reti

000012de <DIO_voidSetPinDirection>:
#include "DIO_register.h"

				/*************** PIN API's ***************/

void DIO_voidSetPinDirection (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	2d 97       	sbiw	r28, 0x0d	; 13
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	6a 83       	std	Y+2, r22	; 0x02
    12f6:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinDirection <= DIO_PIN_OUTPUT))
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <DIO_voidSetPinDirection+0x22>
    12fe:	09 c1       	rjmp	.+530    	; 0x1512 <DIO_voidSetPinDirection+0x234>
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	08 f0       	brcs	.+2      	; 0x1308 <DIO_voidSetPinDirection+0x2a>
    1306:	05 c1       	rjmp	.+522    	; 0x1512 <DIO_voidSetPinDirection+0x234>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	08 f0       	brcs	.+2      	; 0x1310 <DIO_voidSetPinDirection+0x32>
    130e:	01 c1       	rjmp	.+514    	; 0x1512 <DIO_voidSetPinDirection+0x234>
	{
		switch (copy_u8PortId)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3d 87       	std	Y+13, r19	; 0x0d
    1318:	2c 87       	std	Y+12, r18	; 0x0c
    131a:	8c 85       	ldd	r24, Y+12	; 0x0c
    131c:	9d 85       	ldd	r25, Y+13	; 0x0d
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <DIO_voidSetPinDirection+0x48>
    1324:	4f c0       	rjmp	.+158    	; 0x13c4 <DIO_voidSetPinDirection+0xe6>
    1326:	2c 85       	ldd	r18, Y+12	; 0x0c
    1328:	3d 85       	ldd	r19, Y+13	; 0x0d
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	31 05       	cpc	r19, r1
    132e:	2c f4       	brge	.+10     	; 0x133a <DIO_voidSetPinDirection+0x5c>
    1330:	8c 85       	ldd	r24, Y+12	; 0x0c
    1332:	9d 85       	ldd	r25, Y+13	; 0x0d
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	71 f0       	breq	.+28     	; 0x1354 <DIO_voidSetPinDirection+0x76>
    1338:	ec c0       	rjmp	.+472    	; 0x1512 <DIO_voidSetPinDirection+0x234>
    133a:	2c 85       	ldd	r18, Y+12	; 0x0c
    133c:	3d 85       	ldd	r19, Y+13	; 0x0d
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_voidSetPinDirection+0x68>
    1344:	77 c0       	rjmp	.+238    	; 0x1434 <DIO_voidSetPinDirection+0x156>
    1346:	8c 85       	ldd	r24, Y+12	; 0x0c
    1348:	9d 85       	ldd	r25, Y+13	; 0x0d
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <DIO_voidSetPinDirection+0x74>
    1350:	a9 c0       	rjmp	.+338    	; 0x14a4 <DIO_voidSetPinDirection+0x1c6>
    1352:	df c0       	rjmp	.+446    	; 0x1512 <DIO_voidSetPinDirection+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinDirection) {
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3b 87       	std	Y+11, r19	; 0x0b
    135c:	2a 87       	std	Y+10, r18	; 0x0a
    135e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1360:	9b 85       	ldd	r25, Y+11	; 0x0b
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	31 f0       	breq	.+12     	; 0x1372 <DIO_voidSetPinDirection+0x94>
    1366:	2a 85       	ldd	r18, Y+10	; 0x0a
    1368:	3b 85       	ldd	r19, Y+11	; 0x0b
    136a:	21 30       	cpi	r18, 0x01	; 1
    136c:	31 05       	cpc	r19, r1
    136e:	b1 f0       	breq	.+44     	; 0x139c <DIO_voidSetPinDirection+0xbe>
    1370:	d0 c0       	rjmp	.+416    	; 0x1512 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRA_REG,copy_u8PinId);
    1372:	aa e3       	ldi	r26, 0x3A	; 58
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ea e3       	ldi	r30, 0x3A	; 58
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_voidSetPinDirection+0xb2>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_voidSetPinDirection+0xae>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	bb c0       	rjmp	.+374    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRA_REG,copy_u8PinId);
    139c:	aa e3       	ldi	r26, 0x3A	; 58
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_voidSetPinDirection+0xdc>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_voidSetPinDirection+0xd8>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	a7 c0       	rjmp	.+334    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinDirection) {
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	39 87       	std	Y+9, r19	; 0x09
    13cc:	28 87       	std	Y+8, r18	; 0x08
    13ce:	88 85       	ldd	r24, Y+8	; 0x08
    13d0:	99 85       	ldd	r25, Y+9	; 0x09
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <DIO_voidSetPinDirection+0x104>
    13d6:	28 85       	ldd	r18, Y+8	; 0x08
    13d8:	39 85       	ldd	r19, Y+9	; 0x09
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	b1 f0       	breq	.+44     	; 0x140c <DIO_voidSetPinDirection+0x12e>
    13e0:	98 c0       	rjmp	.+304    	; 0x1512 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRB_REG,copy_u8PinId);
    13e2:	a7 e3       	ldi	r26, 0x37	; 55
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e7 e3       	ldi	r30, 0x37	; 55
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidSetPinDirection+0x122>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidSetPinDirection+0x11e>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	83 c0       	rjmp	.+262    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRB_REG,copy_u8PinId);
    140c:	a7 e3       	ldi	r26, 0x37	; 55
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e7 e3       	ldi	r30, 0x37	; 55
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_voidSetPinDirection+0x14c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_voidSetPinDirection+0x148>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	6f c0       	rjmp	.+222    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinDirection) {
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3f 83       	std	Y+7, r19	; 0x07
    143c:	2e 83       	std	Y+6, r18	; 0x06
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	31 f0       	breq	.+12     	; 0x1452 <DIO_voidSetPinDirection+0x174>
    1446:	2e 81       	ldd	r18, Y+6	; 0x06
    1448:	3f 81       	ldd	r19, Y+7	; 0x07
    144a:	21 30       	cpi	r18, 0x01	; 1
    144c:	31 05       	cpc	r19, r1
    144e:	b1 f0       	breq	.+44     	; 0x147c <DIO_voidSetPinDirection+0x19e>
    1450:	60 c0       	rjmp	.+192    	; 0x1512 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG,copy_u8PinId);
    1452:	a4 e3       	ldi	r26, 0x34	; 52
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_voidSetPinDirection+0x192>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_voidSetPinDirection+0x18e>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	4b c0       	rjmp	.+150    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG,copy_u8PinId);
    147c:	a4 e3       	ldi	r26, 0x34	; 52
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_voidSetPinDirection+0x1bc>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_voidSetPinDirection+0x1b8>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	37 c0       	rjmp	.+110    	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinDirection) {
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3d 83       	std	Y+5, r19	; 0x05
    14ac:	2c 83       	std	Y+4, r18	; 0x04
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <DIO_voidSetPinDirection+0x1e4>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	21 30       	cpi	r18, 0x01	; 1
    14bc:	31 05       	cpc	r19, r1
    14be:	b1 f0       	breq	.+44     	; 0x14ec <DIO_voidSetPinDirection+0x20e>
    14c0:	28 c0       	rjmp	.+80     	; 0x1512 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRD_REG,copy_u8PinId);
    14c2:	a1 e3       	ldi	r26, 0x31	; 49
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_voidSetPinDirection+0x202>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_voidSetPinDirection+0x1fe>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRD_REG,copy_u8PinId);
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_voidSetPinDirection+0x22c>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_voidSetPinDirection+0x228>
    150e:	84 2b       	or	r24, r20
    1510:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1512:	2d 96       	adiw	r28, 0x0d	; 13
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	2d 97       	sbiw	r28, 0x0d	; 13
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinValue <= DIO_PIN_HIGH))
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	84 30       	cpi	r24, 0x04	; 4
    1542:	08 f0       	brcs	.+2      	; 0x1546 <DIO_voidSetPinValue+0x22>
    1544:	09 c1       	rjmp	.+530    	; 0x1758 <DIO_voidSetPinValue+0x234>
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_voidSetPinValue+0x2a>
    154c:	05 c1       	rjmp	.+522    	; 0x1758 <DIO_voidSetPinValue+0x234>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	08 f0       	brcs	.+2      	; 0x1556 <DIO_voidSetPinValue+0x32>
    1554:	01 c1       	rjmp	.+514    	; 0x1758 <DIO_voidSetPinValue+0x234>
	{
		switch (copy_u8PortId)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3d 87       	std	Y+13, r19	; 0x0d
    155e:	2c 87       	std	Y+12, r18	; 0x0c
    1560:	8c 85       	ldd	r24, Y+12	; 0x0c
    1562:	9d 85       	ldd	r25, Y+13	; 0x0d
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	09 f4       	brne	.+2      	; 0x156c <DIO_voidSetPinValue+0x48>
    156a:	4f c0       	rjmp	.+158    	; 0x160a <DIO_voidSetPinValue+0xe6>
    156c:	2c 85       	ldd	r18, Y+12	; 0x0c
    156e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	2c f4       	brge	.+10     	; 0x1580 <DIO_voidSetPinValue+0x5c>
    1576:	8c 85       	ldd	r24, Y+12	; 0x0c
    1578:	9d 85       	ldd	r25, Y+13	; 0x0d
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	71 f0       	breq	.+28     	; 0x159a <DIO_voidSetPinValue+0x76>
    157e:	ec c0       	rjmp	.+472    	; 0x1758 <DIO_voidSetPinValue+0x234>
    1580:	2c 85       	ldd	r18, Y+12	; 0x0c
    1582:	3d 85       	ldd	r19, Y+13	; 0x0d
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <DIO_voidSetPinValue+0x68>
    158a:	77 c0       	rjmp	.+238    	; 0x167a <DIO_voidSetPinValue+0x156>
    158c:	8c 85       	ldd	r24, Y+12	; 0x0c
    158e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	09 f4       	brne	.+2      	; 0x1598 <DIO_voidSetPinValue+0x74>
    1596:	a9 c0       	rjmp	.+338    	; 0x16ea <DIO_voidSetPinValue+0x1c6>
    1598:	df c0       	rjmp	.+446    	; 0x1758 <DIO_voidSetPinValue+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinValue) {
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3b 87       	std	Y+11, r19	; 0x0b
    15a2:	2a 87       	std	Y+10, r18	; 0x0a
    15a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <DIO_voidSetPinValue+0x94>
    15ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    15ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    15b0:	21 30       	cpi	r18, 0x01	; 1
    15b2:	31 05       	cpc	r19, r1
    15b4:	b1 f0       	breq	.+44     	; 0x15e2 <DIO_voidSetPinValue+0xbe>
    15b6:	d0 c0       	rjmp	.+416    	; 0x1758 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTA_REG,copy_u8PinId);
    15b8:	ab e3       	ldi	r26, 0x3B	; 59
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	eb e3       	ldi	r30, 0x3B	; 59
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_voidSetPinValue+0xb2>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_voidSetPinValue+0xae>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	bb c0       	rjmp	.+374    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTA_REG,copy_u8PinId);
    15e2:	ab e3       	ldi	r26, 0x3B	; 59
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e3       	ldi	r30, 0x3B	; 59
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_voidSetPinValue+0xdc>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_voidSetPinValue+0xd8>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	a7 c0       	rjmp	.+334    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinValue) {
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	39 87       	std	Y+9, r19	; 0x09
    1612:	28 87       	std	Y+8, r18	; 0x08
    1614:	88 85       	ldd	r24, Y+8	; 0x08
    1616:	99 85       	ldd	r25, Y+9	; 0x09
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	31 f0       	breq	.+12     	; 0x1628 <DIO_voidSetPinValue+0x104>
    161c:	28 85       	ldd	r18, Y+8	; 0x08
    161e:	39 85       	ldd	r19, Y+9	; 0x09
    1620:	21 30       	cpi	r18, 0x01	; 1
    1622:	31 05       	cpc	r19, r1
    1624:	b1 f0       	breq	.+44     	; 0x1652 <DIO_voidSetPinValue+0x12e>
    1626:	98 c0       	rjmp	.+304    	; 0x1758 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTB_REG,copy_u8PinId);
    1628:	a8 e3       	ldi	r26, 0x38	; 56
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_voidSetPinValue+0x122>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_voidSetPinValue+0x11e>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	83 c0       	rjmp	.+262    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTB_REG,copy_u8PinId);
    1652:	a8 e3       	ldi	r26, 0x38	; 56
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e8 e3       	ldi	r30, 0x38	; 56
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_voidSetPinValue+0x14c>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_voidSetPinValue+0x148>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	6f c0       	rjmp	.+222    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinValue) {
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3f 83       	std	Y+7, r19	; 0x07
    1682:	2e 83       	std	Y+6, r18	; 0x06
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	31 f0       	breq	.+12     	; 0x1698 <DIO_voidSetPinValue+0x174>
    168c:	2e 81       	ldd	r18, Y+6	; 0x06
    168e:	3f 81       	ldd	r19, Y+7	; 0x07
    1690:	21 30       	cpi	r18, 0x01	; 1
    1692:	31 05       	cpc	r19, r1
    1694:	b1 f0       	breq	.+44     	; 0x16c2 <DIO_voidSetPinValue+0x19e>
    1696:	60 c0       	rjmp	.+192    	; 0x1758 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG,copy_u8PinId);
    1698:	a5 e3       	ldi	r26, 0x35	; 53
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e5 e3       	ldi	r30, 0x35	; 53
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_voidSetPinValue+0x192>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_voidSetPinValue+0x18e>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	4b c0       	rjmp	.+150    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG,copy_u8PinId);
    16c2:	a5 e3       	ldi	r26, 0x35	; 53
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e3       	ldi	r30, 0x35	; 53
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_voidSetPinValue+0x1bc>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_voidSetPinValue+0x1b8>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	37 c0       	rjmp	.+110    	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinValue) {
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3d 83       	std	Y+5, r19	; 0x05
    16f2:	2c 83       	std	Y+4, r18	; 0x04
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	31 f0       	breq	.+12     	; 0x1708 <DIO_voidSetPinValue+0x1e4>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	21 30       	cpi	r18, 0x01	; 1
    1702:	31 05       	cpc	r19, r1
    1704:	b1 f0       	breq	.+44     	; 0x1732 <DIO_voidSetPinValue+0x20e>
    1706:	28 c0       	rjmp	.+80     	; 0x1758 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTD_REG,copy_u8PinId);
    1708:	a2 e3       	ldi	r26, 0x32	; 50
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e2 e3       	ldi	r30, 0x32	; 50
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_voidSetPinValue+0x202>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_voidSetPinValue+0x1fe>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	13 c0       	rjmp	.+38     	; 0x1758 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTD_REG,copy_u8PinId);
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_voidSetPinValue+0x22c>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_voidSetPinValue+0x228>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1758:	2d 96       	adiw	r28, 0x0d	; 13
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <DIO_u8GetPinValue+0x6>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <DIO_u8GetPinValue+0x8>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_u8GetPinValue+0xa>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	08 f0       	brcs	.+2      	; 0x1784 <DIO_u8GetPinValue+0x1a>
    1782:	70 c0       	rjmp	.+224    	; 0x1864 <DIO_u8GetPinValue+0xfa>
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	08 f0       	brcs	.+2      	; 0x178c <DIO_u8GetPinValue+0x22>
    178a:	6c c0       	rjmp	.+216    	; 0x1864 <DIO_u8GetPinValue+0xfa>
	{
		switch (copy_u8PortId)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3d 83       	std	Y+5, r19	; 0x05
    1794:	2c 83       	std	Y+4, r18	; 0x04
    1796:	4c 81       	ldd	r20, Y+4	; 0x04
    1798:	5d 81       	ldd	r21, Y+5	; 0x05
    179a:	41 30       	cpi	r20, 0x01	; 1
    179c:	51 05       	cpc	r21, r1
    179e:	49 f1       	breq	.+82     	; 0x17f2 <DIO_u8GetPinValue+0x88>
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	91 05       	cpc	r25, r1
    17a8:	34 f4       	brge	.+12     	; 0x17b6 <DIO_u8GetPinValue+0x4c>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	21 15       	cp	r18, r1
    17b0:	31 05       	cpc	r19, r1
    17b2:	61 f0       	breq	.+24     	; 0x17cc <DIO_u8GetPinValue+0x62>
    17b4:	57 c0       	rjmp	.+174    	; 0x1864 <DIO_u8GetPinValue+0xfa>
    17b6:	4c 81       	ldd	r20, Y+4	; 0x04
    17b8:	5d 81       	ldd	r21, Y+5	; 0x05
    17ba:	42 30       	cpi	r20, 0x02	; 2
    17bc:	51 05       	cpc	r21, r1
    17be:	61 f1       	breq	.+88     	; 0x1818 <DIO_u8GetPinValue+0xae>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	d1 f1       	breq	.+116    	; 0x183e <DIO_u8GetPinValue+0xd4>
    17ca:	4c c0       	rjmp	.+152    	; 0x1864 <DIO_u8GetPinValue+0xfa>
		{
			case DIO_PORTA:
				return GET_BIT(PINA_REG,copy_u8PinId);
    17cc:	e9 e3       	ldi	r30, 0x39	; 57
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_u8GetPinValue+0x7a>
    17e0:	55 95       	asr	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_u8GetPinValue+0x76>
    17e8:	ca 01       	movw	r24, r20
    17ea:	58 2f       	mov	r21, r24
    17ec:	51 70       	andi	r21, 0x01	; 1
    17ee:	5b 83       	std	Y+3, r21	; 0x03
    17f0:	3a c0       	rjmp	.+116    	; 0x1866 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTB:
				return GET_BIT(PINB_REG,copy_u8PinId);
    17f2:	e6 e3       	ldi	r30, 0x36	; 54
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a9 01       	movw	r20, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8GetPinValue+0xa0>
    1806:	55 95       	asr	r21
    1808:	47 95       	ror	r20
    180a:	8a 95       	dec	r24
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_u8GetPinValue+0x9c>
    180e:	ca 01       	movw	r24, r20
    1810:	58 2f       	mov	r21, r24
    1812:	51 70       	andi	r21, 0x01	; 1
    1814:	5b 83       	std	Y+3, r21	; 0x03
    1816:	27 c0       	rjmp	.+78     	; 0x1866 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTC:
				return GET_BIT(PINC_REG,copy_u8PinId);
    1818:	e3 e3       	ldi	r30, 0x33	; 51
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a9 01       	movw	r20, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_u8GetPinValue+0xc6>
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_u8GetPinValue+0xc2>
    1834:	ca 01       	movw	r24, r20
    1836:	58 2f       	mov	r21, r24
    1838:	51 70       	andi	r21, 0x01	; 1
    183a:	5b 83       	std	Y+3, r21	; 0x03
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTD:
				return GET_BIT(PIND_REG,copy_u8PinId);
    183e:	e0 e3       	ldi	r30, 0x30	; 48
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_u8GetPinValue+0xec>
    1852:	55 95       	asr	r21
    1854:	47 95       	ror	r20
    1856:	8a 95       	dec	r24
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_u8GetPinValue+0xe8>
    185a:	ca 01       	movw	r24, r20
    185c:	58 2f       	mov	r21, r24
    185e:	51 70       	andi	r21, 0x01	; 1
    1860:	5b 83       	std	Y+3, r21	; 0x03
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <DIO_u8GetPinValue+0xfc>
    1864:	02 c0       	rjmp	.+4      	; 0x186a <DIO_u8GetPinValue+0x100>
	}
	else
	{
		//return Error State
	}
}
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	8e 83       	std	Y+6, r24	; 0x06
    186a:	8e 81       	ldd	r24, Y+6	; 0x06
    186c:	26 96       	adiw	r28, 0x06	; 6
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <DIO_voidTogglePinValue+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_voidTogglePinValue+0x8>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <DIO_voidTogglePinValue+0x18>
    1894:	72 c0       	rjmp	.+228    	; 0x197a <DIO_voidTogglePinValue+0xfc>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	08 f0       	brcs	.+2      	; 0x189e <DIO_voidTogglePinValue+0x20>
    189c:	6e c0       	rjmp	.+220    	; 0x197a <DIO_voidTogglePinValue+0xfc>
	{
		switch (copy_u8PortId)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	49 f1       	breq	.+82     	; 0x1904 <DIO_voidTogglePinValue+0x86>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <DIO_voidTogglePinValue+0x48>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <DIO_voidTogglePinValue+0x5e>
    18c4:	5a c0       	rjmp	.+180    	; 0x197a <DIO_voidTogglePinValue+0xfc>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	71 f1       	breq	.+92     	; 0x192c <DIO_voidTogglePinValue+0xae>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	e9 f1       	breq	.+122    	; 0x1954 <DIO_voidTogglePinValue+0xd6>
    18da:	4f c0       	rjmp	.+158    	; 0x197a <DIO_voidTogglePinValue+0xfc>
		{
			case DIO_PORTA:
				TOG_BIT(PORTA_REG,copy_u8PinId);
    18dc:	ab e3       	ldi	r26, 0x3B	; 59
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_voidTogglePinValue+0x7c>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_voidTogglePinValue+0x78>
    18fe:	84 27       	eor	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	3b c0       	rjmp	.+118    	; 0x197a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTB:
				TOG_BIT(PORTB_REG,copy_u8PinId);
    1904:	a8 e3       	ldi	r26, 0x38	; 56
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e8 e3       	ldi	r30, 0x38	; 56
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_voidTogglePinValue+0xa4>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <DIO_voidTogglePinValue+0xa0>
    1926:	84 27       	eor	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	27 c0       	rjmp	.+78     	; 0x197a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTC:
				TOG_BIT(PORTC_REG,copy_u8PinId);
    192c:	a5 e3       	ldi	r26, 0x35	; 53
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e5 e3       	ldi	r30, 0x35	; 53
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <DIO_voidTogglePinValue+0xcc>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <DIO_voidTogglePinValue+0xc8>
    194e:	84 27       	eor	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	13 c0       	rjmp	.+38     	; 0x197a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTD:
				TOG_BIT(PORTD_REG,copy_u8PinId);
    1954:	a2 e3       	ldi	r26, 0x32	; 50
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e2 e3       	ldi	r30, 0x32	; 50
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_voidTogglePinValue+0xf4>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_voidTogglePinValue+0xf0>
    1976:	84 27       	eor	r24, r20
    1978:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <DIO_voidActivatePinInPullUpResistance>:

void DIO_voidActivatePinInPullUpResistance (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <DIO_voidActivatePinInPullUpResistance+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <DIO_voidActivatePinInPullUpResistance+0x8>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	84 30       	cpi	r24, 0x04	; 4
    199c:	08 f0       	brcs	.+2      	; 0x19a0 <DIO_voidActivatePinInPullUpResistance+0x18>
    199e:	72 c0       	rjmp	.+228    	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <DIO_voidActivatePinInPullUpResistance+0x20>
    19a6:	6e c0       	rjmp	.+220    	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
	{
		switch (copy_u8PortId)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3c 83       	std	Y+4, r19	; 0x04
    19b0:	2b 83       	std	Y+3, r18	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	49 f1       	breq	.+82     	; 0x1a0e <DIO_voidActivatePinInPullUpResistance+0x86>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_voidActivatePinInPullUpResistance+0x48>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_voidActivatePinInPullUpResistance+0x5e>
    19ce:	5a c0       	rjmp	.+180    	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	71 f1       	breq	.+92     	; 0x1a36 <DIO_voidActivatePinInPullUpResistance+0xae>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	e9 f1       	breq	.+122    	; 0x1a5e <DIO_voidActivatePinInPullUpResistance+0xd6>
    19e4:	4f c0       	rjmp	.+158    	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
				SET_BIT(PORTA_REG,copy_u8PinId);
    19e6:	ab e3       	ldi	r26, 0x3B	; 59
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	eb e3       	ldi	r30, 0x3B	; 59
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_voidActivatePinInPullUpResistance+0x7c>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_voidActivatePinInPullUpResistance+0x78>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	3b c0       	rjmp	.+118    	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_REG,copy_u8PinId);
    1a0e:	a8 e3       	ldi	r26, 0x38	; 56
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e8 e3       	ldi	r30, 0x38	; 56
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_voidActivatePinInPullUpResistance+0xa4>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_voidActivatePinInPullUpResistance+0xa0>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	27 c0       	rjmp	.+78     	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_REG,copy_u8PinId);
    1a36:	a5 e3       	ldi	r26, 0x35	; 53
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e3       	ldi	r30, 0x35	; 53
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_voidActivatePinInPullUpResistance+0xcc>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_voidActivatePinInPullUpResistance+0xc8>
    1a58:	84 2b       	or	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	13 c0       	rjmp	.+38     	; 0x1a84 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_REG,copy_u8PinId);
    1a5e:	a2 e3       	ldi	r26, 0x32	; 50
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e2 e3       	ldi	r30, 0x32	; 50
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_voidActivatePinInPullUpResistance+0xf4>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_voidActivatePinInPullUpResistance+0xf0>
    1a80:	84 2b       	or	r24, r20
    1a82:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <DIO_voidSetPortDirection>:

				/*************** PORTS API's ***************/

void DIO_voidSetPortDirection (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	2c 97       	sbiw	r28, 0x0c	; 12
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortDirection <= DIO_PORT_OUTPUT))
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <DIO_voidSetPortDirection+0x20>
    1ab0:	83 c0       	rjmp	.+262    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	82 30       	cpi	r24, 0x02	; 2
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <DIO_voidSetPortDirection+0x28>
    1ab8:	7f c0       	rjmp	.+254    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
	{
		switch (copy_u8PortId)
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3c 87       	std	Y+12, r19	; 0x0c
    1ac2:	2b 87       	std	Y+11, r18	; 0x0b
    1ac4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	71 f1       	breq	.+92     	; 0x1b2a <DIO_voidSetPortDirection+0x98>
    1ace:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ad0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ad2:	22 30       	cpi	r18, 0x02	; 2
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <DIO_voidSetPortDirection+0x50>
    1ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ada:	9c 85       	ldd	r25, Y+12	; 0x0c
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	69 f0       	breq	.+26     	; 0x1afa <DIO_voidSetPortDirection+0x68>
    1ae0:	6b c0       	rjmp	.+214    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
    1ae2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ae4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	b9 f1       	breq	.+110    	; 0x1b5a <DIO_voidSetPortDirection+0xc8>
    1aec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aee:	9c 85       	ldd	r25, Y+12	; 0x0c
    1af0:	83 30       	cpi	r24, 0x03	; 3
    1af2:	91 05       	cpc	r25, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <DIO_voidSetPortDirection+0x66>
    1af6:	49 c0       	rjmp	.+146    	; 0x1b8a <DIO_voidSetPortDirection+0xf8>
    1af8:	5f c0       	rjmp	.+190    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
		{
			case DIO_PORTA:
				switch (copy_u8PortDirection) {
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	3a 87       	std	Y+10, r19	; 0x0a
    1b02:	29 87       	std	Y+9, r18	; 0x09
    1b04:	89 85       	ldd	r24, Y+9	; 0x09
    1b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <DIO_voidSetPortDirection+0x86>
    1b0c:	29 85       	ldd	r18, Y+9	; 0x09
    1b0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b10:	21 30       	cpi	r18, 0x01	; 1
    1b12:	31 05       	cpc	r19, r1
    1b14:	29 f0       	breq	.+10     	; 0x1b20 <DIO_voidSetPortDirection+0x8e>
    1b16:	50 c0       	rjmp	.+160    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRA_REG = 0x00;
    1b18:	ea e3       	ldi	r30, 0x3A	; 58
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	10 82       	st	Z, r1
    1b1e:	4c c0       	rjmp	.+152    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRA_REG = 0xFF;
    1b20:	ea e3       	ldi	r30, 0x3A	; 58
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	80 83       	st	Z, r24
    1b28:	47 c0       	rjmp	.+142    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PortDirection) {
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	38 87       	std	Y+8, r19	; 0x08
    1b32:	2f 83       	std	Y+7, r18	; 0x07
    1b34:	8f 81       	ldd	r24, Y+7	; 0x07
    1b36:	98 85       	ldd	r25, Y+8	; 0x08
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <DIO_voidSetPortDirection+0xb6>
    1b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b3e:	38 85       	ldd	r19, Y+8	; 0x08
    1b40:	21 30       	cpi	r18, 0x01	; 1
    1b42:	31 05       	cpc	r19, r1
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <DIO_voidSetPortDirection+0xbe>
    1b46:	38 c0       	rjmp	.+112    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRB_REG = 0x00;
    1b48:	e7 e3       	ldi	r30, 0x37	; 55
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	10 82       	st	Z, r1
    1b4e:	34 c0       	rjmp	.+104    	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRB_REG = 0xFF;
    1b50:	e7 e3       	ldi	r30, 0x37	; 55
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	80 83       	st	Z, r24
    1b58:	2f c0       	rjmp	.+94     	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PortDirection) {
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3e 83       	std	Y+6, r19	; 0x06
    1b62:	2d 83       	std	Y+5, r18	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	31 f0       	breq	.+12     	; 0x1b78 <DIO_voidSetPortDirection+0xe6>
    1b6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b70:	21 30       	cpi	r18, 0x01	; 1
    1b72:	31 05       	cpc	r19, r1
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <DIO_voidSetPortDirection+0xee>
    1b76:	20 c0       	rjmp	.+64     	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRC_REG = 0x00;
    1b78:	e4 e3       	ldi	r30, 0x34	; 52
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	10 82       	st	Z, r1
    1b7e:	1c c0       	rjmp	.+56     	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRC_REG = 0xFF;
    1b80:	e4 e3       	ldi	r30, 0x34	; 52
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	8f ef       	ldi	r24, 0xFF	; 255
    1b86:	80 83       	st	Z, r24
    1b88:	17 c0       	rjmp	.+46     	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PortDirection) {
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	3c 83       	std	Y+4, r19	; 0x04
    1b92:	2b 83       	std	Y+3, r18	; 0x03
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	31 f0       	breq	.+12     	; 0x1ba8 <DIO_voidSetPortDirection+0x116>
    1b9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba0:	21 30       	cpi	r18, 0x01	; 1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <DIO_voidSetPortDirection+0x11e>
    1ba6:	08 c0       	rjmp	.+16     	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRD_REG = 0x00;
    1ba8:	e1 e3       	ldi	r30, 0x31	; 49
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	10 82       	st	Z, r1
    1bae:	04 c0       	rjmp	.+8      	; 0x1bb8 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRD_REG = 0xFF;
    1bb0:	e1 e3       	ldi	r30, 0x31	; 49
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1bb8:	2c 96       	adiw	r28, 0x0c	; 12
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <DIO_voidSetPortValue+0x6>
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <DIO_voidSetPortValue+0x8>
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortValue <= 255))
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	90 f5       	brcc	.+100    	; 0x1c44 <DIO_voidSetPortValue+0x7a>
	{
		switch (copy_u8PortId)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3c 83       	std	Y+4, r19	; 0x04
    1be8:	2b 83       	std	Y+3, r18	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	d1 f0       	breq	.+52     	; 0x1c28 <DIO_voidSetPortValue+0x5e>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <DIO_voidSetPortValue+0x3e>
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <DIO_voidSetPortValue+0x54>
    1c06:	1e c0       	rjmp	.+60     	; 0x1c44 <DIO_voidSetPortValue+0x7a>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	81 f0       	breq	.+32     	; 0x1c32 <DIO_voidSetPortValue+0x68>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	91 05       	cpc	r25, r1
    1c1a:	81 f0       	breq	.+32     	; 0x1c3c <DIO_voidSetPortValue+0x72>
    1c1c:	13 c0       	rjmp	.+38     	; 0x1c44 <DIO_voidSetPortValue+0x7a>
		{
			case DIO_PORTA:
				PORTA_REG = copy_u8PortValue;
    1c1e:	eb e3       	ldi	r30, 0x3B	; 59
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	80 83       	st	Z, r24
    1c26:	0e c0       	rjmp	.+28     	; 0x1c44 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				PORTB_REG = copy_u8PortValue;
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	80 83       	st	Z, r24
    1c30:	09 c0       	rjmp	.+18     	; 0x1c44 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				PORTC_REG = copy_u8PortValue;
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	80 83       	st	Z, r24
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				PORTD_REG = copy_u8PortValue;
    1c3c:	e2 e3       	ldi	r30, 0x32	; 50
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <DIO_voidGetPortValue>:

void DIO_voidGetPortValue (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <DIO_voidGetPortValue+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <DIO_voidGetPortValue+0x8>
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	7b 83       	std	Y+3, r23	; 0x03
    1c64:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_pu8PortValue != NULL))
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <DIO_voidGetPortValue+0x1c>
    1c6c:	3e c0       	rjmp	.+124    	; 0x1cea <DIO_voidGetPortValue+0x98>
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	d1 f1       	breq	.+116    	; 0x1cea <DIO_voidGetPortValue+0x98>
	{
		switch (copy_u8PortId)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3d 83       	std	Y+5, r19	; 0x05
    1c7e:	2c 83       	std	Y+4, r18	; 0x04
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	e1 f0       	breq	.+56     	; 0x1cc2 <DIO_voidGetPortValue+0x70>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <DIO_voidGetPortValue+0x4c>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <DIO_voidGetPortValue+0x62>
    1c9c:	26 c0       	rjmp	.+76     	; 0x1cea <DIO_voidGetPortValue+0x98>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	a1 f0       	breq	.+40     	; 0x1cd0 <DIO_voidGetPortValue+0x7e>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	b1 f0       	breq	.+44     	; 0x1cde <DIO_voidGetPortValue+0x8c>
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <DIO_voidGetPortValue+0x98>
		{
			case DIO_PORTA:
				*copy_pu8PortValue = PINA_REG;
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	ea 81       	ldd	r30, Y+2	; 0x02
    1cbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1cbe:	80 83       	st	Z, r24
    1cc0:	14 c0       	rjmp	.+40     	; 0x1cea <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTB:
				*copy_pu8PortValue = PINB_REG;
    1cc2:	e6 e3       	ldi	r30, 0x36	; 54
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1cca:	fb 81       	ldd	r31, Y+3	; 0x03
    1ccc:	80 83       	st	Z, r24
    1cce:	0d c0       	rjmp	.+26     	; 0x1cea <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTC:
				*copy_pu8PortValue = PINC_REG;
    1cd0:	e3 e3       	ldi	r30, 0x33	; 51
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	80 83       	st	Z, r24
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTD:
				*copy_pu8PortValue = PIND_REG;
    1cde:	e0 e3       	ldi	r30, 0x30	; 48
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce8:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue (u8 copy_u8PortId)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <DIO_voidTogglePortValue+0x6>
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	84 30       	cpi	r24, 0x04	; 4
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <DIO_voidTogglePortValue+0x16>
    1d0e:	3e c0       	rjmp	.+124    	; 0x1d8c <DIO_voidTogglePortValue+0x92>
	{
		switch (copy_u8PortId)
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3b 83       	std	Y+3, r19	; 0x03
    1d18:	2a 83       	std	Y+2, r18	; 0x02
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	e9 f0       	breq	.+58     	; 0x1d5e <DIO_voidTogglePortValue+0x64>
    1d24:	2a 81       	ldd	r18, Y+2	; 0x02
    1d26:	3b 81       	ldd	r19, Y+3	; 0x03
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <DIO_voidTogglePortValue+0x3e>
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <DIO_voidTogglePortValue+0x54>
    1d36:	2a c0       	rjmp	.+84     	; 0x1d8c <DIO_voidTogglePortValue+0x92>
    1d38:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	b1 f0       	breq	.+44     	; 0x1d6e <DIO_voidTogglePortValue+0x74>
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	c9 f0       	breq	.+50     	; 0x1d7e <DIO_voidTogglePortValue+0x84>
    1d4c:	1f c0       	rjmp	.+62     	; 0x1d8c <DIO_voidTogglePortValue+0x92>
		{
			case DIO_PORTA:
				PORTA_REG ^= 0xFF;
    1d4e:	ab e3       	ldi	r26, 0x3B	; 59
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	eb e3       	ldi	r30, 0x3B	; 59
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 95       	com	r24
    1d5a:	8c 93       	st	X, r24
    1d5c:	17 c0       	rjmp	.+46     	; 0x1d8c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTB:
				PORTB_REG ^= 0xFF;
    1d5e:	a8 e3       	ldi	r26, 0x38	; 56
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e8 e3       	ldi	r30, 0x38	; 56
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 95       	com	r24
    1d6a:	8c 93       	st	X, r24
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTC:
				PORTC_REG ^= 0xFF;
    1d6e:	a5 e3       	ldi	r26, 0x35	; 53
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e3       	ldi	r30, 0x35	; 53
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 95       	com	r24
    1d7a:	8c 93       	st	X, r24
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTD:
				PORTD_REG ^= 0xFF;
    1d7e:	a2 e3       	ldi	r26, 0x32	; 50
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e2 e3       	ldi	r30, 0x32	; 50
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 95       	com	r24
    1d8a:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <DIO_voidActivatePortInPullUpResistance>:

void DIO_voidActivatePortInPullUpResistance (u8 copy_u8PortId)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <DIO_voidActivatePortInPullUpResistance+0x6>
    1d9e:	0f 92       	push	r0
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	90 f5       	brcc	.+100    	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
	{
		switch (copy_u8PortId)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3b 83       	std	Y+3, r19	; 0x03
    1db4:	2a 83       	std	Y+2, r18	; 0x02
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	d1 f0       	breq	.+52     	; 0x1df4 <DIO_voidActivatePortInPullUpResistance+0x5c>
    1dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <DIO_voidActivatePortInPullUpResistance+0x3c>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	61 f0       	breq	.+24     	; 0x1dea <DIO_voidActivatePortInPullUpResistance+0x52>
    1dd2:	1e c0       	rjmp	.+60     	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
    1dd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	81 f0       	breq	.+32     	; 0x1dfe <DIO_voidActivatePortInPullUpResistance+0x66>
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	83 30       	cpi	r24, 0x03	; 3
    1de4:	91 05       	cpc	r25, r1
    1de6:	81 f0       	breq	.+32     	; 0x1e08 <DIO_voidActivatePortInPullUpResistance+0x70>
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
		{
			case DIO_PORTA:
				PORTA_REG = 0xFF;
    1dea:	eb e3       	ldi	r30, 0x3B	; 59
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	80 83       	st	Z, r24
    1df2:	0e c0       	rjmp	.+28     	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTB:
				PORTB_REG = 0xFF;
    1df4:	e8 e3       	ldi	r30, 0x38	; 56
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 83       	st	Z, r24
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTC:
				PORTC_REG = 0xFF;
    1dfe:	e5 e3       	ldi	r30, 0x35	; 53
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	80 83       	st	Z, r24
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTD:
				PORTD_REG = 0xFF;
    1e08:	e2 e3       	ldi	r30, 0x32	; 50
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <ADC_voidInit>:





void ADC_voidInit(){
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	
	/*Reference Selections for ADC : AVCC with external capacitor at AREF pin*/
	 CLR_BIT(ADMUX_REG,7) ; 
    1e24:	a7 e2       	ldi	r26, 0x27	; 39
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e7 e2       	ldi	r30, 0x27	; 39
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	8c 93       	st	X, r24
	 SET_BIT(ADMUX_REG,6) ; 
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8c 93       	st	X, r24
	 
	/*select prescaler */
	 
	 ADCSRA_REG&=0b11111000 ; 
    1e40:	a6 e2       	ldi	r26, 0x26	; 38
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 7f       	andi	r24, 0xF8	; 248
    1e4c:	8c 93       	st	X, r24
	 ADCSRA_REG|=ADC_PRESCALER ; 
    1e4e:	a6 e2       	ldi	r26, 0x26	; 38
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	87 60       	ori	r24, 0x07	; 7
    1e5a:	8c 93       	st	X, r24
	
	
	/* ENABLE ADC */
	
	SET_BIT(ADCSRA_REG,7) ; 
    1e5c:	a6 e2       	ldi	r26, 0x26	; 38
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e6 e2       	ldi	r30, 0x26	; 38
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	80 68       	ori	r24, 0x80	; 128
    1e68:	8c 93       	st	X, r24
	
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <ADC_u16ReadChannel>:

u16 ADC_u16ReadChannel(u8 copy_u8channel){
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <ADC_u16ReadChannel+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	
	  /* select channel */
	  ADMUX_REG &=0b11100000 ; 
    1e7c:	a7 e2       	ldi	r26, 0x27	; 39
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e7 e2       	ldi	r30, 0x27	; 39
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	80 7e       	andi	r24, 0xE0	; 224
    1e88:	8c 93       	st	X, r24
	  ADMUX_REG |=copy_u8channel ; 
    1e8a:	a7 e2       	ldi	r26, 0x27	; 39
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e7 e2       	ldi	r30, 0x27	; 39
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	90 81       	ld	r25, Z
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	89 2b       	or	r24, r25
    1e98:	8c 93       	st	X, r24
	  /* start conversion */
	  SET_BIT(ADCSRA_REG,6) ; 
    1e9a:	a6 e2       	ldi	r26, 0x26	; 38
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e6 e2       	ldi	r30, 0x26	; 38
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 64       	ori	r24, 0x40	; 64
    1ea6:	8c 93       	st	X, r24
	  
	  while(GET_BIT(ADCSRA_REG,4) == 0) {}
    1ea8:	e6 e2       	ldi	r30, 0x26	; 38
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
	  
	  SET_BIT(ADCSRA_REG,4) ; // CLR FLAG 
    1eae:	a6 e2       	ldi	r26, 0x26	; 38
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e6 e2       	ldi	r30, 0x26	; 38
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 61       	ori	r24, 0x10	; 16
    1eba:	8c 93       	st	X, r24
	  
	  return  ADC_REG ; 
    1ebc:	e4 e2       	ldi	r30, 0x24	; 36
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01

}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit (void)
{
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	cc 54       	subi	r28, 0x4C	; 76
    1edc:	d0 40       	sbci	r29, 0x00	; 0
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
	/* Initialized LCD pins as Output Pins */
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	64 e0       	ldi	r22, 0x04	; 4
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	65 e0       	ldi	r22, 0x05	; 5
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	66 e0       	ldi	r22, 0x06	; 6
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	67 e0       	ldi	r22, 0x07	; 7
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	63 e0       	ldi	r22, 0x03	; 3
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	e7 5b       	subi	r30, 0xB7	; 183
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	ac e0       	ldi	r26, 0x0C	; 12
    1f3a:	b2 e4       	ldi	r27, 0x42	; 66
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f44:	8e 01       	movw	r16, r28
    1f46:	0b 5b       	subi	r16, 0xBB	; 187
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e7 5b       	subi	r30, 0xB7	; 183
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	55 e4       	ldi	r21, 0x45	; 69
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	f8 01       	movw	r30, r16
    1f6a:	80 83       	st	Z, r24
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	a2 83       	std	Z+2, r26	; 0x02
    1f70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f72:	fe 01       	movw	r30, r28
    1f74:	eb 5b       	subi	r30, 0xBB	; 187
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	44 f4       	brge	.+16     	; 0x1fa0 <LCD_voidInit+0xd2>
		__ticks = 1;
    1f90:	fe 01       	movw	r30, r28
    1f92:	ed 5b       	subi	r30, 0xBD	; 189
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	64 c0       	rjmp	.+200    	; 0x2068 <LCD_voidInit+0x19a>
	else if (__tmp > 65535)
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	eb 5b       	subi	r30, 0xBB	; 187
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	0c f0       	brlt	.+2      	; 0x1fc0 <LCD_voidInit+0xf2>
    1fbe:	43 c0       	rjmp	.+134    	; 0x2046 <LCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e7 5b       	subi	r30, 0xB7	; 183
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8e 01       	movw	r16, r28
    1fe0:	0d 5b       	subi	r16, 0xBD	; 189
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	1f c0       	rjmp	.+62     	; 0x2036 <LCD_voidInit+0x168>
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ef 5b       	subi	r30, 0xBF	; 191
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 e9       	ldi	r24, 0x90	; 144
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2006:	fe 01       	movw	r30, r28
    2008:	ef 5b       	subi	r30, 0xBF	; 191
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_voidInit+0x142>
    2014:	fe 01       	movw	r30, r28
    2016:	ef 5b       	subi	r30, 0xBF	; 191
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201e:	de 01       	movw	r26, r28
    2020:	ad 5b       	subi	r26, 0xBD	; 189
    2022:	bf 4f       	sbci	r27, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	ed 5b       	subi	r30, 0xBD	; 189
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	9c 93       	st	X, r25
    2034:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	fe 01       	movw	r30, r28
    2038:	ed 5b       	subi	r30, 0xBD	; 189
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	d1 f6       	brne	.-76     	; 0x1ff8 <LCD_voidInit+0x12a>
    2044:	24 c0       	rjmp	.+72     	; 0x208e <LCD_voidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	8e 01       	movw	r16, r28
    2048:	0d 5b       	subi	r16, 0xBD	; 189
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	eb 5b       	subi	r30, 0xBB	; 187
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	f8 01       	movw	r30, r16
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	fe 01       	movw	r30, r28
    206a:	ed 5b       	subi	r30, 0xBD	; 189
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	fe 01       	movw	r30, r28
    2074:	ff 96       	adiw	r30, 0x3f	; 63
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	fe 01       	movw	r30, r28
    207c:	ff 96       	adiw	r30, 0x3f	; 63
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_voidInit+0x1b4>
    2086:	fe 01       	movw	r30, r28
    2088:	ff 96       	adiw	r30, 0x3f	; 63
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
	_delay_ms(35);

	/* N (# of lines) - F (font) */
	/* Function Set (2 Lines, 5*7 font) */
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	62 e0       	ldi	r22, 0x02	; 2
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	#if LCD_MODE == _4_BIT_MODE

	PRV_voidWriteHalfPort(0b0010);
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    20a8:	0e 94 0b 14 	call	0x2816	; 0x2816 <PRV_voidEnableTriggerWrite>
	LCD_voidSendCommand(0b00101000); //0b0010NFXX
    20ac:	88 e2       	ldi	r24, 0x28	; 40
    20ae:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a4 e3       	ldi	r26, 0x34	; 52
    20b8:	b2 e4       	ldi	r27, 0x42	; 66
    20ba:	8b af       	std	Y+59, r24	; 0x3b
    20bc:	9c af       	std	Y+60, r25	; 0x3c
    20be:	ad af       	std	Y+61, r26	; 0x3d
    20c0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c2:	6b ad       	ldd	r22, Y+59	; 0x3b
    20c4:	7c ad       	ldd	r23, Y+60	; 0x3c
    20c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ca:	2b ea       	ldi	r18, 0xAB	; 171
    20cc:	3a ea       	ldi	r19, 0xAA	; 170
    20ce:	4a ea       	ldi	r20, 0xAA	; 170
    20d0:	50 e4       	ldi	r21, 0x40	; 64
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8f ab       	std	Y+55, r24	; 0x37
    20dc:	98 af       	std	Y+56, r25	; 0x38
    20de:	a9 af       	std	Y+57, r26	; 0x39
    20e0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    20e2:	6f a9       	ldd	r22, Y+55	; 0x37
    20e4:	78 ad       	ldd	r23, Y+56	; 0x38
    20e6:	89 ad       	ldd	r24, Y+57	; 0x39
    20e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	1c f4       	brge	.+6      	; 0x2100 <LCD_voidInit+0x232>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	8e ab       	std	Y+54, r24	; 0x36
    20fe:	91 c0       	rjmp	.+290    	; 0x2222 <LCD_voidInit+0x354>
	else if (__tmp > 255)
    2100:	6f a9       	ldd	r22, Y+55	; 0x37
    2102:	78 ad       	ldd	r23, Y+56	; 0x38
    2104:	89 ad       	ldd	r24, Y+57	; 0x39
    2106:	9a ad       	ldd	r25, Y+58	; 0x3a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	53 e4       	ldi	r21, 0x43	; 67
    2110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <LCD_voidInit+0x24c>
    2118:	7b c0       	rjmp	.+246    	; 0x2210 <LCD_voidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    211a:	6b ad       	ldd	r22, Y+59	; 0x3b
    211c:	7c ad       	ldd	r23, Y+60	; 0x3c
    211e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2120:	9e ad       	ldd	r25, Y+62	; 0x3e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a e7       	ldi	r20, 0x7A	; 122
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8a ab       	std	Y+50, r24	; 0x32
    2134:	9b ab       	std	Y+51, r25	; 0x33
    2136:	ac ab       	std	Y+52, r26	; 0x34
    2138:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6a a9       	ldd	r22, Y+50	; 0x32
    213c:	7b a9       	ldd	r23, Y+51	; 0x33
    213e:	8c a9       	ldd	r24, Y+52	; 0x34
    2140:	9d a9       	ldd	r25, Y+53	; 0x35
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8e a7       	std	Y+46, r24	; 0x2e
    2154:	9f a7       	std	Y+47, r25	; 0x2f
    2156:	a8 ab       	std	Y+48, r26	; 0x30
    2158:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    215a:	6e a5       	ldd	r22, Y+46	; 0x2e
    215c:	7f a5       	ldd	r23, Y+47	; 0x2f
    215e:	88 a9       	ldd	r24, Y+48	; 0x30
    2160:	99 a9       	ldd	r25, Y+49	; 0x31
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_voidInit+0x2ae>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9d a7       	std	Y+45, r25	; 0x2d
    2178:	8c a7       	std	Y+44, r24	; 0x2c
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    217c:	6e a5       	ldd	r22, Y+46	; 0x2e
    217e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2180:	88 a9       	ldd	r24, Y+48	; 0x30
    2182:	99 a9       	ldd	r25, Y+49	; 0x31
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6a a9       	ldd	r22, Y+50	; 0x32
    2196:	7b a9       	ldd	r23, Y+51	; 0x33
    2198:	8c a9       	ldd	r24, Y+52	; 0x34
    219a:	9d a9       	ldd	r25, Y+53	; 0x35
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9d a7       	std	Y+45, r25	; 0x2d
    21ba:	8c a7       	std	Y+44, r24	; 0x2c
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LCD_voidInit+0x30e>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9b a7       	std	Y+43, r25	; 0x2b
    21c4:	8a a7       	std	Y+42, r24	; 0x2a
    21c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    21c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_voidInit+0x2fc>
    21ce:	9b a7       	std	Y+43, r25	; 0x2b
    21d0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    21d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9d a7       	std	Y+45, r25	; 0x2d
    21da:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    21de:	9d a5       	ldd	r25, Y+45	; 0x2d
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LCD_voidInit+0x2f0>
    21e4:	24 c0       	rjmp	.+72     	; 0x222e <LCD_voidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    21e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    21ea:	88 a9       	ldd	r24, Y+48	; 0x30
    21ec:	99 a9       	ldd	r25, Y+49	; 0x31
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9d a7       	std	Y+45, r25	; 0x2d
    21f8:	8c a7       	std	Y+44, r24	; 0x2c
    21fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    21fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    21fe:	99 a7       	std	Y+41, r25	; 0x29
    2200:	88 a7       	std	Y+40, r24	; 0x28
    2202:	88 a5       	ldd	r24, Y+40	; 0x28
    2204:	99 a5       	ldd	r25, Y+41	; 0x29
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_voidInit+0x338>
    220a:	99 a7       	std	Y+41, r25	; 0x29
    220c:	88 a7       	std	Y+40, r24	; 0x28
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_voidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2210:	6f a9       	ldd	r22, Y+55	; 0x37
    2212:	78 ad       	ldd	r23, Y+56	; 0x38
    2214:	89 ad       	ldd	r24, Y+57	; 0x39
    2216:	9a ad       	ldd	r25, Y+58	; 0x3a
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8e ab       	std	Y+54, r24	; 0x36
    2222:	8e a9       	ldd	r24, Y+54	; 0x36
    2224:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2226:	8f a1       	ldd	r24, Y+39	; 0x27
    2228:	8a 95       	dec	r24
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_voidInit+0x35a>
    222c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(45);

	/* D (display ON/OFF) - C (cursor ON/OFF) - B (blink cursor ON/OFF) */
	/* Display On/Off Control (Display on, Cursor on, Blink on) */
	LCD_voidSendCommand(0b00001100); //ob00001DCB
    222e:	8c e0       	ldi	r24, 0x0C	; 12
    2230:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a4 e3       	ldi	r26, 0x34	; 52
    223a:	b2 e4       	ldi	r27, 0x42	; 66
    223c:	8b a3       	std	Y+35, r24	; 0x23
    223e:	9c a3       	std	Y+36, r25	; 0x24
    2240:	ad a3       	std	Y+37, r26	; 0x25
    2242:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	2b ea       	ldi	r18, 0xAB	; 171
    224e:	3a ea       	ldi	r19, 0xAA	; 170
    2250:	4a ea       	ldi	r20, 0xAA	; 170
    2252:	50 e4       	ldi	r21, 0x40	; 64
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8f 8f       	std	Y+31, r24	; 0x1f
    225e:	98 a3       	std	Y+32, r25	; 0x20
    2260:	a9 a3       	std	Y+33, r26	; 0x21
    2262:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2264:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2266:	78 a1       	ldd	r23, Y+32	; 0x20
    2268:	89 a1       	ldd	r24, Y+33	; 0x21
    226a:	9a a1       	ldd	r25, Y+34	; 0x22
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	1c f4       	brge	.+6      	; 0x2282 <LCD_voidInit+0x3b4>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	8e 8f       	std	Y+30, r24	; 0x1e
    2280:	91 c0       	rjmp	.+290    	; 0x23a4 <LCD_voidInit+0x4d6>
	else if (__tmp > 255)
    2282:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2284:	78 a1       	ldd	r23, Y+32	; 0x20
    2286:	89 a1       	ldd	r24, Y+33	; 0x21
    2288:	9a a1       	ldd	r25, Y+34	; 0x22
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	53 e4       	ldi	r21, 0x43	; 67
    2292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	0c f0       	brlt	.+2      	; 0x229c <LCD_voidInit+0x3ce>
    229a:	7b c0       	rjmp	.+246    	; 0x2392 <LCD_voidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    229c:	6b a1       	ldd	r22, Y+35	; 0x23
    229e:	7c a1       	ldd	r23, Y+36	; 0x24
    22a0:	8d a1       	ldd	r24, Y+37	; 0x25
    22a2:	9e a1       	ldd	r25, Y+38	; 0x26
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8a 8f       	std	Y+26, r24	; 0x1a
    22b6:	9b 8f       	std	Y+27, r25	; 0x1b
    22b8:	ac 8f       	std	Y+28, r26	; 0x1c
    22ba:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22be:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e7       	ldi	r20, 0x7A	; 122
    22ca:	55 e4       	ldi	r21, 0x45	; 69
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8e 8b       	std	Y+22, r24	; 0x16
    22d6:	9f 8b       	std	Y+23, r25	; 0x17
    22d8:	a8 8f       	std	Y+24, r26	; 0x18
    22da:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    22dc:	6e 89       	ldd	r22, Y+22	; 0x16
    22de:	7f 89       	ldd	r23, Y+23	; 0x17
    22e0:	88 8d       	ldd	r24, Y+24	; 0x18
    22e2:	99 8d       	ldd	r25, Y+25	; 0x19
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <LCD_voidInit+0x430>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9d 8b       	std	Y+21, r25	; 0x15
    22fa:	8c 8b       	std	Y+20, r24	; 0x14
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <LCD_voidInit+0x4ae>
	else if (__tmp > 65535)
    22fe:	6e 89       	ldd	r22, Y+22	; 0x16
    2300:	7f 89       	ldd	r23, Y+23	; 0x17
    2302:	88 8d       	ldd	r24, Y+24	; 0x18
    2304:	99 8d       	ldd	r25, Y+25	; 0x19
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <LCD_voidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2318:	7b 8d       	ldd	r23, Y+27	; 0x1b
    231a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    231c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9d 8b       	std	Y+21, r25	; 0x15
    233c:	8c 8b       	std	Y+20, r24	; 0x14
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_voidInit+0x490>
    2340:	80 e9       	ldi	r24, 0x90	; 144
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	9b 8b       	std	Y+19, r25	; 0x13
    2346:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2348:	8a 89       	ldd	r24, Y+18	; 0x12
    234a:	9b 89       	ldd	r25, Y+19	; 0x13
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_voidInit+0x47e>
    2350:	9b 8b       	std	Y+19, r25	; 0x13
    2352:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8c 89       	ldd	r24, Y+20	; 0x14
    2356:	9d 89       	ldd	r25, Y+21	; 0x15
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9d 8b       	std	Y+21, r25	; 0x15
    235c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8c 89       	ldd	r24, Y+20	; 0x14
    2360:	9d 89       	ldd	r25, Y+21	; 0x15
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_voidInit+0x472>
    2366:	24 c0       	rjmp	.+72     	; 0x23b0 <LCD_voidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6e 89       	ldd	r22, Y+22	; 0x16
    236a:	7f 89       	ldd	r23, Y+23	; 0x17
    236c:	88 8d       	ldd	r24, Y+24	; 0x18
    236e:	99 8d       	ldd	r25, Y+25	; 0x19
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9d 8b       	std	Y+21, r25	; 0x15
    237a:	8c 8b       	std	Y+20, r24	; 0x14
    237c:	8c 89       	ldd	r24, Y+20	; 0x14
    237e:	9d 89       	ldd	r25, Y+21	; 0x15
    2380:	99 8b       	std	Y+17, r25	; 0x11
    2382:	88 8b       	std	Y+16, r24	; 0x10
    2384:	88 89       	ldd	r24, Y+16	; 0x10
    2386:	99 89       	ldd	r25, Y+17	; 0x11
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_voidInit+0x4ba>
    238c:	99 8b       	std	Y+17, r25	; 0x11
    238e:	88 8b       	std	Y+16, r24	; 0x10
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <LCD_voidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2392:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2394:	78 a1       	ldd	r23, Y+32	; 0x20
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8e 8f       	std	Y+30, r24	; 0x1e
    23a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23aa:	8a 95       	dec	r24
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_voidInit+0x4dc>
    23ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	/* Display Clear */
	LCD_voidSendCommand(0b00000001);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e4       	ldi	r27, 0x40	; 64
    23be:	8b 87       	std	Y+11, r24	; 0x0b
    23c0:	9c 87       	std	Y+12, r25	; 0x0c
    23c2:	ad 87       	std	Y+13, r26	; 0x0d
    23c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a e7       	ldi	r20, 0x7A	; 122
    23d4:	55 e4       	ldi	r21, 0x45	; 69
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8f 83       	std	Y+7, r24	; 0x07
    23e0:	98 87       	std	Y+8, r25	; 0x08
    23e2:	a9 87       	std	Y+9, r26	; 0x09
    23e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	2c f4       	brge	.+10     	; 0x2408 <LCD_voidInit+0x53a>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	3f c0       	rjmp	.+126    	; 0x2486 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	4c f5       	brge	.+82     	; 0x2472 <LCD_voidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <LCD_voidInit+0x59a>
    244a:	80 e9       	ldi	r24, 0x90	; 144
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_voidInit+0x588>
    245a:	9c 83       	std	Y+4, r25	; 0x04
    245c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	69 f7       	brne	.-38     	; 0x244a <LCD_voidInit+0x57c>
    2470:	14 c0       	rjmp	.+40     	; 0x249a <LCD_voidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_voidInit+0x5c4>
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* I (increment mode (inc = 1 / dec = 0)) - S (shift) */
	/* Entry Mode Set (Increment on, Shift off) */
	LCD_voidSendCommand(0b00000110); //0b000001IS
    249a:	86 e0       	ldi	r24, 0x06	; 6
    249c:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>

}
    24a0:	c4 5b       	subi	r28, 0xB4	; 180
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar (u8 copy_u8Data)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 1 (data) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	62 e0       	ldi	r22, 0x02	; 2
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data>>4);
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	82 95       	swap	r24
    24dc:	8f 70       	andi	r24, 0x0F	; 15
    24de:	0e 94 db 13 	call	0x27b6	; 0x27b6 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    24e2:	0e 94 0b 14 	call	0x2816	; 0x2816 <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    24ec:	0e 94 0b 14 	call	0x2816	; 0x2816 <PRV_voidEnableTriggerWrite>
}
    24f0:	0f 90       	pop	r0
    24f2:	cf 91       	pop	r28
    24f4:	df 91       	pop	r29
    24f6:	08 95       	ret

000024f8 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 copy_u8cmnd)
{
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	0f 92       	push	r0
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	62 e0       	ldi	r22, 0x02	; 2
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd>>4);
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	82 95       	swap	r24
    251c:	8f 70       	andi	r24, 0x0F	; 15
    251e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    2522:	0e 94 0b 14 	call	0x2816	; 0x2816 <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd);
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	0e 94 db 13 	call	0x27b6	; 0x27b6 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    252c:	0e 94 0b 14 	call	0x2816	; 0x2816 <PRV_voidEnableTriggerWrite>
}
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <LCD_voidDisplayString>:

void LCD_voidDisplayString (u8* copy_pu8String)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <LCD_voidDisplayString+0x6>
    253e:	0f 92       	push	r0
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	9b 83       	std	Y+3, r25	; 0x03
    2546:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_pu8String != NULL) {
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	d9 f0       	breq	.+54     	; 0x2586 <LCD_voidDisplayString+0x4e>
		u8 local_u8i = 0;
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <LCD_voidDisplayString+0x38>
		while(copy_pu8String[local_u8i]!='\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8i]);
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <LCD_voidDisplayChar>
			local_u8i++;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidDisplayString (u8* copy_pu8String)
{
	if (copy_pu8String != NULL) {
		u8 local_u8i = 0;
		while(copy_pu8String[local_u8i]!='\0')
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	80 81       	ld	r24, Z
    2582:	88 23       	and	r24, r24
    2584:	39 f7       	brne	.-50     	; 0x2554 <LCD_voidDisplayString+0x1c>
			local_u8i++;
		}
	} else {
		//return Error State
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber (u32 copy_u32Number)
{
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	65 97       	sbiw	r28, 0x15	; 21
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	6a 8b       	std	Y+18, r22	; 0x12
    25ac:	7b 8b       	std	Y+19, r23	; 0x13
    25ae:	8c 8b       	std	Y+20, r24	; 0x14
    25b0:	9d 8b       	std	Y+21, r25	; 0x15
	if (copy_u32Number == 0) {
    25b2:	8a 89       	ldd	r24, Y+18	; 0x12
    25b4:	9b 89       	ldd	r25, Y+19	; 0x13
    25b6:	ac 89       	ldd	r26, Y+20	; 0x14
    25b8:	bd 89       	ldd	r27, Y+21	; 0x15
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	a1 05       	cpc	r26, r1
    25be:	b1 05       	cpc	r27, r1
    25c0:	21 f4       	brne	.+8      	; 0x25ca <LCD_voidDisplayNumber+0x38>
		LCD_voidDisplayChar(48);
    25c2:	80 e3       	ldi	r24, 0x30	; 48
    25c4:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <LCD_voidDisplayChar>
    25c8:	51 c0       	rjmp	.+162    	; 0x266c <LCD_voidDisplayNumber+0xda>
	} else {
		s8 local_u8i = 0;
    25ca:	19 82       	std	Y+1, r1	; 0x01
    25cc:	30 c0       	rjmp	.+96     	; 0x262e <LCD_voidDisplayNumber+0x9c>
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	08 2f       	mov	r16, r24
    25d2:	11 27       	eor	r17, r17
    25d4:	07 fd       	sbrc	r16, 7
    25d6:	10 95       	com	r17
    25d8:	8a 89       	ldd	r24, Y+18	; 0x12
    25da:	9b 89       	ldd	r25, Y+19	; 0x13
    25dc:	ac 89       	ldd	r26, Y+20	; 0x14
    25de:	bd 89       	ldd	r27, Y+21	; 0x15
    25e0:	2a e0       	ldi	r18, 0x0A	; 10
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__udivmodsi4>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	28 2f       	mov	r18, r24
    25f6:	20 5d       	subi	r18, 0xD0	; 208
    25f8:	ce 01       	movw	r24, r28
    25fa:	02 96       	adiw	r24, 0x02	; 2
    25fc:	fc 01       	movw	r30, r24
    25fe:	e0 0f       	add	r30, r16
    2600:	f1 1f       	adc	r31, r17
    2602:	20 83       	st	Z, r18
			local_u8i++;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	89 83       	std	Y+1, r24	; 0x01
			copy_u32Number /= 10;
    260a:	8a 89       	ldd	r24, Y+18	; 0x12
    260c:	9b 89       	ldd	r25, Y+19	; 0x13
    260e:	ac 89       	ldd	r26, Y+20	; 0x14
    2610:	bd 89       	ldd	r27, Y+21	; 0x15
    2612:	2a e0       	ldi	r18, 0x0A	; 10
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__udivmodsi4>
    2622:	da 01       	movw	r26, r20
    2624:	c9 01       	movw	r24, r18
    2626:	8a 8b       	std	Y+18, r24	; 0x12
    2628:	9b 8b       	std	Y+19, r25	; 0x13
    262a:	ac 8b       	std	Y+20, r26	; 0x14
    262c:	bd 8b       	std	Y+21, r27	; 0x15
	if (copy_u32Number == 0) {
		LCD_voidDisplayChar(48);
	} else {
		s8 local_u8i = 0;
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
    262e:	8a 89       	ldd	r24, Y+18	; 0x12
    2630:	9b 89       	ldd	r25, Y+19	; 0x13
    2632:	ac 89       	ldd	r26, Y+20	; 0x14
    2634:	bd 89       	ldd	r27, Y+21	; 0x15
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	a1 05       	cpc	r26, r1
    263a:	b1 05       	cpc	r27, r1
    263c:	41 f6       	brne	.-112    	; 0x25ce <LCD_voidDisplayNumber+0x3c>
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	81 50       	subi	r24, 0x01	; 1
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	10 c0       	rjmp	.+32     	; 0x2666 <LCD_voidDisplayNumber+0xd4>
		while(local_u8i >= 0)
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	28 2f       	mov	r18, r24
    264a:	33 27       	eor	r19, r19
    264c:	27 fd       	sbrc	r18, 7
    264e:	30 95       	com	r19
    2650:	ce 01       	movw	r24, r28
    2652:	02 96       	adiw	r24, 0x02	; 2
    2654:	fc 01       	movw	r30, r24
    2656:	e2 0f       	add	r30, r18
    2658:	f3 1f       	adc	r31, r19
    265a:	80 81       	ld	r24, Z
    265c:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <LCD_voidDisplayChar>
			local_u8i--;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
		while(local_u8i >= 0)
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	88 23       	and	r24, r24
    266a:	6c f7       	brge	.-38     	; 0x2646 <LCD_voidDisplayNumber+0xb4>
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
			local_u8i--;
		}
	}
}
    266c:	65 96       	adiw	r28, 0x15	; 21
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	08 95       	ret

00002682 <LCD_voidDrawData>:

void LCD_voidDrawData(u8 copy_u8Pattern , u8* copy_pu8Data , u8 copy_u8X , u8 copy_u8Y){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	27 97       	sbiw	r28, 0x07	; 7
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	7d 83       	std	Y+5, r23	; 0x05
    269a:	6c 83       	std	Y+4, r22	; 0x04
    269c:	4e 83       	std	Y+6, r20	; 0x06
    269e:	2f 83       	std	Y+7, r18	; 0x07
	  u8 loc_i=0 ;
    26a0:	1a 82       	std	Y+2, r1	; 0x02
	  u8 address_CGRAM=copy_u8Pattern*8 ;  // set address
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	89 83       	std	Y+1, r24	; 0x01
	  /* set CGRAM */
	  CLR_BIT(address_CGRAM,7) ;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	8f 77       	andi	r24, 0x7F	; 127
    26ba:	89 83       	std	Y+1, r24	; 0x01
	  SET_BIT(address_CGRAM,6) ;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	80 64       	ori	r24, 0x40	; 64
    26c0:	89 83       	std	Y+1, r24	; 0x01
	  LCD_voidSendCommand(address_CGRAM) ;
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    26c8:	1a 82       	std	Y+2, r1	; 0x02
    26ca:	0e c0       	rjmp	.+28     	; 0x26e8 <LCD_voidDrawData+0x66>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	fc 01       	movw	r30, r24
    26d8:	e2 0f       	add	r30, r18
    26da:	f3 1f       	adc	r31, r19
    26dc:	80 81       	ld	r24, Z
    26de:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <LCD_voidDisplayChar>
	  CLR_BIT(address_CGRAM,7) ;
	  SET_BIT(address_CGRAM,6) ;
	  LCD_voidSendCommand(address_CGRAM) ;

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	8a 83       	std	Y+2, r24	; 0x02
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 30       	cpi	r24, 0x08	; 8
    26ec:	78 f3       	brcs	.-34     	; 0x26cc <LCD_voidDrawData+0x4a>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
	  }
	  LCD_voidGoToSpecificPosition(copy_u8X,copy_u8Y);
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	0e 94 b7 13 	call	0x276e	; 0x276e <LCD_voidGoToSpecificPosition>
	  LCD_voidDisplayChar(copy_u8Pattern) ;
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <LCD_voidDisplayChar>
}
    26fc:	27 96       	adiw	r28, 0x07	; 7
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <LCD_voidClear>:

void LCD_voidClear (void)
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0b00000001);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
}
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <LCD_voidShift>:

void LCD_voidShift (u8 copy_u8ShiftingDirection)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_voidShift+0x6>
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8ShiftingDirection <= LCD_SHIFT_RIGHT) {
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	b0 f4       	brcc	.+44     	; 0x2762 <LCD_voidShift+0x40>
		switch (copy_u8ShiftingDirection) {
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	3b 83       	std	Y+3, r19	; 0x03
    273e:	2a 83       	std	Y+2, r18	; 0x02
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	31 f0       	breq	.+12     	; 0x2754 <LCD_voidShift+0x32>
    2748:	2a 81       	ldd	r18, Y+2	; 0x02
    274a:	3b 81       	ldd	r19, Y+3	; 0x03
    274c:	21 30       	cpi	r18, 0x01	; 1
    274e:	31 05       	cpc	r19, r1
    2750:	29 f0       	breq	.+10     	; 0x275c <LCD_voidShift+0x3a>
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <LCD_voidShift+0x40>
			case LCD_SHIFT_LEFT:
				LCD_voidSendCommand(0b00011000);
    2754:	88 e1       	ldi	r24, 0x18	; 24
    2756:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
    275a:	03 c0       	rjmp	.+6      	; 0x2762 <LCD_voidShift+0x40>
				break;
			case LCD_SHIFT_RIGHT:
				LCD_voidSendCommand(0b00011100);
    275c:	8c e1       	ldi	r24, 0x1C	; 28
    275e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
				break;
		}
	} else {
		//return Error State
	}
}
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <LCD_voidGoToSpecificPosition>:

void LCD_voidGoToSpecificPosition (u8 copy_u8LineNumber, u8 copy_u8Position)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <LCD_voidGoToSpecificPosition+0x6>
    2774:	0f 92       	push	r0
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	6b 83       	std	Y+3, r22	; 0x03
	/* set address */
	u8 ddram_address= copy_u8Position+copy_u8LineNumber*0x40 ;
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	00 24       	eor	r0, r0
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	07 94       	ror	r0
    278c:	96 95       	lsr	r25
    278e:	87 95       	ror	r24
    2790:	07 94       	ror	r0
    2792:	98 2f       	mov	r25, r24
    2794:	80 2d       	mov	r24, r0
    2796:	98 2f       	mov	r25, r24
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	89 0f       	add	r24, r25
    279c:	89 83       	std	Y+1, r24	; 0x01

	/*set DDRAM */
	SET_BIT(ddram_address,7) ;  // set bit7 in ddram
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	80 68       	ori	r24, 0x80	; 128
    27a2:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(ddram_address) ;
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <LCD_voidSendCommand>
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort (u8 copy_u8cmnd)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	0f 92       	push	r0
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8cmnd,0));
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	98 2f       	mov	r25, r24
    27c6:	91 70       	andi	r25, 0x01	; 1
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	64 e0       	ldi	r22, 0x04	; 4
    27cc:	49 2f       	mov	r20, r25
    27ce:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8cmnd,1));
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	86 95       	lsr	r24
    27d6:	98 2f       	mov	r25, r24
    27d8:	91 70       	andi	r25, 0x01	; 1
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	65 e0       	ldi	r22, 0x05	; 5
    27de:	49 2f       	mov	r20, r25
    27e0:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8cmnd,2));
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	86 95       	lsr	r24
    27e8:	86 95       	lsr	r24
    27ea:	98 2f       	mov	r25, r24
    27ec:	91 70       	andi	r25, 0x01	; 1
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	66 e0       	ldi	r22, 0x06	; 6
    27f2:	49 2f       	mov	r20, r25
    27f4:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8cmnd,3));
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	86 95       	lsr	r24
    27fc:	86 95       	lsr	r24
    27fe:	86 95       	lsr	r24
    2800:	98 2f       	mov	r25, r24
    2802:	91 70       	andi	r25, 0x01	; 1
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	67 e0       	ldi	r22, 0x07	; 7
    2808:	49 2f       	mov	r20, r25
    280a:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <PRV_voidEnableTriggerWrite>:


static void PRV_voidEnableTriggerWrite (void)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	2e 97       	sbiw	r28, 0x0e	; 14
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
	/* Enable Pulse *//* H => L */
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	63 e0       	ldi	r22, 0x03	; 3
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	8b 87       	std	Y+11, r24	; 0x0b
    283e:	9c 87       	std	Y+12, r25	; 0x0c
    2840:	ad 87       	std	Y+13, r26	; 0x0d
    2842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	55 e4       	ldi	r21, 0x45	; 69
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
    2860:	a9 87       	std	Y+9, r26	; 0x09
    2862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <PRV_voidEnableTriggerWrite+0xd0>
    28c8:	80 e9       	ldi	r24, 0x90	; 144
    28ca:	91 e0       	ldi	r25, 0x01	; 1
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <PRV_voidEnableTriggerWrite+0xbe>
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <PRV_voidEnableTriggerWrite+0xb2>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <PRV_voidEnableTriggerWrite+0xfa>
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    2922:	2e 96       	adiw	r28, 0x0e	; 14
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <KEYPAD_voidInit>:
										{4,5,6,'*'},
										{1,2,3,'-'},
										{'c','0','=','+'}	};

void KEYPAD_voidInit (void)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	29 97       	sbiw	r28, 0x09	; 9
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    2948:	84 e0       	ldi	r24, 0x04	; 4
    294a:	8a 83       	std	Y+2, r24	; 0x02
    294c:	85 e0       	ldi	r24, 0x05	; 5
    294e:	8b 83       	std	Y+3, r24	; 0x03
    2950:	86 e0       	ldi	r24, 0x06	; 6
    2952:	8c 83       	std	Y+4, r24	; 0x04
    2954:	87 e0       	ldi	r24, 0x07	; 7
    2956:	8d 83       	std	Y+5, r24	; 0x05
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	8e 83       	std	Y+6, r24	; 0x06
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	8f 83       	std	Y+7, r24	; 0x07
    2960:	84 e0       	ldi	r24, 0x04	; 4
    2962:	88 87       	std	Y+8, r24	; 0x08
    2964:	85 e0       	ldi	r24, 0x05	; 5
    2966:	89 87       	std	Y+9, r24	; 0x09

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    2968:	19 82       	std	Y+1, r1	; 0x01
    296a:	3b c0       	rjmp	.+118    	; 0x29e2 <KEYPAD_voidInit+0xae>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	ce 01       	movw	r24, r28
    2974:	02 96       	adiw	r24, 0x02	; 2
    2976:	fc 01       	movw	r30, r24
    2978:	e2 0f       	add	r30, r18
    297a:	f3 1f       	adc	r31, r19
    297c:	90 81       	ld	r25, Z
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	69 2f       	mov	r22, r25
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	ce 01       	movw	r24, r28
    2990:	02 96       	adiw	r24, 0x02	; 2
    2992:	fc 01       	movw	r30, r24
    2994:	e2 0f       	add	r30, r18
    2996:	f3 1f       	adc	r31, r19
    2998:	90 81       	ld	r25, Z
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	69 2f       	mov	r22, r25
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	ce 01       	movw	r24, r28
    29ac:	06 96       	adiw	r24, 0x06	; 6
    29ae:	fc 01       	movw	r30, r24
    29b0:	e2 0f       	add	r30, r18
    29b2:	f3 1f       	adc	r31, r19
    29b4:	90 81       	ld	r25, Z
    29b6:	83 e0       	ldi	r24, 0x03	; 3
    29b8:	69 2f       	mov	r22, r25
    29ba:	41 e0       	ldi	r20, 0x01	; 1
    29bc:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	ce 01       	movw	r24, r28
    29c8:	06 96       	adiw	r24, 0x06	; 6
    29ca:	fc 01       	movw	r30, r24
    29cc:	e2 0f       	add	r30, r18
    29ce:	f3 1f       	adc	r31, r19
    29d0:	90 81       	ld	r25, Z
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	69 2f       	mov	r22, r25
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
{
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	8f 5f       	subi	r24, 0xFF	; 255
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	84 30       	cpi	r24, 0x04	; 4
    29e6:	10 f2       	brcs	.-124    	; 0x296c <KEYPAD_voidInit+0x38>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
	}
}
    29e8:	29 96       	adiw	r28, 0x09	; 9
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <KEYPAD_u8AdjustKeyPadNum>:

u8 KEYPAD_u8AdjustKeyPadNum	(void)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	2c 97       	sbiw	r28, 0x0c	; 12
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    2a0e:	84 e0       	ldi	r24, 0x04	; 4
    2a10:	8c 83       	std	Y+4, r24	; 0x04
    2a12:	85 e0       	ldi	r24, 0x05	; 5
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	86 e0       	ldi	r24, 0x06	; 6
    2a18:	8e 83       	std	Y+6, r24	; 0x06
    2a1a:	87 e0       	ldi	r24, 0x07	; 7
    2a1c:	8f 83       	std	Y+7, r24	; 0x07
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	88 87       	std	Y+8, r24	; 0x08
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	89 87       	std	Y+9, r24	; 0x09
    2a26:	84 e0       	ldi	r24, 0x04	; 4
    2a28:	8a 87       	std	Y+10, r24	; 0x0a
    2a2a:	85 e0       	ldi	r24, 0x05	; 5
    2a2c:	8b 87       	std	Y+11, r24	; 0x0b

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	89 83       	std	Y+1, r24	; 0x01

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    2a32:	1a 82       	std	Y+2, r1	; 0x02
    2a34:	5a c0       	rjmp	.+180    	; 0x2aea <KEYPAD_u8AdjustKeyPadNum+0xf0>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	08 96       	adiw	r24, 0x08	; 8
    2a40:	fc 01       	movw	r30, r24
    2a42:	e2 0f       	add	r30, r18
    2a44:	f3 1f       	adc	r31, r19
    2a46:	90 81       	ld	r25, Z
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	69 2f       	mov	r22, r25
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    2a52:	1b 82       	std	Y+3, r1	; 0x03
    2a54:	36 c0       	rjmp	.+108    	; 0x2ac2 <KEYPAD_u8AdjustKeyPadNum+0xc8>
			if(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0)
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	04 96       	adiw	r24, 0x04	; 4
    2a60:	fc 01       	movw	r30, r24
    2a62:	e2 0f       	add	r30, r18
    2a64:	f3 1f       	adc	r31, r19
    2a66:	90 81       	ld	r25, Z
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	69 2f       	mov	r22, r25
    2a6c:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2a70:	88 23       	and	r24, r24
    2a72:	21 f5       	brne	.+72     	; 0x2abc <KEYPAD_u8AdjustKeyPadNum+0xc2>
			{
				val = KEYPAD_ARR[local_u8Row][local_u8Col];
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	48 2f       	mov	r20, r24
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	ca 01       	movw	r24, r20
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	82 0f       	add	r24, r18
    2a8c:	93 1f       	adc	r25, r19
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e8 59       	subi	r30, 0x98	; 152
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	04 96       	adiw	r24, 0x04	; 4
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	e2 0f       	add	r30, r18
    2aa6:	f3 1f       	adc	r31, r19
    2aa8:	90 81       	ld	r25, Z
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	69 2f       	mov	r22, r25
    2aae:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2ab2:	88 23       	and	r24, r24
    2ab4:	89 f3       	breq	.-30     	; 0x2a98 <KEYPAD_u8AdjustKeyPadNum+0x9e>
				return val;
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	8c 87       	std	Y+12, r24	; 0x0c
    2aba:	1d c0       	rjmp	.+58     	; 0x2af6 <KEYPAD_u8AdjustKeyPadNum+0xfc>
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	8b 83       	std	Y+3, r24	; 0x03
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	84 30       	cpi	r24, 0x04	; 4
    2ac6:	38 f2       	brcs	.-114    	; 0x2a56 <KEYPAD_u8AdjustKeyPadNum+0x5c>
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
				return val;
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	ce 01       	movw	r24, r28
    2ad0:	08 96       	adiw	r24, 0x08	; 8
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 0f       	add	r30, r18
    2ad6:	f3 1f       	adc	r31, r19
    2ad8:	90 81       	ld	r25, Z
    2ada:	83 e0       	ldi	r24, 0x03	; 3
    2adc:	69 2f       	mov	r22, r25
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	8f 5f       	subi	r24, 0xFF	; 255
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	84 30       	cpi	r24, 0x04	; 4
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <KEYPAD_u8AdjustKeyPadNum+0xf8>
    2af0:	a2 cf       	rjmp	.-188    	; 0x2a36 <KEYPAD_u8AdjustKeyPadNum+0x3c>
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
	}
	return val;
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	8c 87       	std	Y+12, r24	; 0x0c
    2af6:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2af8:	2c 96       	adiw	r28, 0x0c	; 12
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <DC_MOTOR_voidForward>:
#include "../LIB/STD_TYPES.h"
#include "../MCAL/DIO/DIO_interface.h"
#define F_CPU 16000000UL

void DC_MOTOR_voidForward()
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
    2b12:	82 e0       	ldi	r24, 0x02	; 2
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    2b30:	82 e0       	ldi	r24, 0x02	; 2
    2b32:	63 e0       	ldi	r22, 0x03	; 3
    2b34:	41 e0       	ldi	r20, 0x01	; 1
    2b36:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <DC_MOTOR_voidRight>:
void DC_MOTOR_voidRight()
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	62 e0       	ldi	r22, 0x02	; 2
    2b60:	40 e0       	ldi	r20, 0x00	; 0
    2b62:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	63 e0       	ldi	r22, 0x03	; 3
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <DC_MOTOR_voidLeft>:
void DC_MOTOR_voidLeft()
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	61 e0       	ldi	r22, 0x01	; 1
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	62 e0       	ldi	r22, 0x02	; 2
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	63 e0       	ldi	r22, 0x03	; 3
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <DC_MOTOR_voidReverse>:
void DC_MOTOR_voidReverse()
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	41 e0       	ldi	r20, 0x01	; 1
    2bba:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	62 e0       	ldi	r22, 0x02	; 2
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	63 e0       	ldi	r22, 0x03	; 3
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <main>:

int main()
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
    2bea:	82 e0       	ldi	r24, 0x02	; 2
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
    2bfe:	82 e0       	ldi	r24, 0x02	; 2
    2c00:	62 e0       	ldi	r22, 0x02	; 2
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	63 e0       	ldi	r22, 0x03	; 3
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_OUTPUT);
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	64 e0       	ldi	r22, 0x04	; 4
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	65 e0       	ldi	r22, 0x05	; 5
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	64 e0       	ldi	r22, 0x04	; 4
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_HIGH);
    2c30:	83 e0       	ldi	r24, 0x03	; 3
    2c32:	65 e0       	ldi	r22, 0x05	; 5
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN1,DIO_PIN_INPUT);
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	0e 94 6f 09 	call	0x12de	; 0x12de <DIO_voidSetPinDirection>

	while(1)
	{
		if((DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)==0)&&(DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)==0)){
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c56:	88 23       	and	r24, r24
    2c58:	41 f4       	brne	.+16     	; 0x2c6a <main+0x88>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c62:	88 23       	and	r24, r24
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <main+0x88>
			DC_MOTOR_voidForward();
    2c66:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <DC_MOTOR_voidForward>
		}
		if((DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)==0)&&(DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)==1)){
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c72:	88 23       	and	r24, r24
    2c74:	41 f4       	brne	.+16     	; 0x2c86 <main+0xa4>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	11 f4       	brne	.+4      	; 0x2c86 <main+0xa4>
			DC_MOTOR_voidLeft();
    2c82:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <DC_MOTOR_voidLeft>
		}
		if((DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)==1)&&(DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)==0)){
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	41 f4       	brne	.+16     	; 0x2ca2 <main+0xc0>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2c9a:	88 23       	and	r24, r24
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <main+0xc0>
			DC_MOTOR_voidRight();
    2c9e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <DC_MOTOR_voidRight>
		}
		if((DIO_u8GetPinValue(DIO_PORTA,DIO_PIN0)==1)&&(DIO_u8GetPinValue(DIO_PORTA,DIO_PIN1)==1)){
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2caa:	81 30       	cpi	r24, 0x01	; 1
    2cac:	81 f6       	brne	.-96     	; 0x2c4e <main+0x6c>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	61 e0       	ldi	r22, 0x01	; 1
    2cb2:	0e 94 b5 0b 	call	0x176a	; 0x176a <DIO_u8GetPinValue>
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	51 f6       	brne	.-108    	; 0x2c4e <main+0x6c>
			DC_MOTOR_voidReverse();
    2cba:	0e 94 d6 15 	call	0x2bac	; 0x2bac <DC_MOTOR_voidReverse>
    2cbe:	c7 cf       	rjmp	.-114    	; 0x2c4e <main+0x6c>

00002cc0 <__udivmodsi4>:
    2cc0:	a1 e2       	ldi	r26, 0x21	; 33
    2cc2:	1a 2e       	mov	r1, r26
    2cc4:	aa 1b       	sub	r26, r26
    2cc6:	bb 1b       	sub	r27, r27
    2cc8:	fd 01       	movw	r30, r26
    2cca:	0d c0       	rjmp	.+26     	; 0x2ce6 <__udivmodsi4_ep>

00002ccc <__udivmodsi4_loop>:
    2ccc:	aa 1f       	adc	r26, r26
    2cce:	bb 1f       	adc	r27, r27
    2cd0:	ee 1f       	adc	r30, r30
    2cd2:	ff 1f       	adc	r31, r31
    2cd4:	a2 17       	cp	r26, r18
    2cd6:	b3 07       	cpc	r27, r19
    2cd8:	e4 07       	cpc	r30, r20
    2cda:	f5 07       	cpc	r31, r21
    2cdc:	20 f0       	brcs	.+8      	; 0x2ce6 <__udivmodsi4_ep>
    2cde:	a2 1b       	sub	r26, r18
    2ce0:	b3 0b       	sbc	r27, r19
    2ce2:	e4 0b       	sbc	r30, r20
    2ce4:	f5 0b       	sbc	r31, r21

00002ce6 <__udivmodsi4_ep>:
    2ce6:	66 1f       	adc	r22, r22
    2ce8:	77 1f       	adc	r23, r23
    2cea:	88 1f       	adc	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	1a 94       	dec	r1
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <__udivmodsi4_loop>
    2cf2:	60 95       	com	r22
    2cf4:	70 95       	com	r23
    2cf6:	80 95       	com	r24
    2cf8:	90 95       	com	r25
    2cfa:	9b 01       	movw	r18, r22
    2cfc:	ac 01       	movw	r20, r24
    2cfe:	bd 01       	movw	r22, r26
    2d00:	cf 01       	movw	r24, r30
    2d02:	08 95       	ret

00002d04 <__prologue_saves__>:
    2d04:	2f 92       	push	r2
    2d06:	3f 92       	push	r3
    2d08:	4f 92       	push	r4
    2d0a:	5f 92       	push	r5
    2d0c:	6f 92       	push	r6
    2d0e:	7f 92       	push	r7
    2d10:	8f 92       	push	r8
    2d12:	9f 92       	push	r9
    2d14:	af 92       	push	r10
    2d16:	bf 92       	push	r11
    2d18:	cf 92       	push	r12
    2d1a:	df 92       	push	r13
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	1f 93       	push	r17
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	ca 1b       	sub	r28, r26
    2d2e:	db 0b       	sbc	r29, r27
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	09 94       	ijmp

00002d3c <__epilogue_restores__>:
    2d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d3e:	39 88       	ldd	r3, Y+17	; 0x11
    2d40:	48 88       	ldd	r4, Y+16	; 0x10
    2d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d50:	c8 84       	ldd	r12, Y+8	; 0x08
    2d52:	df 80       	ldd	r13, Y+7	; 0x07
    2d54:	ee 80       	ldd	r14, Y+6	; 0x06
    2d56:	fd 80       	ldd	r15, Y+5	; 0x05
    2d58:	0c 81       	ldd	r16, Y+4	; 0x04
    2d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d60:	ce 0f       	add	r28, r30
    2d62:	d1 1d       	adc	r29, r1
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	ed 01       	movw	r28, r26
    2d70:	08 95       	ret

00002d72 <_exit>:
    2d72:	f8 94       	cli

00002d74 <__stop_program>:
    2d74:	ff cf       	rjmp	.-2      	; 0x2d74 <__stop_program>
