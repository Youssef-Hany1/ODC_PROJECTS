
PASS_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00002e6c  00002ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ff8  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ede  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000814e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000924f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 04 12 	call	0x2408	; 0x2408 <main>
      7a:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e8       	ldi	r26, 0x82	; 130
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e8       	ldi	r24, 0x82	; 130
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e8       	ldi	r22, 0x82	; 130
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidSetPinDirection>:
#include "DIO_register.h"

				/*************** PIN API's ***************/

void DIO_voidSetPinDirection (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	2d 97       	sbiw	r28, 0x0d	; 13
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinDirection <= DIO_PIN_OUTPUT))
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <DIO_voidSetPinDirection+0x22>
     cae:	09 c1       	rjmp	.+530    	; 0xec2 <DIO_voidSetPinDirection+0x234>
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <DIO_voidSetPinDirection+0x2a>
     cb6:	05 c1       	rjmp	.+522    	; 0xec2 <DIO_voidSetPinDirection+0x234>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <DIO_voidSetPinDirection+0x32>
     cbe:	01 c1       	rjmp	.+514    	; 0xec2 <DIO_voidSetPinDirection+0x234>
	{
		switch (copy_u8PortId)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3d 87       	std	Y+13, r19	; 0x0d
     cc8:	2c 87       	std	Y+12, r18	; 0x0c
     cca:	8c 85       	ldd	r24, Y+12	; 0x0c
     ccc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	91 05       	cpc	r25, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <DIO_voidSetPinDirection+0x48>
     cd4:	4f c0       	rjmp	.+158    	; 0xd74 <DIO_voidSetPinDirection+0xe6>
     cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd8:	3d 85       	ldd	r19, Y+13	; 0x0d
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	2c f4       	brge	.+10     	; 0xcea <DIO_voidSetPinDirection+0x5c>
     ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	71 f0       	breq	.+28     	; 0xd04 <DIO_voidSetPinDirection+0x76>
     ce8:	ec c0       	rjmp	.+472    	; 0xec2 <DIO_voidSetPinDirection+0x234>
     cea:	2c 85       	ldd	r18, Y+12	; 0x0c
     cec:	3d 85       	ldd	r19, Y+13	; 0x0d
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_voidSetPinDirection+0x68>
     cf4:	77 c0       	rjmp	.+238    	; 0xde4 <DIO_voidSetPinDirection+0x156>
     cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <DIO_voidSetPinDirection+0x74>
     d00:	a9 c0       	rjmp	.+338    	; 0xe54 <DIO_voidSetPinDirection+0x1c6>
     d02:	df c0       	rjmp	.+446    	; 0xec2 <DIO_voidSetPinDirection+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinDirection) {
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3b 87       	std	Y+11, r19	; 0x0b
     d0c:	2a 87       	std	Y+10, r18	; 0x0a
     d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d10:	9b 85       	ldd	r25, Y+11	; 0x0b
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	31 f0       	breq	.+12     	; 0xd22 <DIO_voidSetPinDirection+0x94>
     d16:	2a 85       	ldd	r18, Y+10	; 0x0a
     d18:	3b 85       	ldd	r19, Y+11	; 0x0b
     d1a:	21 30       	cpi	r18, 0x01	; 1
     d1c:	31 05       	cpc	r19, r1
     d1e:	b1 f0       	breq	.+44     	; 0xd4c <DIO_voidSetPinDirection+0xbe>
     d20:	d0 c0       	rjmp	.+416    	; 0xec2 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRA_REG,copy_u8PinId);
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_voidSetPinDirection+0xb2>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_voidSetPinDirection+0xae>
     d44:	80 95       	com	r24
     d46:	84 23       	and	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	bb c0       	rjmp	.+374    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRA_REG,copy_u8PinId);
     d4c:	aa e3       	ldi	r26, 0x3A	; 58
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ea e3       	ldi	r30, 0x3A	; 58
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_voidSetPinDirection+0xdc>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_voidSetPinDirection+0xd8>
     d6e:	84 2b       	or	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	a7 c0       	rjmp	.+334    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinDirection) {
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	39 87       	std	Y+9, r19	; 0x09
     d7c:	28 87       	std	Y+8, r18	; 0x08
     d7e:	88 85       	ldd	r24, Y+8	; 0x08
     d80:	99 85       	ldd	r25, Y+9	; 0x09
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	31 f0       	breq	.+12     	; 0xd92 <DIO_voidSetPinDirection+0x104>
     d86:	28 85       	ldd	r18, Y+8	; 0x08
     d88:	39 85       	ldd	r19, Y+9	; 0x09
     d8a:	21 30       	cpi	r18, 0x01	; 1
     d8c:	31 05       	cpc	r19, r1
     d8e:	b1 f0       	breq	.+44     	; 0xdbc <DIO_voidSetPinDirection+0x12e>
     d90:	98 c0       	rjmp	.+304    	; 0xec2 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRB_REG,copy_u8PinId);
     d92:	a7 e3       	ldi	r26, 0x37	; 55
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e7 e3       	ldi	r30, 0x37	; 55
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_voidSetPinDirection+0x122>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_voidSetPinDirection+0x11e>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	83 c0       	rjmp	.+262    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRB_REG,copy_u8PinId);
     dbc:	a7 e3       	ldi	r26, 0x37	; 55
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_voidSetPinDirection+0x14c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_voidSetPinDirection+0x148>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	6f c0       	rjmp	.+222    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinDirection) {
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3f 83       	std	Y+7, r19	; 0x07
     dec:	2e 83       	std	Y+6, r18	; 0x06
     dee:	8e 81       	ldd	r24, Y+6	; 0x06
     df0:	9f 81       	ldd	r25, Y+7	; 0x07
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	31 f0       	breq	.+12     	; 0xe02 <DIO_voidSetPinDirection+0x174>
     df6:	2e 81       	ldd	r18, Y+6	; 0x06
     df8:	3f 81       	ldd	r19, Y+7	; 0x07
     dfa:	21 30       	cpi	r18, 0x01	; 1
     dfc:	31 05       	cpc	r19, r1
     dfe:	b1 f0       	breq	.+44     	; 0xe2c <DIO_voidSetPinDirection+0x19e>
     e00:	60 c0       	rjmp	.+192    	; 0xec2 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRC_REG,copy_u8PinId);
     e02:	a4 e3       	ldi	r26, 0x34	; 52
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e4 e3       	ldi	r30, 0x34	; 52
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_voidSetPinDirection+0x192>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_voidSetPinDirection+0x18e>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	4b c0       	rjmp	.+150    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRC_REG,copy_u8PinId);
     e2c:	a4 e3       	ldi	r26, 0x34	; 52
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_voidSetPinDirection+0x1bc>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_voidSetPinDirection+0x1b8>
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	37 c0       	rjmp	.+110    	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinDirection) {
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	3d 83       	std	Y+5, r19	; 0x05
     e5c:	2c 83       	std	Y+4, r18	; 0x04
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	9d 81       	ldd	r25, Y+5	; 0x05
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	31 f0       	breq	.+12     	; 0xe72 <DIO_voidSetPinDirection+0x1e4>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	21 30       	cpi	r18, 0x01	; 1
     e6c:	31 05       	cpc	r19, r1
     e6e:	b1 f0       	breq	.+44     	; 0xe9c <DIO_voidSetPinDirection+0x20e>
     e70:	28 c0       	rjmp	.+80     	; 0xec2 <DIO_voidSetPinDirection+0x234>
					case DIO_PIN_INPUT:
						CLR_BIT(DDRD_REG,copy_u8PinId);
     e72:	a1 e3       	ldi	r26, 0x31	; 49
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e1 e3       	ldi	r30, 0x31	; 49
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_voidSetPinDirection+0x202>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	13 c0       	rjmp	.+38     	; 0xec2 <DIO_voidSetPinDirection+0x234>
						break;
					case DIO_PIN_OUTPUT:
						SET_BIT(DDRD_REG,copy_u8PinId);
     e9c:	a1 e3       	ldi	r26, 0x31	; 49
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e3       	ldi	r30, 0x31	; 49
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_voidSetPinDirection+0x22c>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_voidSetPinDirection+0x228>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
     ec2:	2d 96       	adiw	r28, 0x0d	; 13
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	2d 97       	sbiw	r28, 0x0d	; 13
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
     eec:	4b 83       	std	Y+3, r20	; 0x03
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7) && (copy_u8PinValue <= DIO_PIN_HIGH))
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_voidSetPinValue+0x22>
     ef4:	09 c1       	rjmp	.+530    	; 0x1108 <DIO_voidSetPinValue+0x234>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_voidSetPinValue+0x2a>
     efc:	05 c1       	rjmp	.+522    	; 0x1108 <DIO_voidSetPinValue+0x234>
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	08 f0       	brcs	.+2      	; 0xf06 <DIO_voidSetPinValue+0x32>
     f04:	01 c1       	rjmp	.+514    	; 0x1108 <DIO_voidSetPinValue+0x234>
	{
		switch (copy_u8PortId)
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 87       	std	Y+13, r19	; 0x0d
     f0e:	2c 87       	std	Y+12, r18	; 0x0c
     f10:	8c 85       	ldd	r24, Y+12	; 0x0c
     f12:	9d 85       	ldd	r25, Y+13	; 0x0d
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <DIO_voidSetPinValue+0x48>
     f1a:	4f c0       	rjmp	.+158    	; 0xfba <DIO_voidSetPinValue+0xe6>
     f1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f1e:	3d 85       	ldd	r19, Y+13	; 0x0d
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	2c f4       	brge	.+10     	; 0xf30 <DIO_voidSetPinValue+0x5c>
     f26:	8c 85       	ldd	r24, Y+12	; 0x0c
     f28:	9d 85       	ldd	r25, Y+13	; 0x0d
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	71 f0       	breq	.+28     	; 0xf4a <DIO_voidSetPinValue+0x76>
     f2e:	ec c0       	rjmp	.+472    	; 0x1108 <DIO_voidSetPinValue+0x234>
     f30:	2c 85       	ldd	r18, Y+12	; 0x0c
     f32:	3d 85       	ldd	r19, Y+13	; 0x0d
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <DIO_voidSetPinValue+0x68>
     f3a:	77 c0       	rjmp	.+238    	; 0x102a <DIO_voidSetPinValue+0x156>
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <DIO_voidSetPinValue+0x74>
     f46:	a9 c0       	rjmp	.+338    	; 0x109a <DIO_voidSetPinValue+0x1c6>
     f48:	df c0       	rjmp	.+446    	; 0x1108 <DIO_voidSetPinValue+0x234>
		{
			case DIO_PORTA:
				switch (copy_u8PinValue) {
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3b 87       	std	Y+11, r19	; 0x0b
     f52:	2a 87       	std	Y+10, r18	; 0x0a
     f54:	8a 85       	ldd	r24, Y+10	; 0x0a
     f56:	9b 85       	ldd	r25, Y+11	; 0x0b
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	31 f0       	breq	.+12     	; 0xf68 <DIO_voidSetPinValue+0x94>
     f5c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f5e:	3b 85       	ldd	r19, Y+11	; 0x0b
     f60:	21 30       	cpi	r18, 0x01	; 1
     f62:	31 05       	cpc	r19, r1
     f64:	b1 f0       	breq	.+44     	; 0xf92 <DIO_voidSetPinValue+0xbe>
     f66:	d0 c0       	rjmp	.+416    	; 0x1108 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTA_REG,copy_u8PinId);
     f68:	ab e3       	ldi	r26, 0x3B	; 59
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	eb e3       	ldi	r30, 0x3B	; 59
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_voidSetPinValue+0xb2>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_voidSetPinValue+0xae>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	bb c0       	rjmp	.+374    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTA_REG,copy_u8PinId);
     f92:	ab e3       	ldi	r26, 0x3B	; 59
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	eb e3       	ldi	r30, 0x3B	; 59
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_voidSetPinValue+0xdc>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_voidSetPinValue+0xd8>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	a7 c0       	rjmp	.+334    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PinValue) {
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	39 87       	std	Y+9, r19	; 0x09
     fc2:	28 87       	std	Y+8, r18	; 0x08
     fc4:	88 85       	ldd	r24, Y+8	; 0x08
     fc6:	99 85       	ldd	r25, Y+9	; 0x09
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	31 f0       	breq	.+12     	; 0xfd8 <DIO_voidSetPinValue+0x104>
     fcc:	28 85       	ldd	r18, Y+8	; 0x08
     fce:	39 85       	ldd	r19, Y+9	; 0x09
     fd0:	21 30       	cpi	r18, 0x01	; 1
     fd2:	31 05       	cpc	r19, r1
     fd4:	b1 f0       	breq	.+44     	; 0x1002 <DIO_voidSetPinValue+0x12e>
     fd6:	98 c0       	rjmp	.+304    	; 0x1108 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTB_REG,copy_u8PinId);
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_voidSetPinValue+0x122>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_voidSetPinValue+0x11e>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	83 c0       	rjmp	.+262    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTB_REG,copy_u8PinId);
    1002:	a8 e3       	ldi	r26, 0x38	; 56
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 e3       	ldi	r30, 0x38	; 56
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinValue+0x14c>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinValue+0x148>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	6f c0       	rjmp	.+222    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PinValue) {
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3f 83       	std	Y+7, r19	; 0x07
    1032:	2e 83       	std	Y+6, r18	; 0x06
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	9f 81       	ldd	r25, Y+7	; 0x07
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	31 f0       	breq	.+12     	; 0x1048 <DIO_voidSetPinValue+0x174>
    103c:	2e 81       	ldd	r18, Y+6	; 0x06
    103e:	3f 81       	ldd	r19, Y+7	; 0x07
    1040:	21 30       	cpi	r18, 0x01	; 1
    1042:	31 05       	cpc	r19, r1
    1044:	b1 f0       	breq	.+44     	; 0x1072 <DIO_voidSetPinValue+0x19e>
    1046:	60 c0       	rjmp	.+192    	; 0x1108 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTC_REG,copy_u8PinId);
    1048:	a5 e3       	ldi	r26, 0x35	; 53
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e5 e3       	ldi	r30, 0x35	; 53
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_voidSetPinValue+0x192>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_voidSetPinValue+0x18e>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	4b c0       	rjmp	.+150    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTC_REG,copy_u8PinId);
    1072:	a5 e3       	ldi	r26, 0x35	; 53
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e3       	ldi	r30, 0x35	; 53
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_voidSetPinValue+0x1bc>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_voidSetPinValue+0x1b8>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	37 c0       	rjmp	.+110    	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PinValue) {
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3d 83       	std	Y+5, r19	; 0x05
    10a2:	2c 83       	std	Y+4, r18	; 0x04
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <DIO_voidSetPinValue+0x1e4>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	21 30       	cpi	r18, 0x01	; 1
    10b2:	31 05       	cpc	r19, r1
    10b4:	b1 f0       	breq	.+44     	; 0x10e2 <DIO_voidSetPinValue+0x20e>
    10b6:	28 c0       	rjmp	.+80     	; 0x1108 <DIO_voidSetPinValue+0x234>
					case DIO_PIN_LOW:
						CLR_BIT(PORTD_REG,copy_u8PinId);
    10b8:	a2 e3       	ldi	r26, 0x32	; 50
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e2 e3       	ldi	r30, 0x32	; 50
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_voidSetPinValue+0x202>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_voidSetPinValue+0x1fe>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <DIO_voidSetPinValue+0x234>
						break;
					case DIO_PIN_HIGH:
						SET_BIT(PORTD_REG,copy_u8PinId);
    10e2:	a2 e3       	ldi	r26, 0x32	; 50
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e2 e3       	ldi	r30, 0x32	; 50
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_voidSetPinValue+0x22c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_voidSetPinValue+0x228>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1108:	2d 96       	adiw	r28, 0x0d	; 13
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <DIO_u8GetPinValue+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_u8GetPinValue+0x8>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_u8GetPinValue+0xa>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	08 f0       	brcs	.+2      	; 0x1134 <DIO_u8GetPinValue+0x1a>
    1132:	70 c0       	rjmp	.+224    	; 0x1214 <DIO_u8GetPinValue+0xfa>
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <DIO_u8GetPinValue+0x22>
    113a:	6c c0       	rjmp	.+216    	; 0x1214 <DIO_u8GetPinValue+0xfa>
	{
		switch (copy_u8PortId)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	4c 81       	ldd	r20, Y+4	; 0x04
    1148:	5d 81       	ldd	r21, Y+5	; 0x05
    114a:	41 30       	cpi	r20, 0x01	; 1
    114c:	51 05       	cpc	r21, r1
    114e:	49 f1       	breq	.+82     	; 0x11a2 <DIO_u8GetPinValue+0x88>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	34 f4       	brge	.+12     	; 0x1166 <DIO_u8GetPinValue+0x4c>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	61 f0       	breq	.+24     	; 0x117c <DIO_u8GetPinValue+0x62>
    1164:	57 c0       	rjmp	.+174    	; 0x1214 <DIO_u8GetPinValue+0xfa>
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	5d 81       	ldd	r21, Y+5	; 0x05
    116a:	42 30       	cpi	r20, 0x02	; 2
    116c:	51 05       	cpc	r21, r1
    116e:	61 f1       	breq	.+88     	; 0x11c8 <DIO_u8GetPinValue+0xae>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	d1 f1       	breq	.+116    	; 0x11ee <DIO_u8GetPinValue+0xd4>
    117a:	4c c0       	rjmp	.+152    	; 0x1214 <DIO_u8GetPinValue+0xfa>
		{
			case DIO_PORTA:
				return GET_BIT(PINA_REG,copy_u8PinId);
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a9 01       	movw	r20, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8GetPinValue+0x7a>
    1190:	55 95       	asr	r21
    1192:	47 95       	ror	r20
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_u8GetPinValue+0x76>
    1198:	ca 01       	movw	r24, r20
    119a:	58 2f       	mov	r21, r24
    119c:	51 70       	andi	r21, 0x01	; 1
    119e:	5b 83       	std	Y+3, r21	; 0x03
    11a0:	3a c0       	rjmp	.+116    	; 0x1216 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTB:
				return GET_BIT(PINB_REG,copy_u8PinId);
    11a2:	e6 e3       	ldi	r30, 0x36	; 54
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a9 01       	movw	r20, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8GetPinValue+0xa0>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8GetPinValue+0x9c>
    11be:	ca 01       	movw	r24, r20
    11c0:	58 2f       	mov	r21, r24
    11c2:	51 70       	andi	r21, 0x01	; 1
    11c4:	5b 83       	std	Y+3, r21	; 0x03
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTC:
				return GET_BIT(PINC_REG,copy_u8PinId);
    11c8:	e3 e3       	ldi	r30, 0x33	; 51
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_u8GetPinValue+0xc6>
    11dc:	55 95       	asr	r21
    11de:	47 95       	ror	r20
    11e0:	8a 95       	dec	r24
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_u8GetPinValue+0xc2>
    11e4:	ca 01       	movw	r24, r20
    11e6:	58 2f       	mov	r21, r24
    11e8:	51 70       	andi	r21, 0x01	; 1
    11ea:	5b 83       	std	Y+3, r21	; 0x03
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <DIO_u8GetPinValue+0xfc>
				break;
			case DIO_PORTD:
				return GET_BIT(PIND_REG,copy_u8PinId);
    11ee:	e0 e3       	ldi	r30, 0x30	; 48
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <DIO_u8GetPinValue+0xec>
    1202:	55 95       	asr	r21
    1204:	47 95       	ror	r20
    1206:	8a 95       	dec	r24
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <DIO_u8GetPinValue+0xe8>
    120a:	ca 01       	movw	r24, r20
    120c:	58 2f       	mov	r21, r24
    120e:	51 70       	andi	r21, 0x01	; 1
    1210:	5b 83       	std	Y+3, r21	; 0x03
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <DIO_u8GetPinValue+0xfc>
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8GetPinValue+0x100>
	}
	else
	{
		//return Error State
	}
}
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	8e 83       	std	Y+6, r24	; 0x06
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_voidTogglePinValue+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_voidTogglePinValue+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	08 f0       	brcs	.+2      	; 0x1246 <DIO_voidTogglePinValue+0x18>
    1244:	72 c0       	rjmp	.+228    	; 0x132a <DIO_voidTogglePinValue+0xfc>
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	88 30       	cpi	r24, 0x08	; 8
    124a:	08 f0       	brcs	.+2      	; 0x124e <DIO_voidTogglePinValue+0x20>
    124c:	6e c0       	rjmp	.+220    	; 0x132a <DIO_voidTogglePinValue+0xfc>
	{
		switch (copy_u8PortId)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	49 f1       	breq	.+82     	; 0x12b4 <DIO_voidTogglePinValue+0x86>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <DIO_voidTogglePinValue+0x48>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_voidTogglePinValue+0x5e>
    1274:	5a c0       	rjmp	.+180    	; 0x132a <DIO_voidTogglePinValue+0xfc>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	71 f1       	breq	.+92     	; 0x12dc <DIO_voidTogglePinValue+0xae>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	e9 f1       	breq	.+122    	; 0x1304 <DIO_voidTogglePinValue+0xd6>
    128a:	4f c0       	rjmp	.+158    	; 0x132a <DIO_voidTogglePinValue+0xfc>
		{
			case DIO_PORTA:
				TOG_BIT(PORTA_REG,copy_u8PinId);
    128c:	ab e3       	ldi	r26, 0x3B	; 59
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_voidTogglePinValue+0x7c>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_voidTogglePinValue+0x78>
    12ae:	84 27       	eor	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	3b c0       	rjmp	.+118    	; 0x132a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTB:
				TOG_BIT(PORTB_REG,copy_u8PinId);
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_voidTogglePinValue+0xa4>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_voidTogglePinValue+0xa0>
    12d6:	84 27       	eor	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	27 c0       	rjmp	.+78     	; 0x132a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTC:
				TOG_BIT(PORTC_REG,copy_u8PinId);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_voidTogglePinValue+0xcc>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_voidTogglePinValue+0xc8>
    12fe:	84 27       	eor	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	13 c0       	rjmp	.+38     	; 0x132a <DIO_voidTogglePinValue+0xfc>
				break;
			case DIO_PORTD:
				TOG_BIT(PORTD_REG,copy_u8PinId);
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_voidTogglePinValue+0xf4>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_voidTogglePinValue+0xf0>
    1326:	84 27       	eor	r24, r20
    1328:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO_voidActivatePinInPullUpResistance>:

void DIO_voidActivatePinInPullUpResistance (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <DIO_voidActivatePinInPullUpResistance+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_voidActivatePinInPullUpResistance+0x8>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= DIO_PIN7))
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	08 f0       	brcs	.+2      	; 0x1350 <DIO_voidActivatePinInPullUpResistance+0x18>
    134e:	72 c0       	rjmp	.+228    	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	88 30       	cpi	r24, 0x08	; 8
    1354:	08 f0       	brcs	.+2      	; 0x1358 <DIO_voidActivatePinInPullUpResistance+0x20>
    1356:	6e c0       	rjmp	.+220    	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
	{
		switch (copy_u8PortId)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3c 83       	std	Y+4, r19	; 0x04
    1360:	2b 83       	std	Y+3, r18	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	49 f1       	breq	.+82     	; 0x13be <DIO_voidActivatePinInPullUpResistance+0x86>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_voidActivatePinInPullUpResistance+0x48>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 f0       	breq	.+24     	; 0x1396 <DIO_voidActivatePinInPullUpResistance+0x5e>
    137e:	5a c0       	rjmp	.+180    	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
    1380:	2b 81       	ldd	r18, Y+3	; 0x03
    1382:	3c 81       	ldd	r19, Y+4	; 0x04
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	71 f1       	breq	.+92     	; 0x13e6 <DIO_voidActivatePinInPullUpResistance+0xae>
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	e9 f1       	breq	.+122    	; 0x140e <DIO_voidActivatePinInPullUpResistance+0xd6>
    1394:	4f c0       	rjmp	.+158    	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
		{
			case DIO_PORTA:
				SET_BIT(PORTA_REG,copy_u8PinId);
    1396:	ab e3       	ldi	r26, 0x3B	; 59
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	eb e3       	ldi	r30, 0x3B	; 59
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_voidActivatePinInPullUpResistance+0x7c>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_voidActivatePinInPullUpResistance+0x78>
    13b8:	84 2b       	or	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	3b c0       	rjmp	.+118    	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_REG,copy_u8PinId);
    13be:	a8 e3       	ldi	r26, 0x38	; 56
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e8 e3       	ldi	r30, 0x38	; 56
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_voidActivatePinInPullUpResistance+0xa4>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_voidActivatePinInPullUpResistance+0xa0>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	27 c0       	rjmp	.+78     	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_REG,copy_u8PinId);
    13e6:	a5 e3       	ldi	r26, 0x35	; 53
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e5 e3       	ldi	r30, 0x35	; 53
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_voidActivatePinInPullUpResistance+0xcc>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_voidActivatePinInPullUpResistance+0xc8>
    1408:	84 2b       	or	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	13 c0       	rjmp	.+38     	; 0x1434 <DIO_voidActivatePinInPullUpResistance+0xfc>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_REG,copy_u8PinId);
    140e:	a2 e3       	ldi	r26, 0x32	; 50
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_voidActivatePinInPullUpResistance+0xf4>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_voidActivatePinInPullUpResistance+0xf0>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <DIO_voidSetPortDirection>:

				/*************** PORTS API's ***************/

void DIO_voidSetPortDirection (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	2c 97       	sbiw	r28, 0x0c	; 12
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortDirection <= DIO_PORT_OUTPUT))
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	08 f0       	brcs	.+2      	; 0x1462 <DIO_voidSetPortDirection+0x20>
    1460:	83 c0       	rjmp	.+262    	; 0x1568 <DIO_voidSetPortDirection+0x126>
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	08 f0       	brcs	.+2      	; 0x146a <DIO_voidSetPortDirection+0x28>
    1468:	7f c0       	rjmp	.+254    	; 0x1568 <DIO_voidSetPortDirection+0x126>
	{
		switch (copy_u8PortId)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 87       	std	Y+12, r19	; 0x0c
    1472:	2b 87       	std	Y+11, r18	; 0x0b
    1474:	8b 85       	ldd	r24, Y+11	; 0x0b
    1476:	9c 85       	ldd	r25, Y+12	; 0x0c
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	71 f1       	breq	.+92     	; 0x14da <DIO_voidSetPortDirection+0x98>
    147e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1480:	3c 85       	ldd	r19, Y+12	; 0x0c
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_voidSetPortDirection+0x50>
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	9c 85       	ldd	r25, Y+12	; 0x0c
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f0       	breq	.+26     	; 0x14aa <DIO_voidSetPortDirection+0x68>
    1490:	6b c0       	rjmp	.+214    	; 0x1568 <DIO_voidSetPortDirection+0x126>
    1492:	2b 85       	ldd	r18, Y+11	; 0x0b
    1494:	3c 85       	ldd	r19, Y+12	; 0x0c
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	b9 f1       	breq	.+110    	; 0x150a <DIO_voidSetPortDirection+0xc8>
    149c:	8b 85       	ldd	r24, Y+11	; 0x0b
    149e:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <DIO_voidSetPortDirection+0x66>
    14a6:	49 c0       	rjmp	.+146    	; 0x153a <DIO_voidSetPortDirection+0xf8>
    14a8:	5f c0       	rjmp	.+190    	; 0x1568 <DIO_voidSetPortDirection+0x126>
		{
			case DIO_PORTA:
				switch (copy_u8PortDirection) {
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3a 87       	std	Y+10, r19	; 0x0a
    14b2:	29 87       	std	Y+9, r18	; 0x09
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <DIO_voidSetPortDirection+0x86>
    14bc:	29 85       	ldd	r18, Y+9	; 0x09
    14be:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c0:	21 30       	cpi	r18, 0x01	; 1
    14c2:	31 05       	cpc	r19, r1
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <DIO_voidSetPortDirection+0x8e>
    14c6:	50 c0       	rjmp	.+160    	; 0x1568 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRA_REG = 0x00;
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	10 82       	st	Z, r1
    14ce:	4c c0       	rjmp	.+152    	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRA_REG = 0xFF;
    14d0:	ea e3       	ldi	r30, 0x3A	; 58
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	80 83       	st	Z, r24
    14d8:	47 c0       	rjmp	.+142    	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTB:
				switch (copy_u8PortDirection) {
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	38 87       	std	Y+8, r19	; 0x08
    14e2:	2f 83       	std	Y+7, r18	; 0x07
    14e4:	8f 81       	ldd	r24, Y+7	; 0x07
    14e6:	98 85       	ldd	r25, Y+8	; 0x08
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <DIO_voidSetPortDirection+0xb6>
    14ec:	2f 81       	ldd	r18, Y+7	; 0x07
    14ee:	38 85       	ldd	r19, Y+8	; 0x08
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	29 f0       	breq	.+10     	; 0x1500 <DIO_voidSetPortDirection+0xbe>
    14f6:	38 c0       	rjmp	.+112    	; 0x1568 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRB_REG = 0x00;
    14f8:	e7 e3       	ldi	r30, 0x37	; 55
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	10 82       	st	Z, r1
    14fe:	34 c0       	rjmp	.+104    	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRB_REG = 0xFF;
    1500:	e7 e3       	ldi	r30, 0x37	; 55
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	80 83       	st	Z, r24
    1508:	2f c0       	rjmp	.+94     	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTC:
				switch (copy_u8PortDirection) {
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3e 83       	std	Y+6, r19	; 0x06
    1512:	2d 83       	std	Y+5, r18	; 0x05
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	31 f0       	breq	.+12     	; 0x1528 <DIO_voidSetPortDirection+0xe6>
    151c:	2d 81       	ldd	r18, Y+5	; 0x05
    151e:	3e 81       	ldd	r19, Y+6	; 0x06
    1520:	21 30       	cpi	r18, 0x01	; 1
    1522:	31 05       	cpc	r19, r1
    1524:	29 f0       	breq	.+10     	; 0x1530 <DIO_voidSetPortDirection+0xee>
    1526:	20 c0       	rjmp	.+64     	; 0x1568 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRC_REG = 0x00;
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	10 82       	st	Z, r1
    152e:	1c c0       	rjmp	.+56     	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRC_REG = 0xFF;
    1530:	e4 e3       	ldi	r30, 0x34	; 52
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	80 83       	st	Z, r24
    1538:	17 c0       	rjmp	.+46     	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
				}
				break;
			case DIO_PORTD:
				switch (copy_u8PortDirection) {
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3c 83       	std	Y+4, r19	; 0x04
    1542:	2b 83       	std	Y+3, r18	; 0x03
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	31 f0       	breq	.+12     	; 0x1558 <DIO_voidSetPortDirection+0x116>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	21 30       	cpi	r18, 0x01	; 1
    1552:	31 05       	cpc	r19, r1
    1554:	29 f0       	breq	.+10     	; 0x1560 <DIO_voidSetPortDirection+0x11e>
    1556:	08 c0       	rjmp	.+16     	; 0x1568 <DIO_voidSetPortDirection+0x126>
					case DIO_PORT_INPUT:
						DDRD_REG = 0x00;
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	10 82       	st	Z, r1
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <DIO_voidSetPortDirection+0x126>
						break;
					case DIO_PORT_OUTPUT:
						DDRD_REG = 0xFF;
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    1568:	2c 96       	adiw	r28, 0x0c	; 12
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <DIO_voidSetPortValue+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_voidSetPortValue+0x8>
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PortValue <= 255))
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	90 f5       	brcc	.+100    	; 0x15f4 <DIO_voidSetPortValue+0x7a>
	{
		switch (copy_u8PortId)
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	3c 83       	std	Y+4, r19	; 0x04
    1598:	2b 83       	std	Y+3, r18	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	d1 f0       	breq	.+52     	; 0x15d8 <DIO_voidSetPortValue+0x5e>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <DIO_voidSetPortValue+0x3e>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	00 97       	sbiw	r24, 0x00	; 0
    15b4:	61 f0       	breq	.+24     	; 0x15ce <DIO_voidSetPortValue+0x54>
    15b6:	1e c0       	rjmp	.+60     	; 0x15f4 <DIO_voidSetPortValue+0x7a>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	81 f0       	breq	.+32     	; 0x15e2 <DIO_voidSetPortValue+0x68>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	91 05       	cpc	r25, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <DIO_voidSetPortValue+0x72>
    15cc:	13 c0       	rjmp	.+38     	; 0x15f4 <DIO_voidSetPortValue+0x7a>
		{
			case DIO_PORTA:
				PORTA_REG = copy_u8PortValue;
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
    15d6:	0e c0       	rjmp	.+28     	; 0x15f4 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTB:
				PORTB_REG = copy_u8PortValue;
    15d8:	e8 e3       	ldi	r30, 0x38	; 56
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 83       	st	Z, r24
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTC:
				PORTC_REG = copy_u8PortValue;
    15e2:	e5 e3       	ldi	r30, 0x35	; 53
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	80 83       	st	Z, r24
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <DIO_voidSetPortValue+0x7a>
				break;
			case DIO_PORTD:
				PORTD_REG = copy_u8PortValue;
    15ec:	e2 e3       	ldi	r30, 0x32	; 50
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_voidGetPortValue>:

void DIO_voidGetPortValue (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_voidGetPortValue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_voidGetPortValue+0x8>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	7b 83       	std	Y+3, r23	; 0x03
    1614:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8PortId <= DIO_PORTD) && (copy_pu8PortValue != NULL))
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	08 f0       	brcs	.+2      	; 0x161e <DIO_voidGetPortValue+0x1c>
    161c:	3e c0       	rjmp	.+124    	; 0x169a <DIO_voidGetPortValue+0x98>
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	d1 f1       	breq	.+116    	; 0x169a <DIO_voidGetPortValue+0x98>
	{
		switch (copy_u8PortId)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3d 83       	std	Y+5, r19	; 0x05
    162e:	2c 83       	std	Y+4, r18	; 0x04
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	e1 f0       	breq	.+56     	; 0x1672 <DIO_voidGetPortValue+0x70>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	2c f4       	brge	.+10     	; 0x164e <DIO_voidGetPortValue+0x4c>
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	9d 81       	ldd	r25, Y+5	; 0x05
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	61 f0       	breq	.+24     	; 0x1664 <DIO_voidGetPortValue+0x62>
    164c:	26 c0       	rjmp	.+76     	; 0x169a <DIO_voidGetPortValue+0x98>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <DIO_voidGetPortValue+0x7e>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	b1 f0       	breq	.+44     	; 0x168e <DIO_voidGetPortValue+0x8c>
    1662:	1b c0       	rjmp	.+54     	; 0x169a <DIO_voidGetPortValue+0x98>
		{
			case DIO_PORTA:
				*copy_pu8PortValue = PINA_REG;
    1664:	e9 e3       	ldi	r30, 0x39	; 57
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	ea 81       	ldd	r30, Y+2	; 0x02
    166c:	fb 81       	ldd	r31, Y+3	; 0x03
    166e:	80 83       	st	Z, r24
    1670:	14 c0       	rjmp	.+40     	; 0x169a <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTB:
				*copy_pu8PortValue = PINB_REG;
    1672:	e6 e3       	ldi	r30, 0x36	; 54
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	ea 81       	ldd	r30, Y+2	; 0x02
    167a:	fb 81       	ldd	r31, Y+3	; 0x03
    167c:	80 83       	st	Z, r24
    167e:	0d c0       	rjmp	.+26     	; 0x169a <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTC:
				*copy_pu8PortValue = PINC_REG;
    1680:	e3 e3       	ldi	r30, 0x33	; 51
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	ea 81       	ldd	r30, Y+2	; 0x02
    1688:	fb 81       	ldd	r31, Y+3	; 0x03
    168a:	80 83       	st	Z, r24
    168c:	06 c0       	rjmp	.+12     	; 0x169a <DIO_voidGetPortValue+0x98>
				break;
			case DIO_PORTD:
				*copy_pu8PortValue = PIND_REG;
    168e:	e0 e3       	ldi	r30, 0x30	; 48
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	ea 81       	ldd	r30, Y+2	; 0x02
    1696:	fb 81       	ldd	r31, Y+3	; 0x03
    1698:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue (u8 copy_u8PortId)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <DIO_voidTogglePortValue+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <DIO_voidTogglePortValue+0x16>
    16be:	3e c0       	rjmp	.+124    	; 0x173c <DIO_voidTogglePortValue+0x92>
	{
		switch (copy_u8PortId)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3b 83       	std	Y+3, r19	; 0x03
    16c8:	2a 83       	std	Y+2, r18	; 0x02
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	e9 f0       	breq	.+58     	; 0x170e <DIO_voidTogglePortValue+0x64>
    16d4:	2a 81       	ldd	r18, Y+2	; 0x02
    16d6:	3b 81       	ldd	r19, Y+3	; 0x03
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <DIO_voidTogglePortValue+0x3e>
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	61 f0       	breq	.+24     	; 0x16fe <DIO_voidTogglePortValue+0x54>
    16e6:	2a c0       	rjmp	.+84     	; 0x173c <DIO_voidTogglePortValue+0x92>
    16e8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ea:	3b 81       	ldd	r19, Y+3	; 0x03
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	b1 f0       	breq	.+44     	; 0x171e <DIO_voidTogglePortValue+0x74>
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	91 05       	cpc	r25, r1
    16fa:	c9 f0       	breq	.+50     	; 0x172e <DIO_voidTogglePortValue+0x84>
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <DIO_voidTogglePortValue+0x92>
		{
			case DIO_PORTA:
				PORTA_REG ^= 0xFF;
    16fe:	ab e3       	ldi	r26, 0x3B	; 59
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	eb e3       	ldi	r30, 0x3B	; 59
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 95       	com	r24
    170a:	8c 93       	st	X, r24
    170c:	17 c0       	rjmp	.+46     	; 0x173c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTB:
				PORTB_REG ^= 0xFF;
    170e:	a8 e3       	ldi	r26, 0x38	; 56
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 e3       	ldi	r30, 0x38	; 56
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 95       	com	r24
    171a:	8c 93       	st	X, r24
    171c:	0f c0       	rjmp	.+30     	; 0x173c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTC:
				PORTC_REG ^= 0xFF;
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 95       	com	r24
    172a:	8c 93       	st	X, r24
    172c:	07 c0       	rjmp	.+14     	; 0x173c <DIO_voidTogglePortValue+0x92>
				break;
			case DIO_PORTD:
				PORTD_REG ^= 0xFF;
    172e:	a2 e3       	ldi	r26, 0x32	; 50
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e2 e3       	ldi	r30, 0x32	; 50
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	80 95       	com	r24
    173a:	8c 93       	st	X, r24
	}
	else
	{
		//return Error State
	}
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <DIO_voidActivatePortInPullUpResistance>:

void DIO_voidActivatePortInPullUpResistance (u8 copy_u8PortId)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_voidActivatePortInPullUpResistance+0x6>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8PortId <= DIO_PORTD))
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	90 f5       	brcc	.+100    	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
	{
		switch (copy_u8PortId)
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3b 83       	std	Y+3, r19	; 0x03
    1764:	2a 83       	std	Y+2, r18	; 0x02
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	d1 f0       	breq	.+52     	; 0x17a4 <DIO_voidActivatePortInPullUpResistance+0x5c>
    1770:	2a 81       	ldd	r18, Y+2	; 0x02
    1772:	3b 81       	ldd	r19, Y+3	; 0x03
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	2c f4       	brge	.+10     	; 0x1784 <DIO_voidActivatePortInPullUpResistance+0x3c>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	61 f0       	breq	.+24     	; 0x179a <DIO_voidActivatePortInPullUpResistance+0x52>
    1782:	1e c0       	rjmp	.+60     	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
    1784:	2a 81       	ldd	r18, Y+2	; 0x02
    1786:	3b 81       	ldd	r19, Y+3	; 0x03
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	81 f0       	breq	.+32     	; 0x17ae <DIO_voidActivatePortInPullUpResistance+0x66>
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	81 f0       	breq	.+32     	; 0x17b8 <DIO_voidActivatePortInPullUpResistance+0x70>
    1798:	13 c0       	rjmp	.+38     	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
		{
			case DIO_PORTA:
				PORTA_REG = 0xFF;
    179a:	eb e3       	ldi	r30, 0x3B	; 59
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	80 83       	st	Z, r24
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTB:
				PORTB_REG = 0xFF;
    17a4:	e8 e3       	ldi	r30, 0x38	; 56
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	80 83       	st	Z, r24
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTC:
				PORTC_REG = 0xFF;
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	80 83       	st	Z, r24
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <DIO_voidActivatePortInPullUpResistance+0x78>
				break;
			case DIO_PORTD:
				PORTD_REG = 0xFF;
    17b8:	e2 e3       	ldi	r30, 0x32	; 50
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit (void)
{
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	cc 54       	subi	r28, 0x4C	; 76
    17da:	d0 40       	sbci	r29, 0x00	; 0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
	/* Initialized LCD pins as Output Pins */
	DIO_voidSetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	65 e0       	ldi	r22, 0x05	; 5
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	66 e0       	ldi	r22, 0x06	; 6
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	63 e0       	ldi	r22, 0x03	; 3
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5b       	subi	r30, 0xB7	; 183
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	ac e0       	ldi	r26, 0x0C	; 12
    1838:	b2 e4       	ldi	r27, 0x42	; 66
    183a:	80 83       	st	Z, r24
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	a2 83       	std	Z+2, r26	; 0x02
    1840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	8e 01       	movw	r16, r28
    1844:	0b 5b       	subi	r16, 0xBB	; 187
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e7 5b       	subi	r30, 0xB7	; 183
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1870:	fe 01       	movw	r30, r28
    1872:	eb 5b       	subi	r30, 0xBB	; 187
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f e3       	ldi	r21, 0x3F	; 63
    1886:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    188a:	88 23       	and	r24, r24
    188c:	44 f4       	brge	.+16     	; 0x189e <LCD_voidInit+0xd2>
		__ticks = 1;
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	64 c0       	rjmp	.+200    	; 0x1966 <LCD_voidInit+0x19a>
	else if (__tmp > 65535)
    189e:	fe 01       	movw	r30, r28
    18a0:	eb 5b       	subi	r30, 0xBB	; 187
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	0c f0       	brlt	.+2      	; 0x18be <LCD_voidInit+0xf2>
    18bc:	43 c0       	rjmp	.+134    	; 0x1944 <LCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	fe 01       	movw	r30, r28
    18c0:	e7 5b       	subi	r30, 0xB7	; 183
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	60 81       	ld	r22, Z
    18c6:	71 81       	ldd	r23, Z+1	; 0x01
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8e 01       	movw	r16, r28
    18de:	0d 5b       	subi	r16, 0xBD	; 189
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	1f c0       	rjmp	.+62     	; 0x1934 <LCD_voidInit+0x168>
    18f6:	fe 01       	movw	r30, r28
    18f8:	ef 5b       	subi	r30, 0xBF	; 191
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1904:	fe 01       	movw	r30, r28
    1906:	ef 5b       	subi	r30, 0xBF	; 191
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <LCD_voidInit+0x142>
    1912:	fe 01       	movw	r30, r28
    1914:	ef 5b       	subi	r30, 0xBF	; 191
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	de 01       	movw	r26, r28
    191e:	ad 5b       	subi	r26, 0xBD	; 189
    1920:	bf 4f       	sbci	r27, 0xFF	; 255
    1922:	fe 01       	movw	r30, r28
    1924:	ed 5b       	subi	r30, 0xBD	; 189
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	9c 93       	st	X, r25
    1932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	fe 01       	movw	r30, r28
    1936:	ed 5b       	subi	r30, 0xBD	; 189
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	d1 f6       	brne	.-76     	; 0x18f6 <LCD_voidInit+0x12a>
    1942:	24 c0       	rjmp	.+72     	; 0x198c <LCD_voidInit+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1944:	8e 01       	movw	r16, r28
    1946:	0d 5b       	subi	r16, 0xBD	; 189
    1948:	1f 4f       	sbci	r17, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	eb 5b       	subi	r30, 0xBB	; 187
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	fe 01       	movw	r30, r28
    1968:	ed 5b       	subi	r30, 0xBD	; 189
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	fe 01       	movw	r30, r28
    1972:	ff 96       	adiw	r30, 0x3f	; 63
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	fe 01       	movw	r30, r28
    197a:	ff 96       	adiw	r30, 0x3f	; 63
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_voidInit+0x1b4>
    1984:	fe 01       	movw	r30, r28
    1986:	ff 96       	adiw	r30, 0x3f	; 63
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
	_delay_ms(35);

	/* N (# of lines) - F (font) */
	/* Function Set (2 Lines, 5*7 font) */
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	62 e0       	ldi	r22, 0x02	; 2
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

	#if LCD_MODE == _4_BIT_MODE

	PRV_voidWriteHalfPort(0b0010);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <PRV_voidWriteHalfPort>
	PRV_voidEnableTriggerWrite();
    19a6:	0e 94 8a 10 	call	0x2114	; 0x2114 <PRV_voidEnableTriggerWrite>
	LCD_voidSendCommand(0b00101000); //0b0010NFXX
    19aa:	88 e2       	ldi	r24, 0x28	; 40
    19ac:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a4 e3       	ldi	r26, 0x34	; 52
    19b6:	b2 e4       	ldi	r27, 0x42	; 66
    19b8:	8b af       	std	Y+59, r24	; 0x3b
    19ba:	9c af       	std	Y+60, r25	; 0x3c
    19bc:	ad af       	std	Y+61, r26	; 0x3d
    19be:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19c0:	6b ad       	ldd	r22, Y+59	; 0x3b
    19c2:	7c ad       	ldd	r23, Y+60	; 0x3c
    19c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c8:	2b ea       	ldi	r18, 0xAB	; 171
    19ca:	3a ea       	ldi	r19, 0xAA	; 170
    19cc:	4a ea       	ldi	r20, 0xAA	; 170
    19ce:	50 e4       	ldi	r21, 0x40	; 64
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f ab       	std	Y+55, r24	; 0x37
    19da:	98 af       	std	Y+56, r25	; 0x38
    19dc:	a9 af       	std	Y+57, r26	; 0x39
    19de:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19e0:	6f a9       	ldd	r22, Y+55	; 0x37
    19e2:	78 ad       	ldd	r23, Y+56	; 0x38
    19e4:	89 ad       	ldd	r24, Y+57	; 0x39
    19e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	1c f4       	brge	.+6      	; 0x19fe <LCD_voidInit+0x232>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8e ab       	std	Y+54, r24	; 0x36
    19fc:	91 c0       	rjmp	.+290    	; 0x1b20 <LCD_voidInit+0x354>
	else if (__tmp > 255)
    19fe:	6f a9       	ldd	r22, Y+55	; 0x37
    1a00:	78 ad       	ldd	r23, Y+56	; 0x38
    1a02:	89 ad       	ldd	r24, Y+57	; 0x39
    1a04:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	53 e4       	ldi	r21, 0x43	; 67
    1a0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <LCD_voidInit+0x24c>
    1a16:	7b c0       	rjmp	.+246    	; 0x1b0e <LCD_voidInit+0x342>
	{
		_delay_ms(__us / 1000.0);
    1a18:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a1a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8a ab       	std	Y+50, r24	; 0x32
    1a32:	9b ab       	std	Y+51, r25	; 0x33
    1a34:	ac ab       	std	Y+52, r26	; 0x34
    1a36:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6a a9       	ldd	r22, Y+50	; 0x32
    1a3a:	7b a9       	ldd	r23, Y+51	; 0x33
    1a3c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a3e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a e7       	ldi	r20, 0x7A	; 122
    1a46:	55 e4       	ldi	r21, 0x45	; 69
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8e a7       	std	Y+46, r24	; 0x2e
    1a52:	9f a7       	std	Y+47, r25	; 0x2f
    1a54:	a8 ab       	std	Y+48, r26	; 0x30
    1a56:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a58:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a5a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a5c:	88 a9       	ldd	r24, Y+48	; 0x30
    1a5e:	99 a9       	ldd	r25, Y+49	; 0x31
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <LCD_voidInit+0x2ae>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9d a7       	std	Y+45, r25	; 0x2d
    1a76:	8c a7       	std	Y+44, r24	; 0x2c
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <LCD_voidInit+0x32c>
	else if (__tmp > 65535)
    1a7a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a7c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a7e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a80:	99 a9       	ldd	r25, Y+49	; 0x31
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <LCD_voidInit+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6a a9       	ldd	r22, Y+50	; 0x32
    1a94:	7b a9       	ldd	r23, Y+51	; 0x33
    1a96:	8c a9       	ldd	r24, Y+52	; 0x34
    1a98:	9d a9       	ldd	r25, Y+53	; 0x35
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9d a7       	std	Y+45, r25	; 0x2d
    1ab8:	8c a7       	std	Y+44, r24	; 0x2c
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <LCD_voidInit+0x30e>
    1abc:	80 e9       	ldi	r24, 0x90	; 144
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	9b a7       	std	Y+43, r25	; 0x2b
    1ac2:	8a a7       	std	Y+42, r24	; 0x2a
    1ac4:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ac6:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_voidInit+0x2fc>
    1acc:	9b a7       	std	Y+43, r25	; 0x2b
    1ace:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ad2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9d a7       	std	Y+45, r25	; 0x2d
    1ad8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8c a5       	ldd	r24, Y+44	; 0x2c
    1adc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <LCD_voidInit+0x2f0>
    1ae2:	24 c0       	rjmp	.+72     	; 0x1b2c <LCD_voidInit+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae8:	88 a9       	ldd	r24, Y+48	; 0x30
    1aea:	99 a9       	ldd	r25, Y+49	; 0x31
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9d a7       	std	Y+45, r25	; 0x2d
    1af6:	8c a7       	std	Y+44, r24	; 0x2c
    1af8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1afa:	9d a5       	ldd	r25, Y+45	; 0x2d
    1afc:	99 a7       	std	Y+41, r25	; 0x29
    1afe:	88 a7       	std	Y+40, r24	; 0x28
    1b00:	88 a5       	ldd	r24, Y+40	; 0x28
    1b02:	99 a5       	ldd	r25, Y+41	; 0x29
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_voidInit+0x338>
    1b08:	99 a7       	std	Y+41, r25	; 0x29
    1b0a:	88 a7       	std	Y+40, r24	; 0x28
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <LCD_voidInit+0x360>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0e:	6f a9       	ldd	r22, Y+55	; 0x37
    1b10:	78 ad       	ldd	r23, Y+56	; 0x38
    1b12:	89 ad       	ldd	r24, Y+57	; 0x39
    1b14:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e ab       	std	Y+54, r24	; 0x36
    1b20:	8e a9       	ldd	r24, Y+54	; 0x36
    1b22:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b24:	8f a1       	ldd	r24, Y+39	; 0x27
    1b26:	8a 95       	dec	r24
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <LCD_voidInit+0x35a>
    1b2a:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(45);

	/* D (display ON/OFF) - C (cursor ON/OFF) - B (blink cursor ON/OFF) */
	/* Display On/Off Control (Display on, Cursor on, Blink on) */
	LCD_voidSendCommand(0b00001100); //ob00001DCB
    1b2c:	8c e0       	ldi	r24, 0x0C	; 12
    1b2e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a4 e3       	ldi	r26, 0x34	; 52
    1b38:	b2 e4       	ldi	r27, 0x42	; 66
    1b3a:	8b a3       	std	Y+35, r24	; 0x23
    1b3c:	9c a3       	std	Y+36, r25	; 0x24
    1b3e:	ad a3       	std	Y+37, r26	; 0x25
    1b40:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b42:	6b a1       	ldd	r22, Y+35	; 0x23
    1b44:	7c a1       	ldd	r23, Y+36	; 0x24
    1b46:	8d a1       	ldd	r24, Y+37	; 0x25
    1b48:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4a:	2b ea       	ldi	r18, 0xAB	; 171
    1b4c:	3a ea       	ldi	r19, 0xAA	; 170
    1b4e:	4a ea       	ldi	r20, 0xAA	; 170
    1b50:	50 e4       	ldi	r21, 0x40	; 64
    1b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5c:	98 a3       	std	Y+32, r25	; 0x20
    1b5e:	a9 a3       	std	Y+33, r26	; 0x21
    1b60:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b64:	78 a1       	ldd	r23, Y+32	; 0x20
    1b66:	89 a1       	ldd	r24, Y+33	; 0x21
    1b68:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	1c f4       	brge	.+6      	; 0x1b80 <LCD_voidInit+0x3b4>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	8e 8f       	std	Y+30, r24	; 0x1e
    1b7e:	91 c0       	rjmp	.+290    	; 0x1ca2 <LCD_voidInit+0x4d6>
	else if (__tmp > 255)
    1b80:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b82:	78 a1       	ldd	r23, Y+32	; 0x20
    1b84:	89 a1       	ldd	r24, Y+33	; 0x21
    1b86:	9a a1       	ldd	r25, Y+34	; 0x22
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <LCD_voidInit+0x3ce>
    1b98:	7b c0       	rjmp	.+246    	; 0x1c90 <LCD_voidInit+0x4c4>
	{
		_delay_ms(__us / 1000.0);
    1b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a e7       	ldi	r20, 0x7A	; 122
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8a 8f       	std	Y+26, r24	; 0x1a
    1bb4:	9b 8f       	std	Y+27, r25	; 0x1b
    1bb6:	ac 8f       	std	Y+28, r26	; 0x1c
    1bb8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bbc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a e7       	ldi	r20, 0x7A	; 122
    1bc8:	55 e4       	ldi	r21, 0x45	; 69
    1bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8e 8b       	std	Y+22, r24	; 0x16
    1bd4:	9f 8b       	std	Y+23, r25	; 0x17
    1bd6:	a8 8f       	std	Y+24, r26	; 0x18
    1bd8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bda:	6e 89       	ldd	r22, Y+22	; 0x16
    1bdc:	7f 89       	ldd	r23, Y+23	; 0x17
    1bde:	88 8d       	ldd	r24, Y+24	; 0x18
    1be0:	99 8d       	ldd	r25, Y+25	; 0x19
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <LCD_voidInit+0x430>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9d 8b       	std	Y+21, r25	; 0x15
    1bf8:	8c 8b       	std	Y+20, r24	; 0x14
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <LCD_voidInit+0x4ae>
	else if (__tmp > 65535)
    1bfc:	6e 89       	ldd	r22, Y+22	; 0x16
    1bfe:	7f 89       	ldd	r23, Y+23	; 0x17
    1c00:	88 8d       	ldd	r24, Y+24	; 0x18
    1c02:	99 8d       	ldd	r25, Y+25	; 0x19
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <LCD_voidInit+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c16:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e2       	ldi	r20, 0x20	; 32
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9d 8b       	std	Y+21, r25	; 0x15
    1c3a:	8c 8b       	std	Y+20, r24	; 0x14
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <LCD_voidInit+0x490>
    1c3e:	80 e9       	ldi	r24, 0x90	; 144
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	9b 8b       	std	Y+19, r25	; 0x13
    1c44:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c46:	8a 89       	ldd	r24, Y+18	; 0x12
    1c48:	9b 89       	ldd	r25, Y+19	; 0x13
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_voidInit+0x47e>
    1c4e:	9b 8b       	std	Y+19, r25	; 0x13
    1c50:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8c 89       	ldd	r24, Y+20	; 0x14
    1c54:	9d 89       	ldd	r25, Y+21	; 0x15
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	9d 8b       	std	Y+21, r25	; 0x15
    1c5a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c5e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <LCD_voidInit+0x472>
    1c64:	24 c0       	rjmp	.+72     	; 0x1cae <LCD_voidInit+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	6e 89       	ldd	r22, Y+22	; 0x16
    1c68:	7f 89       	ldd	r23, Y+23	; 0x17
    1c6a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9d 8b       	std	Y+21, r25	; 0x15
    1c78:	8c 8b       	std	Y+20, r24	; 0x14
    1c7a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c7e:	99 8b       	std	Y+17, r25	; 0x11
    1c80:	88 8b       	std	Y+16, r24	; 0x10
    1c82:	88 89       	ldd	r24, Y+16	; 0x10
    1c84:	99 89       	ldd	r25, Y+17	; 0x11
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_voidInit+0x4ba>
    1c8a:	99 8b       	std	Y+17, r25	; 0x11
    1c8c:	88 8b       	std	Y+16, r24	; 0x10
    1c8e:	0f c0       	rjmp	.+30     	; 0x1cae <LCD_voidInit+0x4e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c90:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c92:	78 a1       	ldd	r23, Y+32	; 0x20
    1c94:	89 a1       	ldd	r24, Y+33	; 0x21
    1c96:	9a a1       	ldd	r25, Y+34	; 0x22
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	8a 95       	dec	r24
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_voidInit+0x4dc>
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);

	/* Display Clear */
	LCD_voidSendCommand(0b00000001);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e4       	ldi	r27, 0x40	; 64
    1cbc:	8b 87       	std	Y+11, r24	; 0x0b
    1cbe:	9c 87       	std	Y+12, r25	; 0x0c
    1cc0:	ad 87       	std	Y+13, r26	; 0x0d
    1cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a e7       	ldi	r20, 0x7A	; 122
    1cd2:	55 e4       	ldi	r21, 0x45	; 69
    1cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8f 83       	std	Y+7, r24	; 0x07
    1cde:	98 87       	std	Y+8, r25	; 0x08
    1ce0:	a9 87       	std	Y+9, r26	; 0x09
    1ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <LCD_voidInit+0x53a>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <LCD_voidInit+0x5b8>
	else if (__tmp > 65535)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <LCD_voidInit+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_voidInit+0x59a>
    1d48:	80 e9       	ldi	r24, 0x90	; 144
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_voidInit+0x588>
    1d58:	9c 83       	std	Y+4, r25	; 0x04
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <LCD_voidInit+0x57c>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <LCD_voidInit+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_voidInit+0x5c4>
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* I (increment mode (inc = 1 / dec = 0)) - S (shift) */
	/* Entry Mode Set (Increment on, Shift off) */
	LCD_voidSendCommand(0b00000110); //0b000001IS
    1d98:	86 e0       	ldi	r24, 0x06	; 6
    1d9a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>

}
    1d9e:	c4 5b       	subi	r28, 0xB4	; 180
    1da0:	df 4f       	sbci	r29, 0xFF	; 255
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar (u8 copy_u8Data)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 1 (data) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data>>4);
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	82 95       	swap	r24
    1dda:	8f 70       	andi	r24, 0x0F	; 15
    1ddc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    1de0:	0e 94 8a 10 	call	0x2114	; 0x2114 <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of data on Data Pins */
	PRV_voidWriteHalfPort(copy_u8Data);
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    1dea:	0e 94 8a 10 	call	0x2114	; 0x2114 <PRV_voidEnableTriggerWrite>
}
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 copy_u8cmnd)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	0f 92       	push	r0
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	89 83       	std	Y+1, r24	; 0x01
	/* set Rs pin = 0 (command) */
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

	/* set RW pin = 0 (write) */
	DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

	/* Write The Most 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd>>4);
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	82 95       	swap	r24
    1e1a:	8f 70       	andi	r24, 0x0F	; 15
    1e1c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    1e20:	0e 94 8a 10 	call	0x2114	; 0x2114 <PRV_voidEnableTriggerWrite>

	/* Write The Least 4 bits of command on Data Pins */
	PRV_voidWriteHalfPort(copy_u8cmnd);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <PRV_voidWriteHalfPort>

	/* Enable */
	PRV_voidEnableTriggerWrite();
    1e2a:	0e 94 8a 10 	call	0x2114	; 0x2114 <PRV_voidEnableTriggerWrite>
}
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_voidDisplayString>:

void LCD_voidDisplayString (u8* copy_pu8String)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LCD_voidDisplayString+0x6>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
	if (copy_pu8String != NULL) {
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	d9 f0       	breq	.+54     	; 0x1e84 <LCD_voidDisplayString+0x4e>
		u8 local_u8i = 0;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <LCD_voidDisplayString+0x38>
		while(copy_pu8String[local_u8i]!='\0')
		{
			LCD_voidDisplayChar(copy_pu8String[local_u8i]);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
			local_u8i++;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidDisplayString (u8* copy_pu8String)
{
	if (copy_pu8String != NULL) {
		u8 local_u8i = 0;
		while(copy_pu8String[local_u8i]!='\0')
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e2 0f       	add	r30, r18
    1e7c:	f3 1f       	adc	r31, r19
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	39 f7       	brne	.-50     	; 0x1e52 <LCD_voidDisplayString+0x1c>
			local_u8i++;
		}
	} else {
		//return Error State
	}
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber (u32 copy_u32Number)
{
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	65 97       	sbiw	r28, 0x15	; 21
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	6a 8b       	std	Y+18, r22	; 0x12
    1eaa:	7b 8b       	std	Y+19, r23	; 0x13
    1eac:	8c 8b       	std	Y+20, r24	; 0x14
    1eae:	9d 8b       	std	Y+21, r25	; 0x15
	if (copy_u32Number == 0) {
    1eb0:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb2:	9b 89       	ldd	r25, Y+19	; 0x13
    1eb4:	ac 89       	ldd	r26, Y+20	; 0x14
    1eb6:	bd 89       	ldd	r27, Y+21	; 0x15
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	a1 05       	cpc	r26, r1
    1ebc:	b1 05       	cpc	r27, r1
    1ebe:	21 f4       	brne	.+8      	; 0x1ec8 <LCD_voidDisplayNumber+0x38>
		LCD_voidDisplayChar(48);
    1ec0:	80 e3       	ldi	r24, 0x30	; 48
    1ec2:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
    1ec6:	51 c0       	rjmp	.+162    	; 0x1f6a <LCD_voidDisplayNumber+0xda>
	} else {
		s8 local_u8i = 0;
    1ec8:	19 82       	std	Y+1, r1	; 0x01
    1eca:	30 c0       	rjmp	.+96     	; 0x1f2c <LCD_voidDisplayNumber+0x9c>
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	08 2f       	mov	r16, r24
    1ed0:	11 27       	eor	r17, r17
    1ed2:	07 fd       	sbrc	r16, 7
    1ed4:	10 95       	com	r17
    1ed6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ed8:	9b 89       	ldd	r25, Y+19	; 0x13
    1eda:	ac 89       	ldd	r26, Y+20	; 0x14
    1edc:	bd 89       	ldd	r27, Y+21	; 0x15
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__udivmodsi4>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	20 5d       	subi	r18, 0xD0	; 208
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	02 96       	adiw	r24, 0x02	; 2
    1efa:	fc 01       	movw	r30, r24
    1efc:	e0 0f       	add	r30, r16
    1efe:	f1 1f       	adc	r31, r17
    1f00:	20 83       	st	Z, r18
			local_u8i++;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	89 83       	std	Y+1, r24	; 0x01
			copy_u32Number /= 10;
    1f08:	8a 89       	ldd	r24, Y+18	; 0x12
    1f0a:	9b 89       	ldd	r25, Y+19	; 0x13
    1f0c:	ac 89       	ldd	r26, Y+20	; 0x14
    1f0e:	bd 89       	ldd	r27, Y+21	; 0x15
    1f10:	2a e0       	ldi	r18, 0x0A	; 10
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	50 e0       	ldi	r21, 0x00	; 0
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__udivmodsi4>
    1f20:	da 01       	movw	r26, r20
    1f22:	c9 01       	movw	r24, r18
    1f24:	8a 8b       	std	Y+18, r24	; 0x12
    1f26:	9b 8b       	std	Y+19, r25	; 0x13
    1f28:	ac 8b       	std	Y+20, r26	; 0x14
    1f2a:	bd 8b       	std	Y+21, r27	; 0x15
	if (copy_u32Number == 0) {
		LCD_voidDisplayChar(48);
	} else {
		s8 local_u8i = 0;
		u8 local_u8Number[16];
		while(copy_u32Number != 0)
    1f2c:	8a 89       	ldd	r24, Y+18	; 0x12
    1f2e:	9b 89       	ldd	r25, Y+19	; 0x13
    1f30:	ac 89       	ldd	r26, Y+20	; 0x14
    1f32:	bd 89       	ldd	r27, Y+21	; 0x15
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	a1 05       	cpc	r26, r1
    1f38:	b1 05       	cpc	r27, r1
    1f3a:	41 f6       	brne	.-112    	; 0x1ecc <LCD_voidDisplayNumber+0x3c>
		{
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	81 50       	subi	r24, 0x01	; 1
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	10 c0       	rjmp	.+32     	; 0x1f64 <LCD_voidDisplayNumber+0xd4>
		while(local_u8i >= 0)
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	28 2f       	mov	r18, r24
    1f48:	33 27       	eor	r19, r19
    1f4a:	27 fd       	sbrc	r18, 7
    1f4c:	30 95       	com	r19
    1f4e:	ce 01       	movw	r24, r28
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	fc 01       	movw	r30, r24
    1f54:	e2 0f       	add	r30, r18
    1f56:	f3 1f       	adc	r31, r19
    1f58:	80 81       	ld	r24, Z
    1f5a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
			local_u8i--;
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	81 50       	subi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
			local_u8Number[local_u8i] = copy_u32Number%10 + 48;
			local_u8i++;
			copy_u32Number /= 10;
		}
		local_u8i--;
		while(local_u8i >= 0)
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	88 23       	and	r24, r24
    1f68:	6c f7       	brge	.-38     	; 0x1f44 <LCD_voidDisplayNumber+0xb4>
		{
			LCD_voidDisplayChar(local_u8Number[local_u8i]);
			local_u8i--;
		}
	}
}
    1f6a:	65 96       	adiw	r28, 0x15	; 21
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	08 95       	ret

00001f80 <LCD_voidDrawData>:

void LCD_voidDrawData(u8 copy_u8Pattern , u8* copy_pu8Data , u8 copy_u8X , u8 copy_u8Y){
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	27 97       	sbiw	r28, 0x07	; 7
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	7d 83       	std	Y+5, r23	; 0x05
    1f98:	6c 83       	std	Y+4, r22	; 0x04
    1f9a:	4e 83       	std	Y+6, r20	; 0x06
    1f9c:	2f 83       	std	Y+7, r18	; 0x07
	  u8 loc_i=0 ;
    1f9e:	1a 82       	std	Y+2, r1	; 0x02
	  u8 address_CGRAM=copy_u8Pattern*8 ;  // set address
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	  /* set CGRAM */
	  CLR_BIT(address_CGRAM,7) ;
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	8f 77       	andi	r24, 0x7F	; 127
    1fb8:	89 83       	std	Y+1, r24	; 0x01
	  SET_BIT(address_CGRAM,6) ;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	80 64       	ori	r24, 0x40	; 64
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	  LCD_voidSendCommand(address_CGRAM) ;
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    1fc6:	1a 82       	std	Y+2, r1	; 0x02
    1fc8:	0e c0       	rjmp	.+28     	; 0x1fe6 <LCD_voidDrawData+0x66>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	80 81       	ld	r24, Z
    1fdc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
	  CLR_BIT(address_CGRAM,7) ;
	  SET_BIT(address_CGRAM,6) ;
	  LCD_voidSendCommand(address_CGRAM) ;

	  /* draw data in CGRAM */
	  for (loc_i=0 ; loc_i<8 ;loc_i++)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	78 f3       	brcs	.-34     	; 0x1fca <LCD_voidDrawData+0x4a>
	  {
		  LCD_voidDisplayChar(copy_pu8Data[loc_i]);
	  }
	  LCD_voidGoToSpecificPosition(copy_u8X,copy_u8Y);
    1fec:	8e 81       	ldd	r24, Y+6	; 0x06
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_voidGoToSpecificPosition>
	  LCD_voidDisplayChar(copy_u8Pattern) ;
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
}
    1ffa:	27 96       	adiw	r28, 0x07	; 7
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <LCD_voidClear>:

void LCD_voidClear (void)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(0b00000001);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <LCD_voidShift>:

void LCD_voidShift (u8 copy_u8ShiftingDirection)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <LCD_voidShift+0x6>
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	89 83       	std	Y+1, r24	; 0x01
	if (copy_u8ShiftingDirection <= LCD_SHIFT_RIGHT) {
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	b0 f4       	brcc	.+44     	; 0x2060 <LCD_voidShift+0x40>
		switch (copy_u8ShiftingDirection) {
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3b 83       	std	Y+3, r19	; 0x03
    203c:	2a 83       	std	Y+2, r18	; 0x02
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	31 f0       	breq	.+12     	; 0x2052 <LCD_voidShift+0x32>
    2046:	2a 81       	ldd	r18, Y+2	; 0x02
    2048:	3b 81       	ldd	r19, Y+3	; 0x03
    204a:	21 30       	cpi	r18, 0x01	; 1
    204c:	31 05       	cpc	r19, r1
    204e:	29 f0       	breq	.+10     	; 0x205a <LCD_voidShift+0x3a>
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <LCD_voidShift+0x40>
			case LCD_SHIFT_LEFT:
				LCD_voidSendCommand(0b00011000);
    2052:	88 e1       	ldi	r24, 0x18	; 24
    2054:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
    2058:	03 c0       	rjmp	.+6      	; 0x2060 <LCD_voidShift+0x40>
				break;
			case LCD_SHIFT_RIGHT:
				LCD_voidSendCommand(0b00011100);
    205a:	8c e1       	ldi	r24, 0x1C	; 28
    205c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
				break;
		}
	} else {
		//return Error State
	}
}
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <LCD_voidGoToSpecificPosition>:

void LCD_voidGoToSpecificPosition (u8 copy_u8LineNumber, u8 copy_u8Position)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <LCD_voidGoToSpecificPosition+0x6>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	8a 83       	std	Y+2, r24	; 0x02
    207a:	6b 83       	std	Y+3, r22	; 0x03
	/* set address */
	u8 ddram_address= copy_u8Position+copy_u8LineNumber*0x40 ;
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	00 24       	eor	r0, r0
    2084:	96 95       	lsr	r25
    2086:	87 95       	ror	r24
    2088:	07 94       	ror	r0
    208a:	96 95       	lsr	r25
    208c:	87 95       	ror	r24
    208e:	07 94       	ror	r0
    2090:	98 2f       	mov	r25, r24
    2092:	80 2d       	mov	r24, r0
    2094:	98 2f       	mov	r25, r24
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	89 0f       	add	r24, r25
    209a:	89 83       	std	Y+1, r24	; 0x01

	/*set DDRAM */
	SET_BIT(ddram_address,7) ;  // set bit7 in ddram
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	80 68       	ori	r24, 0x80	; 128
    20a0:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(ddram_address) ;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <LCD_voidSendCommand>
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <PRV_voidWriteHalfPort>:

static void PRV_voidWriteHalfPort (u8 copy_u8cmnd)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	0f 92       	push	r0
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(copy_u8cmnd,0));
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	98 2f       	mov	r25, r24
    20c4:	91 70       	andi	r25, 0x01	; 1
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	64 e0       	ldi	r22, 0x04	; 4
    20ca:	49 2f       	mov	r20, r25
    20cc:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(copy_u8cmnd,1));
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	86 95       	lsr	r24
    20d4:	98 2f       	mov	r25, r24
    20d6:	91 70       	andi	r25, 0x01	; 1
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	65 e0       	ldi	r22, 0x05	; 5
    20dc:	49 2f       	mov	r20, r25
    20de:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(copy_u8cmnd,2));
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	86 95       	lsr	r24
    20e6:	86 95       	lsr	r24
    20e8:	98 2f       	mov	r25, r24
    20ea:	91 70       	andi	r25, 0x01	; 1
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	66 e0       	ldi	r22, 0x06	; 6
    20f0:	49 2f       	mov	r20, r25
    20f2:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(copy_u8cmnd,3));
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	86 95       	lsr	r24
    20fa:	86 95       	lsr	r24
    20fc:	86 95       	lsr	r24
    20fe:	98 2f       	mov	r25, r24
    2100:	91 70       	andi	r25, 0x01	; 1
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	67 e0       	ldi	r22, 0x07	; 7
    2106:	49 2f       	mov	r20, r25
    2108:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
}
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <PRV_voidEnableTriggerWrite>:


static void PRV_voidEnableTriggerWrite (void)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	2e 97       	sbiw	r28, 0x0e	; 14
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
	/* Enable Pulse *//* H => L */
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	63 e0       	ldi	r22, 0x03	; 3
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e8       	ldi	r26, 0x80	; 128
    2138:	bf e3       	ldi	r27, 0x3F	; 63
    213a:	8b 87       	std	Y+11, r24	; 0x0b
    213c:	9c 87       	std	Y+12, r25	; 0x0c
    213e:	ad 87       	std	Y+13, r26	; 0x0d
    2140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	6b 85       	ldd	r22, Y+11	; 0x0b
    2144:	7c 85       	ldd	r23, Y+12	; 0x0c
    2146:	8d 85       	ldd	r24, Y+13	; 0x0d
    2148:	9e 85       	ldd	r25, Y+14	; 0x0e
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	55 e4       	ldi	r21, 0x45	; 69
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f 83       	std	Y+7, r24	; 0x07
    215c:	98 87       	std	Y+8, r25	; 0x08
    215e:	a9 87       	std	Y+9, r26	; 0x09
    2160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <PRV_voidEnableTriggerWrite+0x70>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <PRV_voidEnableTriggerWrite+0xee>
	else if (__tmp > 65535)
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <PRV_voidEnableTriggerWrite+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <PRV_voidEnableTriggerWrite+0xd0>
    21c6:	80 e9       	ldi	r24, 0x90	; 144
    21c8:	91 e0       	ldi	r25, 0x01	; 1
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <PRV_voidEnableTriggerWrite+0xbe>
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <PRV_voidEnableTriggerWrite+0xb2>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <PRV_voidEnableTriggerWrite+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <PRV_voidEnableTriggerWrite+0xfa>
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	63 e0       	ldi	r22, 0x03	; 3
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
}
    2220:	2e 96       	adiw	r28, 0x0e	; 14
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <KEYPAD_voidInit>:
										{4,5,6,'*'},
										{1,2,3,'-'},
										{'c','0','=','+'}	};

void KEYPAD_voidInit (void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	29 97       	sbiw	r28, 0x09	; 9
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    2246:	84 e0       	ldi	r24, 0x04	; 4
    2248:	8a 83       	std	Y+2, r24	; 0x02
    224a:	85 e0       	ldi	r24, 0x05	; 5
    224c:	8b 83       	std	Y+3, r24	; 0x03
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	8c 83       	std	Y+4, r24	; 0x04
    2252:	87 e0       	ldi	r24, 0x07	; 7
    2254:	8d 83       	std	Y+5, r24	; 0x05
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	8e 83       	std	Y+6, r24	; 0x06
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	8f 83       	std	Y+7, r24	; 0x07
    225e:	84 e0       	ldi	r24, 0x04	; 4
    2260:	88 87       	std	Y+8, r24	; 0x08
    2262:	85 e0       	ldi	r24, 0x05	; 5
    2264:	89 87       	std	Y+9, r24	; 0x09

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    2266:	19 82       	std	Y+1, r1	; 0x01
    2268:	3b c0       	rjmp	.+118    	; 0x22e0 <KEYPAD_voidInit+0xae>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	ce 01       	movw	r24, r28
    2272:	02 96       	adiw	r24, 0x02	; 2
    2274:	fc 01       	movw	r30, r24
    2276:	e2 0f       	add	r30, r18
    2278:	f3 1f       	adc	r31, r19
    227a:	90 81       	ld	r25, Z
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	69 2f       	mov	r22, r25
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	ce 01       	movw	r24, r28
    228e:	02 96       	adiw	r24, 0x02	; 2
    2290:	fc 01       	movw	r30, r24
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	90 81       	ld	r25, Z
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	69 2f       	mov	r22, r25
    229c:	41 e0       	ldi	r20, 0x01	; 1
    229e:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	ce 01       	movw	r24, r28
    22aa:	06 96       	adiw	r24, 0x06	; 6
    22ac:	fc 01       	movw	r30, r24
    22ae:	e2 0f       	add	r30, r18
    22b0:	f3 1f       	adc	r31, r19
    22b2:	90 81       	ld	r25, Z
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	69 2f       	mov	r22, r25
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	ce 01       	movw	r24, r28
    22c6:	06 96       	adiw	r24, 0x06	; 6
    22c8:	fc 01       	movw	r30, r24
    22ca:	e2 0f       	add	r30, r18
    22cc:	f3 1f       	adc	r31, r19
    22ce:	90 81       	ld	r25, Z
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	69 2f       	mov	r22, r25
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
{
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8i;
	for (local_u8i = 0; local_u8i < COLS_NUM; ++local_u8i) {
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	8f 5f       	subi	r24, 0xFF	; 255
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	84 30       	cpi	r24, 0x04	; 4
    22e4:	10 f2       	brcs	.-124    	; 0x226a <KEYPAD_voidInit+0x38>
		DIO_voidSetPinDirection(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_INPUT);
		DIO_voidSetPinValue(KeyPad_RPORT,ROW_ARR[local_u8i],DIO_PIN_HIGH);
		DIO_voidSetPinDirection(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_OUTPUT);
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8i],DIO_PIN_HIGH);
	}
}
    22e6:	29 96       	adiw	r28, 0x09	; 9
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <KEYPAD_u8AdjustKeyPadNum>:

u8 KEYPAD_u8AdjustKeyPadNum	(void)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	2c 97       	sbiw	r28, 0x0c	; 12
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
	u8 ROW_ARR[ROWS_NUM] = {KeyPad_R1_PIN,KeyPad_R2_PIN,KeyPad_R3_PIN,KeyPad_R4_PIN};
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	8c 83       	std	Y+4, r24	; 0x04
    2310:	85 e0       	ldi	r24, 0x05	; 5
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	86 e0       	ldi	r24, 0x06	; 6
    2316:	8e 83       	std	Y+6, r24	; 0x06
    2318:	87 e0       	ldi	r24, 0x07	; 7
    231a:	8f 83       	std	Y+7, r24	; 0x07
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	83 e0       	ldi	r24, 0x03	; 3
    2322:	89 87       	std	Y+9, r24	; 0x09
    2324:	84 e0       	ldi	r24, 0x04	; 4
    2326:	8a 87       	std	Y+10, r24	; 0x0a
    2328:	85 e0       	ldi	r24, 0x05	; 5
    232a:	8b 87       	std	Y+11, r24	; 0x0b

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	89 83       	std	Y+1, r24	; 0x01

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    2330:	1a 82       	std	Y+2, r1	; 0x02
    2332:	5a c0       	rjmp	.+180    	; 0x23e8 <KEYPAD_u8AdjustKeyPadNum+0xf0>
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	ce 01       	movw	r24, r28
    233c:	08 96       	adiw	r24, 0x08	; 8
    233e:	fc 01       	movw	r30, r24
    2340:	e2 0f       	add	r30, r18
    2342:	f3 1f       	adc	r31, r19
    2344:	90 81       	ld	r25, Z
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	69 2f       	mov	r22, r25
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    2350:	1b 82       	std	Y+3, r1	; 0x03
    2352:	36 c0       	rjmp	.+108    	; 0x23c0 <KEYPAD_u8AdjustKeyPadNum+0xc8>
			if(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0)
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	ce 01       	movw	r24, r28
    235c:	04 96       	adiw	r24, 0x04	; 4
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	90 81       	ld	r25, Z
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	69 2f       	mov	r22, r25
    236a:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8GetPinValue>
    236e:	88 23       	and	r24, r24
    2370:	21 f5       	brne	.+72     	; 0x23ba <KEYPAD_u8AdjustKeyPadNum+0xc2>
			{
				val = KEYPAD_ARR[local_u8Row][local_u8Col];
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	48 2f       	mov	r20, r24
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	ca 01       	movw	r24, r20
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	fc 01       	movw	r30, r24
    238e:	e6 57       	subi	r30, 0x76	; 118
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	89 83       	std	Y+1, r24	; 0x01
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	ce 01       	movw	r24, r28
    239e:	04 96       	adiw	r24, 0x04	; 4
    23a0:	fc 01       	movw	r30, r24
    23a2:	e2 0f       	add	r30, r18
    23a4:	f3 1f       	adc	r31, r19
    23a6:	90 81       	ld	r25, Z
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	69 2f       	mov	r22, r25
    23ac:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_u8GetPinValue>
    23b0:	88 23       	and	r24, r24
    23b2:	89 f3       	breq	.-30     	; 0x2396 <KEYPAD_u8AdjustKeyPadNum+0x9e>
				return val;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	8c 87       	std	Y+12, r24	; 0x0c
    23b8:	1d c0       	rjmp	.+58     	; 0x23f4 <KEYPAD_u8AdjustKeyPadNum+0xfc>
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_LOW);

		for (local_u8Row = 0; local_u8Row < ROWS_NUM; ++local_u8Row) {
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	84 30       	cpi	r24, 0x04	; 4
    23c4:	38 f2       	brcs	.-114    	; 0x2354 <KEYPAD_u8AdjustKeyPadNum+0x5c>
				while(DIO_u8GetPinValue(KeyPad_RPORT,ROW_ARR[local_u8Row]) == 0){}
				return val;
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	ce 01       	movw	r24, r28
    23ce:	08 96       	adiw	r24, 0x08	; 8
    23d0:	fc 01       	movw	r30, r24
    23d2:	e2 0f       	add	r30, r18
    23d4:	f3 1f       	adc	r31, r19
    23d6:	90 81       	ld	r25, Z
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	69 2f       	mov	r22, r25
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
	u8 COL_ARR[COLS_NUM] = {KeyPad_C1_PIN,KeyPad_C2_PIN,KeyPad_C3_PIN,KeyPad_C4_PIN};

	u8 local_u8Row, local_u8Col;
	u8 val = 0xFF;

	for (local_u8Col = 0; local_u8Col < COLS_NUM; ++local_u8Col) {
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	8a 83       	std	Y+2, r24	; 0x02
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	84 30       	cpi	r24, 0x04	; 4
    23ec:	08 f4       	brcc	.+2      	; 0x23f0 <KEYPAD_u8AdjustKeyPadNum+0xf8>
    23ee:	a2 cf       	rjmp	.-188    	; 0x2334 <KEYPAD_u8AdjustKeyPadNum+0x3c>
			}
		}

		DIO_voidSetPinValue(KeyPad_CPORT,COL_ARR[local_u8Col],DIO_PIN_HIGH);
	}
	return val;
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	8c 87       	std	Y+12, r24	; 0x0c
    23f4:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    23f6:	2c 96       	adiw	r28, 0x0c	; 12
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <main>:
#define F_CPU 16000000UL

#include <util/delay.h>

int main()
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	ce 5a       	subi	r28, 0xAE	; 174
    2412:	d0 40       	sbci	r29, 0x00	; 0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
	u8 counter = 0;
    241e:	fe 01       	movw	r30, r28
    2420:	ef 5b       	subi	r30, 0xBF	; 191
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	10 82       	st	Z, r1
	u16 psw = 1234;
    2426:	82 ed       	ldi	r24, 0xD2	; 210
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	fe 01       	movw	r30, r28
    242c:	ff 96       	adiw	r30, 0x3f	; 63
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
	u16 entered_psw;
	u8 i, num = 0xFF;
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	8b af       	std	Y+59, r24	; 0x3b

	u8 Correct_psw[] = {"CORRECT PASSWORD"};
    2436:	ce 01       	movw	r24, r28
    2438:	8e 5b       	subi	r24, 0xBE	; 190
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	c4 57       	subi	r28, 0x74	; 116
    243e:	df 4f       	sbci	r29, 0xFF	; 255
    2440:	99 83       	std	Y+1, r25	; 0x01
    2442:	88 83       	st	Y, r24
    2444:	cc 58       	subi	r28, 0x8C	; 140
    2446:	d0 40       	sbci	r29, 0x00	; 0
    2448:	80 e6       	ldi	r24, 0x60	; 96
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	c2 57       	subi	r28, 0x72	; 114
    244e:	df 4f       	sbci	r29, 0xFF	; 255
    2450:	99 83       	std	Y+1, r25	; 0x01
    2452:	88 83       	st	Y, r24
    2454:	ce 58       	subi	r28, 0x8E	; 142
    2456:	d0 40       	sbci	r29, 0x00	; 0
    2458:	91 e1       	ldi	r25, 0x11	; 17
    245a:	c0 57       	subi	r28, 0x70	; 112
    245c:	df 4f       	sbci	r29, 0xFF	; 255
    245e:	98 83       	st	Y, r25
    2460:	c0 59       	subi	r28, 0x90	; 144
    2462:	d0 40       	sbci	r29, 0x00	; 0
    2464:	c2 57       	subi	r28, 0x72	; 114
    2466:	df 4f       	sbci	r29, 0xFF	; 255
    2468:	e8 81       	ld	r30, Y
    246a:	f9 81       	ldd	r31, Y+1	; 0x01
    246c:	ce 58       	subi	r28, 0x8E	; 142
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	00 80       	ld	r0, Z
    2472:	c2 57       	subi	r28, 0x72	; 114
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	88 81       	ld	r24, Y
    2478:	99 81       	ldd	r25, Y+1	; 0x01
    247a:	ce 58       	subi	r28, 0x8E	; 142
    247c:	d0 40       	sbci	r29, 0x00	; 0
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	c2 57       	subi	r28, 0x72	; 114
    2482:	df 4f       	sbci	r29, 0xFF	; 255
    2484:	99 83       	std	Y+1, r25	; 0x01
    2486:	88 83       	st	Y, r24
    2488:	ce 58       	subi	r28, 0x8E	; 142
    248a:	d0 40       	sbci	r29, 0x00	; 0
    248c:	c4 57       	subi	r28, 0x74	; 116
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	e8 81       	ld	r30, Y
    2492:	f9 81       	ldd	r31, Y+1	; 0x01
    2494:	cc 58       	subi	r28, 0x8C	; 140
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	00 82       	st	Z, r0
    249a:	c4 57       	subi	r28, 0x74	; 116
    249c:	df 4f       	sbci	r29, 0xFF	; 255
    249e:	88 81       	ld	r24, Y
    24a0:	99 81       	ldd	r25, Y+1	; 0x01
    24a2:	cc 58       	subi	r28, 0x8C	; 140
    24a4:	d0 40       	sbci	r29, 0x00	; 0
    24a6:	01 96       	adiw	r24, 0x01	; 1
    24a8:	c4 57       	subi	r28, 0x74	; 116
    24aa:	df 4f       	sbci	r29, 0xFF	; 255
    24ac:	99 83       	std	Y+1, r25	; 0x01
    24ae:	88 83       	st	Y, r24
    24b0:	cc 58       	subi	r28, 0x8C	; 140
    24b2:	d0 40       	sbci	r29, 0x00	; 0
    24b4:	c0 57       	subi	r28, 0x70	; 112
    24b6:	df 4f       	sbci	r29, 0xFF	; 255
    24b8:	98 81       	ld	r25, Y
    24ba:	c0 59       	subi	r28, 0x90	; 144
    24bc:	d0 40       	sbci	r29, 0x00	; 0
    24be:	91 50       	subi	r25, 0x01	; 1
    24c0:	c0 57       	subi	r28, 0x70	; 112
    24c2:	df 4f       	sbci	r29, 0xFF	; 255
    24c4:	98 83       	st	Y, r25
    24c6:	c0 59       	subi	r28, 0x90	; 144
    24c8:	d0 40       	sbci	r29, 0x00	; 0
    24ca:	c0 57       	subi	r28, 0x70	; 112
    24cc:	df 4f       	sbci	r29, 0xFF	; 255
    24ce:	e8 81       	ld	r30, Y
    24d0:	c0 59       	subi	r28, 0x90	; 144
    24d2:	d0 40       	sbci	r29, 0x00	; 0
    24d4:	ee 23       	and	r30, r30
    24d6:	31 f6       	brne	.-116    	; 0x2464 <main+0x5c>
	u8 Wrong_psw[] = {"PLEASE TRY AGAIN"};
    24d8:	ce 01       	movw	r24, r28
    24da:	8d 5a       	subi	r24, 0xAD	; 173
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	cf 56       	subi	r28, 0x6F	; 111
    24e0:	df 4f       	sbci	r29, 0xFF	; 255
    24e2:	99 83       	std	Y+1, r25	; 0x01
    24e4:	88 83       	st	Y, r24
    24e6:	c1 59       	subi	r28, 0x91	; 145
    24e8:	d0 40       	sbci	r29, 0x00	; 0
    24ea:	81 e7       	ldi	r24, 0x71	; 113
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	cd 56       	subi	r28, 0x6D	; 109
    24f0:	df 4f       	sbci	r29, 0xFF	; 255
    24f2:	99 83       	std	Y+1, r25	; 0x01
    24f4:	88 83       	st	Y, r24
    24f6:	c3 59       	subi	r28, 0x93	; 147
    24f8:	d0 40       	sbci	r29, 0x00	; 0
    24fa:	91 e1       	ldi	r25, 0x11	; 17
    24fc:	cb 56       	subi	r28, 0x6B	; 107
    24fe:	df 4f       	sbci	r29, 0xFF	; 255
    2500:	98 83       	st	Y, r25
    2502:	c5 59       	subi	r28, 0x95	; 149
    2504:	d0 40       	sbci	r29, 0x00	; 0
    2506:	cd 56       	subi	r28, 0x6D	; 109
    2508:	df 4f       	sbci	r29, 0xFF	; 255
    250a:	e8 81       	ld	r30, Y
    250c:	f9 81       	ldd	r31, Y+1	; 0x01
    250e:	c3 59       	subi	r28, 0x93	; 147
    2510:	d0 40       	sbci	r29, 0x00	; 0
    2512:	00 80       	ld	r0, Z
    2514:	cd 56       	subi	r28, 0x6D	; 109
    2516:	df 4f       	sbci	r29, 0xFF	; 255
    2518:	88 81       	ld	r24, Y
    251a:	99 81       	ldd	r25, Y+1	; 0x01
    251c:	c3 59       	subi	r28, 0x93	; 147
    251e:	d0 40       	sbci	r29, 0x00	; 0
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	cd 56       	subi	r28, 0x6D	; 109
    2524:	df 4f       	sbci	r29, 0xFF	; 255
    2526:	99 83       	std	Y+1, r25	; 0x01
    2528:	88 83       	st	Y, r24
    252a:	c3 59       	subi	r28, 0x93	; 147
    252c:	d0 40       	sbci	r29, 0x00	; 0
    252e:	cf 56       	subi	r28, 0x6F	; 111
    2530:	df 4f       	sbci	r29, 0xFF	; 255
    2532:	e8 81       	ld	r30, Y
    2534:	f9 81       	ldd	r31, Y+1	; 0x01
    2536:	c1 59       	subi	r28, 0x91	; 145
    2538:	d0 40       	sbci	r29, 0x00	; 0
    253a:	00 82       	st	Z, r0
    253c:	cf 56       	subi	r28, 0x6F	; 111
    253e:	df 4f       	sbci	r29, 0xFF	; 255
    2540:	88 81       	ld	r24, Y
    2542:	99 81       	ldd	r25, Y+1	; 0x01
    2544:	c1 59       	subi	r28, 0x91	; 145
    2546:	d0 40       	sbci	r29, 0x00	; 0
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	cf 56       	subi	r28, 0x6F	; 111
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	99 83       	std	Y+1, r25	; 0x01
    2550:	88 83       	st	Y, r24
    2552:	c1 59       	subi	r28, 0x91	; 145
    2554:	d0 40       	sbci	r29, 0x00	; 0
    2556:	cb 56       	subi	r28, 0x6B	; 107
    2558:	df 4f       	sbci	r29, 0xFF	; 255
    255a:	98 81       	ld	r25, Y
    255c:	c5 59       	subi	r28, 0x95	; 149
    255e:	d0 40       	sbci	r29, 0x00	; 0
    2560:	91 50       	subi	r25, 0x01	; 1
    2562:	cb 56       	subi	r28, 0x6B	; 107
    2564:	df 4f       	sbci	r29, 0xFF	; 255
    2566:	98 83       	st	Y, r25
    2568:	c5 59       	subi	r28, 0x95	; 149
    256a:	d0 40       	sbci	r29, 0x00	; 0
    256c:	cb 56       	subi	r28, 0x6B	; 107
    256e:	df 4f       	sbci	r29, 0xFF	; 255
    2570:	e8 81       	ld	r30, Y
    2572:	c5 59       	subi	r28, 0x95	; 149
    2574:	d0 40       	sbci	r29, 0x00	; 0
    2576:	ee 23       	and	r30, r30
    2578:	31 f6       	brne	.-116    	; 0x2506 <main+0xfe>

	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	62 e0       	ldi	r22, 0x02	; 2
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	64 e0       	ldi	r22, 0x04	; 4
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>

	LCD_voidInit();
    258e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <LCD_voidInit>
	KEYPAD_voidInit();
    2592:	0e 94 19 11 	call	0x2232	; 0x2232 <KEYPAD_voidInit>
		0b11111,
		0b00000,
		0b00000,
		0b00000,
		0b00000
	};
    2596:	ce 01       	movw	r24, r28
    2598:	8c 59       	subi	r24, 0x9C	; 156
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	ca 56       	subi	r28, 0x6A	; 106
    259e:	df 4f       	sbci	r29, 0xFF	; 255
    25a0:	99 83       	std	Y+1, r25	; 0x01
    25a2:	88 83       	st	Y, r24
    25a4:	c6 59       	subi	r28, 0x96	; 150
    25a6:	d0 40       	sbci	r29, 0x00	; 0
    25a8:	8a eb       	ldi	r24, 0xBA	; 186
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	c8 56       	subi	r28, 0x68	; 104
    25ae:	df 4f       	sbci	r29, 0xFF	; 255
    25b0:	99 83       	std	Y+1, r25	; 0x01
    25b2:	88 83       	st	Y, r24
    25b4:	c8 59       	subi	r28, 0x98	; 152
    25b6:	d0 40       	sbci	r29, 0x00	; 0
    25b8:	98 e0       	ldi	r25, 0x08	; 8
    25ba:	c6 56       	subi	r28, 0x66	; 102
    25bc:	df 4f       	sbci	r29, 0xFF	; 255
    25be:	98 83       	st	Y, r25
    25c0:	ca 59       	subi	r28, 0x9A	; 154
    25c2:	d0 40       	sbci	r29, 0x00	; 0
    25c4:	c8 56       	subi	r28, 0x68	; 104
    25c6:	df 4f       	sbci	r29, 0xFF	; 255
    25c8:	e8 81       	ld	r30, Y
    25ca:	f9 81       	ldd	r31, Y+1	; 0x01
    25cc:	c8 59       	subi	r28, 0x98	; 152
    25ce:	d0 40       	sbci	r29, 0x00	; 0
    25d0:	00 80       	ld	r0, Z
    25d2:	c8 56       	subi	r28, 0x68	; 104
    25d4:	df 4f       	sbci	r29, 0xFF	; 255
    25d6:	88 81       	ld	r24, Y
    25d8:	99 81       	ldd	r25, Y+1	; 0x01
    25da:	c8 59       	subi	r28, 0x98	; 152
    25dc:	d0 40       	sbci	r29, 0x00	; 0
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	c8 56       	subi	r28, 0x68	; 104
    25e2:	df 4f       	sbci	r29, 0xFF	; 255
    25e4:	99 83       	std	Y+1, r25	; 0x01
    25e6:	88 83       	st	Y, r24
    25e8:	c8 59       	subi	r28, 0x98	; 152
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	ca 56       	subi	r28, 0x6A	; 106
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	e8 81       	ld	r30, Y
    25f2:	f9 81       	ldd	r31, Y+1	; 0x01
    25f4:	c6 59       	subi	r28, 0x96	; 150
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	00 82       	st	Z, r0
    25fa:	ca 56       	subi	r28, 0x6A	; 106
    25fc:	df 4f       	sbci	r29, 0xFF	; 255
    25fe:	88 81       	ld	r24, Y
    2600:	99 81       	ldd	r25, Y+1	; 0x01
    2602:	c6 59       	subi	r28, 0x96	; 150
    2604:	d0 40       	sbci	r29, 0x00	; 0
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	ca 56       	subi	r28, 0x6A	; 106
    260a:	df 4f       	sbci	r29, 0xFF	; 255
    260c:	99 83       	std	Y+1, r25	; 0x01
    260e:	88 83       	st	Y, r24
    2610:	c6 59       	subi	r28, 0x96	; 150
    2612:	d0 40       	sbci	r29, 0x00	; 0
    2614:	c6 56       	subi	r28, 0x66	; 102
    2616:	df 4f       	sbci	r29, 0xFF	; 255
    2618:	98 81       	ld	r25, Y
    261a:	ca 59       	subi	r28, 0x9A	; 154
    261c:	d0 40       	sbci	r29, 0x00	; 0
    261e:	91 50       	subi	r25, 0x01	; 1
    2620:	c6 56       	subi	r28, 0x66	; 102
    2622:	df 4f       	sbci	r29, 0xFF	; 255
    2624:	98 83       	st	Y, r25
    2626:	ca 59       	subi	r28, 0x9A	; 154
    2628:	d0 40       	sbci	r29, 0x00	; 0
    262a:	c6 56       	subi	r28, 0x66	; 102
    262c:	df 4f       	sbci	r29, 0xFF	; 255
    262e:	e8 81       	ld	r30, Y
    2630:	ca 59       	subi	r28, 0x9A	; 154
    2632:	d0 40       	sbci	r29, 0x00	; 0
    2634:	ee 23       	and	r30, r30
    2636:	31 f6       	brne	.-116    	; 0x25c4 <main+0x1bc>
		0b00111,
		0b00100,
		0b01000,
		0b10000,
		0b00000
	};
    2638:	ce 01       	movw	r24, r28
    263a:	84 59       	subi	r24, 0x94	; 148
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	c5 56       	subi	r28, 0x65	; 101
    2640:	df 4f       	sbci	r29, 0xFF	; 255
    2642:	99 83       	std	Y+1, r25	; 0x01
    2644:	88 83       	st	Y, r24
    2646:	cb 59       	subi	r28, 0x9B	; 155
    2648:	d0 40       	sbci	r29, 0x00	; 0
    264a:	82 eb       	ldi	r24, 0xB2	; 178
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	c3 56       	subi	r28, 0x63	; 99
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	99 83       	std	Y+1, r25	; 0x01
    2654:	88 83       	st	Y, r24
    2656:	cd 59       	subi	r28, 0x9D	; 157
    2658:	d0 40       	sbci	r29, 0x00	; 0
    265a:	98 e0       	ldi	r25, 0x08	; 8
    265c:	c1 56       	subi	r28, 0x61	; 97
    265e:	df 4f       	sbci	r29, 0xFF	; 255
    2660:	98 83       	st	Y, r25
    2662:	cf 59       	subi	r28, 0x9F	; 159
    2664:	d0 40       	sbci	r29, 0x00	; 0
    2666:	c3 56       	subi	r28, 0x63	; 99
    2668:	df 4f       	sbci	r29, 0xFF	; 255
    266a:	e8 81       	ld	r30, Y
    266c:	f9 81       	ldd	r31, Y+1	; 0x01
    266e:	cd 59       	subi	r28, 0x9D	; 157
    2670:	d0 40       	sbci	r29, 0x00	; 0
    2672:	00 80       	ld	r0, Z
    2674:	c3 56       	subi	r28, 0x63	; 99
    2676:	df 4f       	sbci	r29, 0xFF	; 255
    2678:	88 81       	ld	r24, Y
    267a:	99 81       	ldd	r25, Y+1	; 0x01
    267c:	cd 59       	subi	r28, 0x9D	; 157
    267e:	d0 40       	sbci	r29, 0x00	; 0
    2680:	01 96       	adiw	r24, 0x01	; 1
    2682:	c3 56       	subi	r28, 0x63	; 99
    2684:	df 4f       	sbci	r29, 0xFF	; 255
    2686:	99 83       	std	Y+1, r25	; 0x01
    2688:	88 83       	st	Y, r24
    268a:	cd 59       	subi	r28, 0x9D	; 157
    268c:	d0 40       	sbci	r29, 0x00	; 0
    268e:	c5 56       	subi	r28, 0x65	; 101
    2690:	df 4f       	sbci	r29, 0xFF	; 255
    2692:	e8 81       	ld	r30, Y
    2694:	f9 81       	ldd	r31, Y+1	; 0x01
    2696:	cb 59       	subi	r28, 0x9B	; 155
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	00 82       	st	Z, r0
    269c:	c5 56       	subi	r28, 0x65	; 101
    269e:	df 4f       	sbci	r29, 0xFF	; 255
    26a0:	88 81       	ld	r24, Y
    26a2:	99 81       	ldd	r25, Y+1	; 0x01
    26a4:	cb 59       	subi	r28, 0x9B	; 155
    26a6:	d0 40       	sbci	r29, 0x00	; 0
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	c5 56       	subi	r28, 0x65	; 101
    26ac:	df 4f       	sbci	r29, 0xFF	; 255
    26ae:	99 83       	std	Y+1, r25	; 0x01
    26b0:	88 83       	st	Y, r24
    26b2:	cb 59       	subi	r28, 0x9B	; 155
    26b4:	d0 40       	sbci	r29, 0x00	; 0
    26b6:	c1 56       	subi	r28, 0x61	; 97
    26b8:	df 4f       	sbci	r29, 0xFF	; 255
    26ba:	98 81       	ld	r25, Y
    26bc:	cf 59       	subi	r28, 0x9F	; 159
    26be:	d0 40       	sbci	r29, 0x00	; 0
    26c0:	91 50       	subi	r25, 0x01	; 1
    26c2:	c1 56       	subi	r28, 0x61	; 97
    26c4:	df 4f       	sbci	r29, 0xFF	; 255
    26c6:	98 83       	st	Y, r25
    26c8:	cf 59       	subi	r28, 0x9F	; 159
    26ca:	d0 40       	sbci	r29, 0x00	; 0
    26cc:	c1 56       	subi	r28, 0x61	; 97
    26ce:	df 4f       	sbci	r29, 0xFF	; 255
    26d0:	e8 81       	ld	r30, Y
    26d2:	cf 59       	subi	r28, 0x9F	; 159
    26d4:	d0 40       	sbci	r29, 0x00	; 0
    26d6:	ee 23       	and	r30, r30
    26d8:	31 f6       	brne	.-116    	; 0x2666 <main+0x25e>
		0b00100,
		0b00000,
		0b00000,
		0b00000,
		0b00000
	};
    26da:	ce 01       	movw	r24, r28
    26dc:	8c 58       	subi	r24, 0x8C	; 140
    26de:	9f 4f       	sbci	r25, 0xFF	; 255
    26e0:	c0 56       	subi	r28, 0x60	; 96
    26e2:	df 4f       	sbci	r29, 0xFF	; 255
    26e4:	99 83       	std	Y+1, r25	; 0x01
    26e6:	88 83       	st	Y, r24
    26e8:	c0 5a       	subi	r28, 0xA0	; 160
    26ea:	d0 40       	sbci	r29, 0x00	; 0
    26ec:	8a ea       	ldi	r24, 0xAA	; 170
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	ce 55       	subi	r28, 0x5E	; 94
    26f2:	df 4f       	sbci	r29, 0xFF	; 255
    26f4:	99 83       	std	Y+1, r25	; 0x01
    26f6:	88 83       	st	Y, r24
    26f8:	c2 5a       	subi	r28, 0xA2	; 162
    26fa:	d0 40       	sbci	r29, 0x00	; 0
    26fc:	98 e0       	ldi	r25, 0x08	; 8
    26fe:	cc 55       	subi	r28, 0x5C	; 92
    2700:	df 4f       	sbci	r29, 0xFF	; 255
    2702:	98 83       	st	Y, r25
    2704:	c4 5a       	subi	r28, 0xA4	; 164
    2706:	d0 40       	sbci	r29, 0x00	; 0
    2708:	ce 55       	subi	r28, 0x5E	; 94
    270a:	df 4f       	sbci	r29, 0xFF	; 255
    270c:	e8 81       	ld	r30, Y
    270e:	f9 81       	ldd	r31, Y+1	; 0x01
    2710:	c2 5a       	subi	r28, 0xA2	; 162
    2712:	d0 40       	sbci	r29, 0x00	; 0
    2714:	00 80       	ld	r0, Z
    2716:	ce 55       	subi	r28, 0x5E	; 94
    2718:	df 4f       	sbci	r29, 0xFF	; 255
    271a:	88 81       	ld	r24, Y
    271c:	99 81       	ldd	r25, Y+1	; 0x01
    271e:	c2 5a       	subi	r28, 0xA2	; 162
    2720:	d0 40       	sbci	r29, 0x00	; 0
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	ce 55       	subi	r28, 0x5E	; 94
    2726:	df 4f       	sbci	r29, 0xFF	; 255
    2728:	99 83       	std	Y+1, r25	; 0x01
    272a:	88 83       	st	Y, r24
    272c:	c2 5a       	subi	r28, 0xA2	; 162
    272e:	d0 40       	sbci	r29, 0x00	; 0
    2730:	c0 56       	subi	r28, 0x60	; 96
    2732:	df 4f       	sbci	r29, 0xFF	; 255
    2734:	e8 81       	ld	r30, Y
    2736:	f9 81       	ldd	r31, Y+1	; 0x01
    2738:	c0 5a       	subi	r28, 0xA0	; 160
    273a:	d0 40       	sbci	r29, 0x00	; 0
    273c:	00 82       	st	Z, r0
    273e:	c0 56       	subi	r28, 0x60	; 96
    2740:	df 4f       	sbci	r29, 0xFF	; 255
    2742:	88 81       	ld	r24, Y
    2744:	99 81       	ldd	r25, Y+1	; 0x01
    2746:	c0 5a       	subi	r28, 0xA0	; 160
    2748:	d0 40       	sbci	r29, 0x00	; 0
    274a:	01 96       	adiw	r24, 0x01	; 1
    274c:	c0 56       	subi	r28, 0x60	; 96
    274e:	df 4f       	sbci	r29, 0xFF	; 255
    2750:	99 83       	std	Y+1, r25	; 0x01
    2752:	88 83       	st	Y, r24
    2754:	c0 5a       	subi	r28, 0xA0	; 160
    2756:	d0 40       	sbci	r29, 0x00	; 0
    2758:	cc 55       	subi	r28, 0x5C	; 92
    275a:	df 4f       	sbci	r29, 0xFF	; 255
    275c:	98 81       	ld	r25, Y
    275e:	c4 5a       	subi	r28, 0xA4	; 164
    2760:	d0 40       	sbci	r29, 0x00	; 0
    2762:	91 50       	subi	r25, 0x01	; 1
    2764:	cc 55       	subi	r28, 0x5C	; 92
    2766:	df 4f       	sbci	r29, 0xFF	; 255
    2768:	98 83       	st	Y, r25
    276a:	c4 5a       	subi	r28, 0xA4	; 164
    276c:	d0 40       	sbci	r29, 0x00	; 0
    276e:	cc 55       	subi	r28, 0x5C	; 92
    2770:	df 4f       	sbci	r29, 0xFF	; 255
    2772:	e8 81       	ld	r30, Y
    2774:	c4 5a       	subi	r28, 0xA4	; 164
    2776:	d0 40       	sbci	r29, 0x00	; 0
    2778:	ee 23       	and	r30, r30
    277a:	31 f6       	brne	.-116    	; 0x2708 <main+0x300>
		0b11111,
		0b00000,
		0b00000,
		0b00000,
		0b00000
	};
    277c:	ce 01       	movw	r24, r28
    277e:	84 58       	subi	r24, 0x84	; 132
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	cb 55       	subi	r28, 0x5B	; 91
    2784:	df 4f       	sbci	r29, 0xFF	; 255
    2786:	99 83       	std	Y+1, r25	; 0x01
    2788:	88 83       	st	Y, r24
    278a:	c5 5a       	subi	r28, 0xA5	; 165
    278c:	d0 40       	sbci	r29, 0x00	; 0
    278e:	82 ea       	ldi	r24, 0xA2	; 162
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	c9 55       	subi	r28, 0x59	; 89
    2794:	df 4f       	sbci	r29, 0xFF	; 255
    2796:	99 83       	std	Y+1, r25	; 0x01
    2798:	88 83       	st	Y, r24
    279a:	c7 5a       	subi	r28, 0xA7	; 167
    279c:	d0 40       	sbci	r29, 0x00	; 0
    279e:	98 e0       	ldi	r25, 0x08	; 8
    27a0:	c7 55       	subi	r28, 0x57	; 87
    27a2:	df 4f       	sbci	r29, 0xFF	; 255
    27a4:	98 83       	st	Y, r25
    27a6:	c9 5a       	subi	r28, 0xA9	; 169
    27a8:	d0 40       	sbci	r29, 0x00	; 0
    27aa:	c9 55       	subi	r28, 0x59	; 89
    27ac:	df 4f       	sbci	r29, 0xFF	; 255
    27ae:	e8 81       	ld	r30, Y
    27b0:	f9 81       	ldd	r31, Y+1	; 0x01
    27b2:	c7 5a       	subi	r28, 0xA7	; 167
    27b4:	d0 40       	sbci	r29, 0x00	; 0
    27b6:	00 80       	ld	r0, Z
    27b8:	c9 55       	subi	r28, 0x59	; 89
    27ba:	df 4f       	sbci	r29, 0xFF	; 255
    27bc:	88 81       	ld	r24, Y
    27be:	99 81       	ldd	r25, Y+1	; 0x01
    27c0:	c7 5a       	subi	r28, 0xA7	; 167
    27c2:	d0 40       	sbci	r29, 0x00	; 0
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	c9 55       	subi	r28, 0x59	; 89
    27c8:	df 4f       	sbci	r29, 0xFF	; 255
    27ca:	99 83       	std	Y+1, r25	; 0x01
    27cc:	88 83       	st	Y, r24
    27ce:	c7 5a       	subi	r28, 0xA7	; 167
    27d0:	d0 40       	sbci	r29, 0x00	; 0
    27d2:	cb 55       	subi	r28, 0x5B	; 91
    27d4:	df 4f       	sbci	r29, 0xFF	; 255
    27d6:	e8 81       	ld	r30, Y
    27d8:	f9 81       	ldd	r31, Y+1	; 0x01
    27da:	c5 5a       	subi	r28, 0xA5	; 165
    27dc:	d0 40       	sbci	r29, 0x00	; 0
    27de:	00 82       	st	Z, r0
    27e0:	cb 55       	subi	r28, 0x5B	; 91
    27e2:	df 4f       	sbci	r29, 0xFF	; 255
    27e4:	88 81       	ld	r24, Y
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	c5 5a       	subi	r28, 0xA5	; 165
    27ea:	d0 40       	sbci	r29, 0x00	; 0
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	cb 55       	subi	r28, 0x5B	; 91
    27f0:	df 4f       	sbci	r29, 0xFF	; 255
    27f2:	99 83       	std	Y+1, r25	; 0x01
    27f4:	88 83       	st	Y, r24
    27f6:	c5 5a       	subi	r28, 0xA5	; 165
    27f8:	d0 40       	sbci	r29, 0x00	; 0
    27fa:	c7 55       	subi	r28, 0x57	; 87
    27fc:	df 4f       	sbci	r29, 0xFF	; 255
    27fe:	98 81       	ld	r25, Y
    2800:	c9 5a       	subi	r28, 0xA9	; 169
    2802:	d0 40       	sbci	r29, 0x00	; 0
    2804:	91 50       	subi	r25, 0x01	; 1
    2806:	c7 55       	subi	r28, 0x57	; 87
    2808:	df 4f       	sbci	r29, 0xFF	; 255
    280a:	98 83       	st	Y, r25
    280c:	c9 5a       	subi	r28, 0xA9	; 169
    280e:	d0 40       	sbci	r29, 0x00	; 0
    2810:	c7 55       	subi	r28, 0x57	; 87
    2812:	df 4f       	sbci	r29, 0xFF	; 255
    2814:	e8 81       	ld	r30, Y
    2816:	c9 5a       	subi	r28, 0xA9	; 169
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	ee 23       	and	r30, r30
    281c:	31 f6       	brne	.-116    	; 0x27aa <main+0x3a2>
		0b00101,
		0b10110,
		0b10010,
		0b01110,
		0b00000,
	};
    281e:	ce 01       	movw	r24, r28
    2820:	8c 57       	subi	r24, 0x7C	; 124
    2822:	9f 4f       	sbci	r25, 0xFF	; 255
    2824:	c6 55       	subi	r28, 0x56	; 86
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	99 83       	std	Y+1, r25	; 0x01
    282a:	88 83       	st	Y, r24
    282c:	ca 5a       	subi	r28, 0xAA	; 170
    282e:	d0 40       	sbci	r29, 0x00	; 0
    2830:	8a e9       	ldi	r24, 0x9A	; 154
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	c4 55       	subi	r28, 0x54	; 84
    2836:	df 4f       	sbci	r29, 0xFF	; 255
    2838:	99 83       	std	Y+1, r25	; 0x01
    283a:	88 83       	st	Y, r24
    283c:	cc 5a       	subi	r28, 0xAC	; 172
    283e:	d0 40       	sbci	r29, 0x00	; 0
    2840:	98 e0       	ldi	r25, 0x08	; 8
    2842:	c2 55       	subi	r28, 0x52	; 82
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	98 83       	st	Y, r25
    2848:	ce 5a       	subi	r28, 0xAE	; 174
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	c4 55       	subi	r28, 0x54	; 84
    284e:	df 4f       	sbci	r29, 0xFF	; 255
    2850:	e8 81       	ld	r30, Y
    2852:	f9 81       	ldd	r31, Y+1	; 0x01
    2854:	cc 5a       	subi	r28, 0xAC	; 172
    2856:	d0 40       	sbci	r29, 0x00	; 0
    2858:	00 80       	ld	r0, Z
    285a:	c4 55       	subi	r28, 0x54	; 84
    285c:	df 4f       	sbci	r29, 0xFF	; 255
    285e:	88 81       	ld	r24, Y
    2860:	99 81       	ldd	r25, Y+1	; 0x01
    2862:	cc 5a       	subi	r28, 0xAC	; 172
    2864:	d0 40       	sbci	r29, 0x00	; 0
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	c4 55       	subi	r28, 0x54	; 84
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	99 83       	std	Y+1, r25	; 0x01
    286e:	88 83       	st	Y, r24
    2870:	cc 5a       	subi	r28, 0xAC	; 172
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	c6 55       	subi	r28, 0x56	; 86
    2876:	df 4f       	sbci	r29, 0xFF	; 255
    2878:	e8 81       	ld	r30, Y
    287a:	f9 81       	ldd	r31, Y+1	; 0x01
    287c:	ca 5a       	subi	r28, 0xAA	; 170
    287e:	d0 40       	sbci	r29, 0x00	; 0
    2880:	00 82       	st	Z, r0
    2882:	c6 55       	subi	r28, 0x56	; 86
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	88 81       	ld	r24, Y
    2888:	99 81       	ldd	r25, Y+1	; 0x01
    288a:	ca 5a       	subi	r28, 0xAA	; 170
    288c:	d0 40       	sbci	r29, 0x00	; 0
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	c6 55       	subi	r28, 0x56	; 86
    2892:	df 4f       	sbci	r29, 0xFF	; 255
    2894:	99 83       	std	Y+1, r25	; 0x01
    2896:	88 83       	st	Y, r24
    2898:	ca 5a       	subi	r28, 0xAA	; 170
    289a:	d0 40       	sbci	r29, 0x00	; 0
    289c:	c2 55       	subi	r28, 0x52	; 82
    289e:	df 4f       	sbci	r29, 0xFF	; 255
    28a0:	98 81       	ld	r25, Y
    28a2:	ce 5a       	subi	r28, 0xAE	; 174
    28a4:	d0 40       	sbci	r29, 0x00	; 0
    28a6:	91 50       	subi	r25, 0x01	; 1
    28a8:	c2 55       	subi	r28, 0x52	; 82
    28aa:	df 4f       	sbci	r29, 0xFF	; 255
    28ac:	98 83       	st	Y, r25
    28ae:	ce 5a       	subi	r28, 0xAE	; 174
    28b0:	d0 40       	sbci	r29, 0x00	; 0
    28b2:	c2 55       	subi	r28, 0x52	; 82
    28b4:	df 4f       	sbci	r29, 0xFF	; 255
    28b6:	e8 81       	ld	r30, Y
    28b8:	ce 5a       	subi	r28, 0xAE	; 174
    28ba:	d0 40       	sbci	r29, 0x00	; 0
    28bc:	ee 23       	and	r30, r30
    28be:	31 f6       	brne	.-116    	; 0x284c <main+0x444>

	while(1)
	{
		u16 entered_psw = 0;
    28c0:	1a ae       	std	Y+58, r1	; 0x3a
    28c2:	19 ae       	std	Y+57, r1	; 0x39
		for (i = 0; i < 4; ++i) {
    28c4:	1c ae       	std	Y+60, r1	; 0x3c
    28c6:	a1 c0       	rjmp	.+322    	; 0x2a0a <main+0x602>
			num = 0xFF;
    28c8:	8f ef       	ldi	r24, 0xFF	; 255
    28ca:	8b af       	std	Y+59, r24	; 0x3b
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <main+0x4cc>
			while(num == 0xFF){
				num = KEYPAD_u8AdjustKeyPadNum();
    28ce:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <KEYPAD_u8AdjustKeyPadNum>
    28d2:	8b af       	std	Y+59, r24	; 0x3b
	while(1)
	{
		u16 entered_psw = 0;
		for (i = 0; i < 4; ++i) {
			num = 0xFF;
			while(num == 0xFF){
    28d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    28d6:	8f 3f       	cpi	r24, 0xFF	; 255
    28d8:	d1 f3       	breq	.-12     	; 0x28ce <main+0x4c6>
				num = KEYPAD_u8AdjustKeyPadNum();
			}
			LCD_voidDisplayNumber(num);
    28da:	8b ad       	ldd	r24, Y+59	; 0x3b
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidDisplayNumber>
			LCD_voidGoToSpecificPosition(0,i);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    28f0:	0e 94 36 10 	call	0x206c	; 0x206c <LCD_voidGoToSpecificPosition>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	aa ef       	ldi	r26, 0xFA	; 250
    28fa:	b3 e4       	ldi	r27, 0x43	; 67
    28fc:	8d ab       	std	Y+53, r24	; 0x35
    28fe:	9e ab       	std	Y+54, r25	; 0x36
    2900:	af ab       	std	Y+55, r26	; 0x37
    2902:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2904:	6d a9       	ldd	r22, Y+53	; 0x35
    2906:	7e a9       	ldd	r23, Y+54	; 0x36
    2908:	8f a9       	ldd	r24, Y+55	; 0x37
    290a:	98 ad       	ldd	r25, Y+56	; 0x38
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	4a e7       	ldi	r20, 0x7A	; 122
    2912:	55 e4       	ldi	r21, 0x45	; 69
    2914:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	89 ab       	std	Y+49, r24	; 0x31
    291e:	9a ab       	std	Y+50, r25	; 0x32
    2920:	ab ab       	std	Y+51, r26	; 0x33
    2922:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2924:	69 a9       	ldd	r22, Y+49	; 0x31
    2926:	7a a9       	ldd	r23, Y+50	; 0x32
    2928:	8b a9       	ldd	r24, Y+51	; 0x33
    292a:	9c a9       	ldd	r25, Y+52	; 0x34
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	2c f4       	brge	.+10     	; 0x2946 <main+0x53e>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	98 ab       	std	Y+48, r25	; 0x30
    2942:	8f a7       	std	Y+47, r24	; 0x2f
    2944:	3f c0       	rjmp	.+126    	; 0x29c4 <main+0x5bc>
	else if (__tmp > 65535)
    2946:	69 a9       	ldd	r22, Y+49	; 0x31
    2948:	7a a9       	ldd	r23, Y+50	; 0x32
    294a:	8b a9       	ldd	r24, Y+51	; 0x33
    294c:	9c a9       	ldd	r25, Y+52	; 0x34
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	3f ef       	ldi	r19, 0xFF	; 255
    2952:	4f e7       	ldi	r20, 0x7F	; 127
    2954:	57 e4       	ldi	r21, 0x47	; 71
    2956:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    295a:	18 16       	cp	r1, r24
    295c:	4c f5       	brge	.+82     	; 0x29b0 <main+0x5a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	6d a9       	ldd	r22, Y+53	; 0x35
    2960:	7e a9       	ldd	r23, Y+54	; 0x36
    2962:	8f a9       	ldd	r24, Y+55	; 0x37
    2964:	98 ad       	ldd	r25, Y+56	; 0x38
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	98 ab       	std	Y+48, r25	; 0x30
    2984:	8f a7       	std	Y+47, r24	; 0x2f
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <main+0x59e>
    2988:	80 e9       	ldi	r24, 0x90	; 144
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	9e a7       	std	Y+46, r25	; 0x2e
    298e:	8d a7       	std	Y+45, r24	; 0x2d
    2990:	8d a5       	ldd	r24, Y+45	; 0x2d
    2992:	9e a5       	ldd	r25, Y+46	; 0x2e
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <main+0x58c>
    2998:	9e a7       	std	Y+46, r25	; 0x2e
    299a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8f a5       	ldd	r24, Y+47	; 0x2f
    299e:	98 a9       	ldd	r25, Y+48	; 0x30
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	98 ab       	std	Y+48, r25	; 0x30
    29a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a8:	98 a9       	ldd	r25, Y+48	; 0x30
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <main+0x580>
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <main+0x5d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	69 a9       	ldd	r22, Y+49	; 0x31
    29b2:	7a a9       	ldd	r23, Y+50	; 0x32
    29b4:	8b a9       	ldd	r24, Y+51	; 0x33
    29b6:	9c a9       	ldd	r25, Y+52	; 0x34
    29b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	98 ab       	std	Y+48, r25	; 0x30
    29c2:	8f a7       	std	Y+47, r24	; 0x2f
    29c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c6:	98 a9       	ldd	r25, Y+48	; 0x30
    29c8:	9c a7       	std	Y+44, r25	; 0x2c
    29ca:	8b a7       	std	Y+43, r24	; 0x2b
    29cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <main+0x5c8>
    29d4:	9c a7       	std	Y+44, r25	; 0x2c
    29d6:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			LCD_voidDisplayChar('*');
    29d8:	8a e2       	ldi	r24, 0x2A	; 42
    29da:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <LCD_voidDisplayChar>
			entered_psw = entered_psw*10 + num;
    29de:	89 ad       	ldd	r24, Y+57	; 0x39
    29e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    29e2:	9c 01       	movw	r18, r24
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	c9 01       	movw	r24, r18
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	28 0f       	add	r18, r24
    29f4:	39 1f       	adc	r19, r25
    29f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    29f8:	88 2f       	mov	r24, r24
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	82 0f       	add	r24, r18
    29fe:	93 1f       	adc	r25, r19
    2a00:	9a af       	std	Y+58, r25	; 0x3a
    2a02:	89 af       	std	Y+57, r24	; 0x39
	};

	while(1)
	{
		u16 entered_psw = 0;
		for (i = 0; i < 4; ++i) {
    2a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	8c af       	std	Y+60, r24	; 0x3c
    2a0a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	08 f4       	brcc	.+2      	; 0x2a12 <main+0x60a>
    2a10:	5b cf       	rjmp	.-330    	; 0x28c8 <main+0x4c0>
			LCD_voidGoToSpecificPosition(0,i);
			_delay_ms(500);
			LCD_voidDisplayChar('*');
			entered_psw = entered_psw*10 + num;
		}
		if (entered_psw == psw){
    2a12:	89 ad       	ldd	r24, Y+57	; 0x39
    2a14:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a16:	fe 01       	movw	r30, r28
    2a18:	ff 96       	adiw	r30, 0x3f	; 63
    2a1a:	20 81       	ld	r18, Z
    2a1c:	31 81       	ldd	r19, Z+1	; 0x01
    2a1e:	82 17       	cp	r24, r18
    2a20:	93 07       	cpc	r25, r19
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <main+0x61e>
    2a24:	8a c0       	rjmp	.+276    	; 0x2b3a <main+0x732>
			LCD_voidClear();
    2a26:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
			LCD_voidDisplayString(Correct_psw);
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	8e 5b       	subi	r24, 0xBE	; 190
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidDisplayString>
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e4       	ldi	r25, 0x40	; 64
    2a42:	ac e1       	ldi	r26, 0x1C	; 28
    2a44:	b6 e4       	ldi	r27, 0x46	; 70
    2a46:	8f a3       	std	Y+39, r24	; 0x27
    2a48:	98 a7       	std	Y+40, r25	; 0x28
    2a4a:	a9 a7       	std	Y+41, r26	; 0x29
    2a4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a50:	78 a5       	ldd	r23, Y+40	; 0x28
    2a52:	89 a5       	ldd	r24, Y+41	; 0x29
    2a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a e7       	ldi	r20, 0x7A	; 122
    2a5c:	55 e4       	ldi	r21, 0x45	; 69
    2a5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	8b a3       	std	Y+35, r24	; 0x23
    2a68:	9c a3       	std	Y+36, r25	; 0x24
    2a6a:	ad a3       	std	Y+37, r26	; 0x25
    2a6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a70:	7c a1       	ldd	r23, Y+36	; 0x24
    2a72:	8d a1       	ldd	r24, Y+37	; 0x25
    2a74:	9e a1       	ldd	r25, Y+38	; 0x26
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <main+0x688>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9a a3       	std	Y+34, r25	; 0x22
    2a8c:	89 a3       	std	Y+33, r24	; 0x21
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <main+0x706>
	else if (__tmp > 65535)
    2a90:	6b a1       	ldd	r22, Y+35	; 0x23
    2a92:	7c a1       	ldd	r23, Y+36	; 0x24
    2a94:	8d a1       	ldd	r24, Y+37	; 0x25
    2a96:	9e a1       	ldd	r25, Y+38	; 0x26
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <main+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6f a1       	ldd	r22, Y+39	; 0x27
    2aaa:	78 a5       	ldd	r23, Y+40	; 0x28
    2aac:	89 a5       	ldd	r24, Y+41	; 0x29
    2aae:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9a a3       	std	Y+34, r25	; 0x22
    2ace:	89 a3       	std	Y+33, r24	; 0x21
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <main+0x6e8>
    2ad2:	80 e9       	ldi	r24, 0x90	; 144
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	98 a3       	std	Y+32, r25	; 0x20
    2ad8:	8f 8f       	std	Y+31, r24	; 0x1f
    2ada:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2adc:	98 a1       	ldd	r25, Y+32	; 0x20
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <main+0x6d6>
    2ae2:	98 a3       	std	Y+32, r25	; 0x20
    2ae4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	9a a3       	std	Y+34, r25	; 0x22
    2aee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	89 a1       	ldd	r24, Y+33	; 0x21
    2af2:	9a a1       	ldd	r25, Y+34	; 0x22
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <main+0x6ca>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <main+0x71a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	6b a1       	ldd	r22, Y+35	; 0x23
    2afc:	7c a1       	ldd	r23, Y+36	; 0x24
    2afe:	8d a1       	ldd	r24, Y+37	; 0x25
    2b00:	9e a1       	ldd	r25, Y+38	; 0x26
    2b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9a a3       	std	Y+34, r25	; 0x22
    2b0c:	89 a3       	std	Y+33, r24	; 0x21
    2b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b10:	9a a1       	ldd	r25, Y+34	; 0x22
    2b12:	9e 8f       	std	Y+30, r25	; 0x1e
    2b14:	8d 8f       	std	Y+29, r24	; 0x1d
    2b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <main+0x712>
    2b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10000);
			LCD_voidClear();
    2b22:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
			counter = 0;
    2b30:	fe 01       	movw	r30, r28
    2b32:	ef 5b       	subi	r30, 0xBF	; 191
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	10 82       	st	Z, r1
    2b38:	c3 ce       	rjmp	.-634    	; 0x28c0 <main+0x4b8>
		} else{
			if (counter < 1) {
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ef 5b       	subi	r30, 0xBF	; 191
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	88 23       	and	r24, r24
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <main+0x740>
    2b46:	85 c0       	rjmp	.+266    	; 0x2c52 <main+0x84a>
				counter++;
    2b48:	de 01       	movw	r26, r28
    2b4a:	af 5b       	subi	r26, 0xBF	; 191
    2b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ef 5b       	subi	r30, 0xBF	; 191
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	8c 93       	st	X, r24
				LCD_voidClear();
    2b5a:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
				LCD_voidDisplayString(Wrong_psw);
    2b5e:	ce 01       	movw	r24, r28
    2b60:	8d 5a       	subi	r24, 0xAD	; 173
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_voidDisplayString>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e8       	ldi	r25, 0x80	; 128
    2b6c:	ab eb       	ldi	r26, 0xBB	; 187
    2b6e:	b4 e4       	ldi	r27, 0x44	; 68
    2b70:	89 8f       	std	Y+25, r24	; 0x19
    2b72:	9a 8f       	std	Y+26, r25	; 0x1a
    2b74:	ab 8f       	std	Y+27, r26	; 0x1b
    2b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	55 e4       	ldi	r21, 0x45	; 69
    2b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	8d 8b       	std	Y+21, r24	; 0x15
    2b92:	9e 8b       	std	Y+22, r25	; 0x16
    2b94:	af 8b       	std	Y+23, r26	; 0x17
    2b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b98:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <main+0x7b2>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9c 8b       	std	Y+20, r25	; 0x14
    2bb6:	8b 8b       	std	Y+19, r24	; 0x13
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <main+0x830>
	else if (__tmp > 65535)
    2bba:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <main+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9c 8b       	std	Y+20, r25	; 0x14
    2bf8:	8b 8b       	std	Y+19, r24	; 0x13
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <main+0x812>
    2bfc:	80 e9       	ldi	r24, 0x90	; 144
    2bfe:	91 e0       	ldi	r25, 0x01	; 1
    2c00:	9a 8b       	std	Y+18, r25	; 0x12
    2c02:	89 8b       	std	Y+17, r24	; 0x11
    2c04:	89 89       	ldd	r24, Y+17	; 0x11
    2c06:	9a 89       	ldd	r25, Y+18	; 0x12
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <main+0x800>
    2c0c:	9a 8b       	std	Y+18, r25	; 0x12
    2c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8b 89       	ldd	r24, Y+19	; 0x13
    2c12:	9c 89       	ldd	r25, Y+20	; 0x14
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	9c 8b       	std	Y+20, r25	; 0x14
    2c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <main+0x7f4>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <main+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	6d 89       	ldd	r22, Y+21	; 0x15
    2c26:	7e 89       	ldd	r23, Y+22	; 0x16
    2c28:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9c 8b       	std	Y+20, r25	; 0x14
    2c36:	8b 8b       	std	Y+19, r24	; 0x13
    2c38:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3c:	98 8b       	std	Y+16, r25	; 0x10
    2c3e:	8f 87       	std	Y+15, r24	; 0x0f
    2c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c42:	98 89       	ldd	r25, Y+16	; 0x10
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <main+0x83c>
    2c48:	98 8b       	std	Y+16, r25	; 0x10
    2c4a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1500);
				LCD_voidClear();
    2c4c:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
    2c50:	37 ce       	rjmp	.-914    	; 0x28c0 <main+0x4b8>
			} else {
				LCD_voidClear();
    2c52:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
				LCD_voidDrawData(0, first_char, 0, 11);
    2c56:	9e 01       	movw	r18, r28
    2c58:	2c 59       	subi	r18, 0x9C	; 156
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	b9 01       	movw	r22, r18
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	2b e0       	ldi	r18, 0x0B	; 11
    2c64:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidDrawData>
				LCD_voidDrawData(1, second_char, 0, 10);
    2c68:	9e 01       	movw	r18, r28
    2c6a:	24 59       	subi	r18, 0x94	; 148
    2c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	b9 01       	movw	r22, r18
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	2a e0       	ldi	r18, 0x0A	; 10
    2c76:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidDrawData>
				LCD_voidDrawData(2, third_char, 0, 9);
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	2c 58       	subi	r18, 0x8C	; 140
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	b9 01       	movw	r22, r18
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	29 e0       	ldi	r18, 0x09	; 9
    2c88:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidDrawData>
				LCD_voidDrawData(3, fourth_char, 0, 8);
    2c8c:	9e 01       	movw	r18, r28
    2c8e:	24 58       	subi	r18, 0x84	; 132
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	b9 01       	movw	r22, r18
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	28 e0       	ldi	r18, 0x08	; 8
    2c9a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidDrawData>
				LCD_voidDrawData(4, fifth_char, 0, 7);
    2c9e:	9e 01       	movw	r18, r28
    2ca0:	2c 57       	subi	r18, 0x7C	; 124
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	84 e0       	ldi	r24, 0x04	; 4
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	27 e0       	ldi	r18, 0x07	; 7
    2cac:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidDrawData>
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	64 e0       	ldi	r22, 0x04	; 4
    2cb4:	41 e0       	ldi	r20, 0x01	; 1
    2cb6:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	aa e7       	ldi	r26, 0x7A	; 122
    2cc0:	b4 e4       	ldi	r27, 0x44	; 68
    2cc2:	8b 87       	std	Y+11, r24	; 0x0b
    2cc4:	9c 87       	std	Y+12, r25	; 0x0c
    2cc6:	ad 87       	std	Y+13, r26	; 0x0d
    2cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a e7       	ldi	r20, 0x7A	; 122
    2cd8:	55 e4       	ldi	r21, 0x45	; 69
    2cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8f 83       	std	Y+7, r24	; 0x07
    2ce4:	98 87       	std	Y+8, r25	; 0x08
    2ce6:	a9 87       	std	Y+9, r26	; 0x09
    2ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <main+0x904>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <main+0x982>
	else if (__tmp > 65535)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <main+0x96e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <main+0x964>
    2d4e:	80 e9       	ldi	r24, 0x90	; 144
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <main+0x952>
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <main+0x946>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <main+0x996>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <main+0x98e>
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_voidClear();
    2d9e:	0e 94 06 10 	call	0x200c	; 0x200c <LCD_voidClear>
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	64 e0       	ldi	r22, 0x04	; 4
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_voidSetPinValue>
				counter = 0;
    2dac:	fe 01       	movw	r30, r28
    2dae:	ef 5b       	subi	r30, 0xBF	; 191
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	10 82       	st	Z, r1
    2db4:	85 cd       	rjmp	.-1270   	; 0x28c0 <main+0x4b8>

00002db6 <__udivmodsi4>:
    2db6:	a1 e2       	ldi	r26, 0x21	; 33
    2db8:	1a 2e       	mov	r1, r26
    2dba:	aa 1b       	sub	r26, r26
    2dbc:	bb 1b       	sub	r27, r27
    2dbe:	fd 01       	movw	r30, r26
    2dc0:	0d c0       	rjmp	.+26     	; 0x2ddc <__udivmodsi4_ep>

00002dc2 <__udivmodsi4_loop>:
    2dc2:	aa 1f       	adc	r26, r26
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	ee 1f       	adc	r30, r30
    2dc8:	ff 1f       	adc	r31, r31
    2dca:	a2 17       	cp	r26, r18
    2dcc:	b3 07       	cpc	r27, r19
    2dce:	e4 07       	cpc	r30, r20
    2dd0:	f5 07       	cpc	r31, r21
    2dd2:	20 f0       	brcs	.+8      	; 0x2ddc <__udivmodsi4_ep>
    2dd4:	a2 1b       	sub	r26, r18
    2dd6:	b3 0b       	sbc	r27, r19
    2dd8:	e4 0b       	sbc	r30, r20
    2dda:	f5 0b       	sbc	r31, r21

00002ddc <__udivmodsi4_ep>:
    2ddc:	66 1f       	adc	r22, r22
    2dde:	77 1f       	adc	r23, r23
    2de0:	88 1f       	adc	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	1a 94       	dec	r1
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <__udivmodsi4_loop>
    2de8:	60 95       	com	r22
    2dea:	70 95       	com	r23
    2dec:	80 95       	com	r24
    2dee:	90 95       	com	r25
    2df0:	9b 01       	movw	r18, r22
    2df2:	ac 01       	movw	r20, r24
    2df4:	bd 01       	movw	r22, r26
    2df6:	cf 01       	movw	r24, r30
    2df8:	08 95       	ret

00002dfa <__prologue_saves__>:
    2dfa:	2f 92       	push	r2
    2dfc:	3f 92       	push	r3
    2dfe:	4f 92       	push	r4
    2e00:	5f 92       	push	r5
    2e02:	6f 92       	push	r6
    2e04:	7f 92       	push	r7
    2e06:	8f 92       	push	r8
    2e08:	9f 92       	push	r9
    2e0a:	af 92       	push	r10
    2e0c:	bf 92       	push	r11
    2e0e:	cf 92       	push	r12
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	ca 1b       	sub	r28, r26
    2e24:	db 0b       	sbc	r29, r27
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	09 94       	ijmp

00002e32 <__epilogue_restores__>:
    2e32:	2a 88       	ldd	r2, Y+18	; 0x12
    2e34:	39 88       	ldd	r3, Y+17	; 0x11
    2e36:	48 88       	ldd	r4, Y+16	; 0x10
    2e38:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e40:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e42:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e44:	b9 84       	ldd	r11, Y+9	; 0x09
    2e46:	c8 84       	ldd	r12, Y+8	; 0x08
    2e48:	df 80       	ldd	r13, Y+7	; 0x07
    2e4a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e4c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e4e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e50:	1b 81       	ldd	r17, Y+3	; 0x03
    2e52:	aa 81       	ldd	r26, Y+2	; 0x02
    2e54:	b9 81       	ldd	r27, Y+1	; 0x01
    2e56:	ce 0f       	add	r28, r30
    2e58:	d1 1d       	adc	r29, r1
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	ed 01       	movw	r28, r26
    2e66:	08 95       	ret

00002e68 <_exit>:
    2e68:	f8 94       	cli

00002e6a <__stop_program>:
    2e6a:	ff cf       	rjmp	.-2      	; 0x2e6a <__stop_program>
